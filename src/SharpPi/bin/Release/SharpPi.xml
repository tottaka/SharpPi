<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpPi</name>
    </assembly>
    <members>
        <member name="T:SharpPi.GPIO.SoftwareSerial">
            <summary>
            Software serial communication over GPIO.
            </summary>
        </member>
        <member name="T:SharpPi.GPIO.GPIO">
            <summary>
            Class for using the GPIO on the Raspberry Pi.
            Requires http://www.airspayce.com/mikem/bcm2835/, source should be included.
            </summary>
        </member>
        <member name="T:SharpPi.GPIO.GPIO.Direction">
            <summary>
            Specifies the direction of the GPIO pin (in/out)
            </summary>
        </member>
        <member name="T:SharpPi.GPIO.GPIO.PinState">
            <summary>
            The state of the pin (on/off)
            </summary>
        </member>
        <member name="T:SharpPi.GPIO.GPIO.Pullup">
            <summary>
            The internal pull up-down resistor of the pin (up/down)
            </summary>
        </member>
        <member name="T:SharpPi.GPIO.GPIO.Pin">
            <summary>
            Refer to http://elinux.org/Rpi_Low-level_peripherals for diagram.
            </summary>
        </member>
        <member name="T:SharpPi.GPIO.GPIO.Pin.Rev2">
            <summary>
            Raspberry Pi Rev.2 Models
            </summary>
        </member>
        <member name="T:SharpPi.GPIO.GPIO.Pin.Rev2.Plus">
            <summary>
            Raspberry Pi A+/B+ Models
            </summary>
        </member>
        <member name="F:SharpPi.GPIO.GPIO.PinNumber">
            <summary>
            The currently assigned GPIO pin.
            </summary>
        </member>
        <member name="P:SharpPi.GPIO.GPIO.PinDirection">
            <summary>
            Direction of the GPIO pin. (input/output)
            </summary>
        </member>
        <member name="P:SharpPi.GPIO.GPIO.State">
            <summary>
            The value of the GPIO pin. (on/off)
            </summary>
        </member>
        <member name="P:SharpPi.GPIO.GPIO.Pull">
            <summary>
            Internal pull up-down resistor for this pin.
            </summary>
        </member>
        <member name="P:SharpPi.GPIO.GPIO.PinMask">
            <summary>
            Gets the bit mask of this pin.
            </summary>
        </member>
        <member name="M:SharpPi.GPIO.GPIO.#ctor(System.UInt32,SharpPi.GPIO.GPIO.Direction,SharpPi.GPIO.GPIO.PinState)">
            <summary>
            Access to the specified GPIO setup with the specified direction with the specified initial value
            </summary>
            <param name="pin">The GPIO pin number. See the <see cref="T:SharpPi.GPIO.GPIO.Pin"/> class for various pin number constants.</param>
            <param name="direction">The direction of the pin.</param>
            <param name="initialValue">Value of the pin once it is initialized.</param>
        </member>
        <member name="M:SharpPi.GPIO.GPIO.Dispose">
            <summary>
            Dispose of this GPIO pin instance.
            </summary>
        </member>
        <member name="M:SharpPi.GPIO.GPIO.SetMulti(SharpPi.GPIO.GPIO.Pin.Mask)">
            <summary>
            Sets any of the first 32 GPIO output pins specified in the mask to HIGH.
            </summary>
            <param name="mask">Mask of pins to affect. Use eg: (GPIOPinMask.GPIO_00) | GPIOPinMask.GPIO_01)</param>
        </member>
        <member name="M:SharpPi.GPIO.GPIO.ClearMulti(SharpPi.GPIO.GPIO.Pin.Mask)">
            <summary>
            Sets any of the first 32 GPIO output pins specified in the mask to LOW.
            </summary>
            <param name="mask">Mask of pins to affect. Use eg: (GPIOPinMask.GPIO_00) | GPIOPinMask.GPIO_01)</param>
        </member>
        <member name="M:SharpPi.GPIO.GPIO.WriteMulti(SharpPi.GPIO.GPIO.Pin.Mask,SharpPi.GPIO.GPIO.PinState)">
            <summary>
            Sets any of the first 32 GPIO output pins specified in the mask to value.
            </summary>
            <param name="mask">Mask of pins to affect. Use eg: (GPIOPinMask.GPIO_00) | GPIOPinMask.GPIO_01)</param>
        </member>
        <member name="T:SharpPi.GPIO.SPI">
            <summary>
            Class for using SPI on the Raspberry Pi.
            </summary>
        </member>
        <member name="T:SharpPi.Imaging.Camera">
            <summary>
            Record camera output to a <see cref="T:System.IO.Stream"/> of the given type.
            </summary>
            <typeparam name="T">The stream type</typeparam>
        </member>
        <member name="E:SharpPi.Imaging.Camera.OnFrameCaptured">
            <summary>
            Called when the a new frame has been captured and encoded.
            </summary>
        </member>
        <member name="M:SharpPi.Imaging.Camera.Start">
            <summary>
            Start recording on the camera.
            </summary>
        </member>
        <member name="M:SharpPi.Imaging.Camera.Stop">
            <summary>
            Stop recording on the camera.
            </summary>
        </member>
        <member name="T:SharpPi.ModelType">
            <summary>
            The different types of Raspberry Pi board models.
            </summary>
        </member>
        <member name="T:SharpPi.ProcessorType">
            <summary>
            The chipset for the processor of this board.
            </summary>
        </member>
        <member name="T:SharpPi.DisplayID">
            <summary>
            Default display IDs.
            Note: if you overwrite with your own dispmanx_platform_init function, you should use IDs you provided during dispmanx_display_attach.
            </summary>
        </member>
        <member name="T:SharpPi.Device.CPU">
            <summary>
            Provides real-time data about the CPU on the Raspberry Pi.
            </summary>
        </member>
        <member name="P:SharpPi.Device.CPU.Temperature">
            <summary>
            The temperature of the CPU (in degrees centigrade)
            </summary>
        </member>
        <member name="P:SharpPi.Device.CPU.Frequency">
            <summary>
            The current frequency of the CPU (in Hz)
            </summary>
        </member>
        <member name="P:SharpPi.Device.Model">
            <summary>
            The model of the Raspberry Pi board.
            </summary>
        </member>
        <member name="P:SharpPi.Device.IsPi4">
            <summary>
            Determines whether this board is the Raspberry Pi 4. 
            </summary>
        </member>
        <member name="P:SharpPi.Device.KMS">
            <summary>
            The Kernal Mode Setting for the board.
            </summary>
        </member>
        <member name="P:SharpPi.Device.Chipset">
            <summary>
            The chipset of the processor.
            </summary>
        </member>
        <member name="M:SharpPi.Device.GetNetworkList(System.String)">
            <summary>
            iwlist
            </summary>
            <param name="_interface">The interface to scan for networks on.</param>
            <returns>A string that contains information about the wireless networks in area.</returns>
        </member>
        <member name="M:SharpPi.Device.GetInterfaceStatus(System.String)">
            <summary>
            ifconfig
            </summary>
            <param name="_interface">The interface to query</param>
            <returns>A string that contains information about the interface.</returns>
        </member>
        <member name="M:SharpPi.Device.GetWifiStatus(System.String)">
            <summary>
            iwconfig
            </summary>
            <param name="_interface">The interface to query</param>
            <returns>A string that contains information about the status of the interface.</returns>
        </member>
        <member name="M:SharpPi.Device.GetInterfaceIPv4(System.String)">
            <summary>
            Parses the inet address from ifconfig.
            </summary>
            <param name="_interface">The interface to query the inet address from.</param>
            <returns><see cref="T:System.Net.IPAddress"/> if successful, otherwise <see cref="F:System.Net.IPAddress.None"/>.</returns>
        </member>
        <member name="M:SharpPi.Device.SetHostname(System.String)">
            <summary>
            Set the hostname for this device.
            </summary>
            <param name="name">The hostname</param>
        </member>
        <member name="T:SharpPi.Native.NativeMethods">
            <summary>
            Generic native methods
            https://docs.microsoft.com/en-us/dotnet/framework/interop/marshaling-classes-structures-and-unions
            https://limbioliong.wordpress.com/2011/06/03/passing-structures-between-managed-and-unmanaged-code/
            https://www.codeproject.com/Articles/66244/Marshaling-with-C-Chapter-2-Marshaling-Simple-Type
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Library.GPIO">
            <summary>
            Default: libbcm2835.so
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Library.EGL">
            <summary>
            Default: /opt/vc/lib/libbrcmEGL.so
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Library.VideoCore">
            <summary>
            Default: /opt/vc/lib/libbcm_host.so
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Library.DynamicLink">
            <summary>
            Default: libdl
            </summary>
        </member>
        <member name="T:SharpPi.Native.NativeMethods.Egl">
            <summary>
            EGL_VERSION_1_4
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.DEFAULT_DISPLAY">
            <summary>
            [EGL] Value of EGL_DEFAULT_DISPLAY symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MULTISAMPLE_RESOLVE_BOX_BIT">
            <summary>
            [EGL] Value of EGL_MULTISAMPLE_RESOLVE_BOX_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MULTISAMPLE_RESOLVE">
            <summary>
            <para>
            [EGL] Egl.QuerySurface: Returns the filter used when resolving the multisample buffer. The filter may be either 
            Egl.MULTISAMPLE_RESOLVE_DEFAULT or Egl.MULTISAMPLE_RESOLVE_BOX, as described for Egl.SurfaceAttrib.
            </para>
            <para>
            [EGL] Egl.SurfaceAttrib: Specifies the filter to use when resolving the multisample buffer (this may occur when swapping 
            or copying the surface, or when changing the client API context bound to the surface). A value of 
            Egl.MULTISAMPLE_RESOLVE_DEFAULT chooses the default implementation-defined filtering method, while 
            Egl.MULTISAMPLE_RESOLVE_BOX chooses a one-pixel wide box filter placing equal weighting on all multisample values. The 
            initial value of Egl.MULTISAMPLE_RESOLVE is Egl.MULTISAMPLE_RESOLVE_DEFAULT.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MULTISAMPLE_RESOLVE_DEFAULT">
            <summary>
            [EGL] Value of EGL_MULTISAMPLE_RESOLVE_DEFAULT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MULTISAMPLE_RESOLVE_BOX">
            <summary>
            [EGL] Value of EGL_MULTISAMPLE_RESOLVE_BOX symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.OPENGL_API">
            <summary>
            [EGL] Value of EGL_OPENGL_API symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.OPENGL_BIT">
            <summary>
            [EGL] Value of EGL_OPENGL_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.SWAP_BEHAVIOR_PRESERVED_BIT">
            <summary>
            [EGL] Value of EGL_SWAP_BEHAVIOR_PRESERVED_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.CONFORMANT">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a bitmask indicating which types of client API contexts created with respect 
            to the frame buffer configuration config must pass the required conformance tests for that API. Mask bits include: 
            Egl.OPENGL_BIT Config supports creating OpenGL contexts. Egl.OPENGL_ES_BIT Config supports creating OpenGL ES 1.0 and/or 
            1.1 contexts. Egl.OPENGL_ES2_BIT Config supports creating OpenGL ES 2.0 contexts. Egl.OPENVG_BIT Config supports 
            creating OpenVG contexts. For example, if the bitmask is set to Egl.OPENGL_ES_BIT, only frame buffer configurations that 
            support creating conformant OpenGL ES contexts will match. The default value is zero. Most EGLConfigs should be 
            conformant for all supported client APIs, and it is rarely desirable to select a nonconformant config. Conformance 
            requirements limit the number of non-conformant configs that an implementation can define.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns a bitmask indicating which client API contexts created with respect to this config 
            are conformant.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.CONTEXT_CLIENT_VERSION">
            <summary>
            <para>
            [EGL] Egl.CreateContext: Must be followed by an integer that determines which version of an OpenGL ES context to create. 
            A value of 1 specifies creation of an OpenGL ES 1.x context. An attribute value of 2 specifies creation of an OpenGL ES 
            2.x context. The default value is 1. This attribute can only be specified when creating a OpenGL ES context (e.g. when 
            the current rendering API is Egl.OPENGL_ES_API).
            </para>
            <para>
            [EGL] Egl.QueryContext: Returns the version of the client API which the context supports, as specified at context 
            creation time. The resulting value is only meaningful for an OpenGL ES context.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MATCH_NATIVE_PIXMAP">
            <summary>
            [EGL] Egl.ChooseConfig: Must be followed by the handle of a valid native pixmap, cast to EGLint, or Egl.NONE. If the 
            value is not Egl.NONE, only configs which support creating pixmap surfaces with this pixmap using 
            Egl.CreatePixmapSurface will match this attribute. If the value is Egl.NONE, then configs are not matched for this 
            attribute. The default value is Egl.NONE. Egl.MATCH_NATIVE_PIXMAP was introduced due to the difficulty of determining an 
            EGLConfig compatibile with a native pixmap using only color component sizes.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.OPENGL_ES2_BIT">
            <summary>
            [EGL] Value of EGL_OPENGL_ES2_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.VG_ALPHA_FORMAT">
            <summary>
            <para>
            [EGL] Egl.CreatePbufferSurface: Specifies how alpha values are interpreted by OpenVG when rendering to the surface. If 
            its value is Egl.VG_ALPHA_FORMAT_NONPRE, then alpha values are not premultipled. If its value is 
            Egl.VG_ALPHA_FORMAT_PRE, then alpha values are premultiplied. The default value of Egl.VG_ALPHA_FORMAT is 
            Egl.VG_ALPHA_FORMAT_NONPRE.
            </para>
            <para>
            [EGL] Egl.CreatePixmapSurface: Specifies how alpha values are interpreted by OpenVG when rendering to the surface. If 
            its value is Egl.VG_ALPHA_FORMAT_NONPRE, then alpha values are not premultipled. If its value is 
            Egl.VG_ALPHA_FORMAT_PRE, then alpha values are premultiplied. The default value of Egl.VG_ALPHA_FORMAT is 
            Egl.VG_ALPHA_FORMAT_NONPRE.
            </para>
            <para>
            [EGL] Egl.CreateWindowSurface: Specifies how alpha values are interpreted by OpenVG when rendering to the surface. If 
            its value is Egl.VG_ALPHA_FORMAT_NONPRE, then alpha values are not premultipled. If its value is 
            Egl.VG_ALPHA_FORMAT_PRE, then alpha values are premultiplied. The default value of Egl.VG_ALPHA_FORMAT is 
            Egl.VG_ALPHA_FORMAT_NONPRE.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.VG_ALPHA_FORMAT_NONPRE">
            <summary>
            [EGL] Value of EGL_VG_ALPHA_FORMAT_NONPRE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.VG_ALPHA_FORMAT_PRE">
            <summary>
            [EGL] Value of EGL_VG_ALPHA_FORMAT_PRE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.VG_ALPHA_FORMAT_PRE_BIT">
            <summary>
            [EGL] Value of EGL_VG_ALPHA_FORMAT_PRE_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.VG_COLORSPACE">
            <summary>
            <para>
            [EGL] Egl.CreatePbufferSurface: Specifies the color space used by OpenVG when rendering to the surface. If its value is 
            Egl.VG_COLORSPACE_sRGB, then a non-linear, perceptually uniform color space is assumed, with a corresponding 
            VGImageFormat of form Egl.*. If its value is Egl.VG_COLORSPACE_LINEAR, then a linear color space is assumed, with a 
            corresponding VGImageFormat of form Egl.*. The default value of Egl.VG_COLORSPACE is Egl.VG_COLORSPACE_sRGB.
            </para>
            <para>
            [EGL] Egl.CreatePixmapSurface: Specifies the color space used by OpenVG when rendering to the surface. If its value is 
            Egl.VG_COLORSPACE_sRGB, then a non-linear, perceptually uniform color space is assumed, with a corresponding 
            VGImageFormat of form Egl.*. If its value is Egl.VG_COLORSPACE_LINEAR, then a linear color space is assumed, with a 
            corresponding VGImageFormat of form Egl.*. The default value of Egl.VG_COLORSPACE is Egl.VG_COLORSPACE_sRGB.
            </para>
            <para>
            [EGL] Egl.CreateWindowSurface: Specifies the color space used by OpenVG when rendering to the surface. If its value is 
            Egl.VG_COLORSPACE_sRGB, then a non-linear, perceptually uniform color space is assumed, with a corresponding 
            VGImageFormat of form Egl.*. If its value is Egl.VG_COLORSPACE_LINEAR, then a linear color space is assumed, with a 
            corresponding VGImageFormat of form Egl.*. The default value of Egl.VG_COLORSPACE is Egl.VG_COLORSPACE_sRGB.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.VG_COLORSPACE_LINEAR_BIT">
            <summary>
            [EGL] Value of EGL_VG_COLORSPACE_LINEAR_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.ALPHA_MASK_SIZE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a nonnegative integer that indicates the desired alpha mask buffer size, in 
            bits. The smallest alpha mask buffers of at least the specified size are preferred. The default value is zero. The alpha 
            mask buffer is used only by OpenGL and OpenGL ES client APIs.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of bits in the alpha mask buffer.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BUFFER_PRESERVED">
            <summary>
            [EGL] Value of EGL_BUFFER_PRESERVED symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BUFFER_DESTROYED">
            <summary>
            [EGL] Value of EGL_BUFFER_DESTROYED symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.CLIENT_APIS">
            <summary>
            [EGL] Egl.QueryString: Returns a string describing which client rendering APIs are supported. The string contains a 
            space-separate list of API names. The list must include at least one of OpenGL, OpenGL_ES, or OpenVG. These strings 
            correspond respectively to values Egl.OPENGL_API, Egl.OPENGL_ES_API, and Egl.OPENVG_API of the Egl.BindAPI, api 
            argument.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.COLORSPACE_sRGB">
            <summary>
            [EGL] Value of EGL_COLORSPACE_sRGB symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.COLORSPACE_LINEAR">
            <summary>
            [EGL] Value of EGL_COLORSPACE_LINEAR symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.COLOR_BUFFER_TYPE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by one of Egl.RGB_BUFFER or Egl.LUMINANCE_BUFFER. Egl.RGB_BUFFER indicates an 
            RGB color buffer; in this case, attributes Egl.RED_SIZE, Egl.GREEN_SIZE and Egl.BLUE_SIZE must be non-zero, and 
            Egl.LUMINANCE_SIZE must be zero. Egl.LUMINANCE_BUFFER indicates a luminance color buffer. In this case Egl.RED_SIZE, 
            Egl.GREEN_SIZE, Egl.BLUE_SIZE must be zero, and Egl.LUMINANCE_SIZE must be non-zero. For both RGB and luminance color 
            buffers, Egl.ALPHA_SIZE may be zero or non-zero.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the color buffer type. Possible types are Egl.RGB_BUFFER and Egl.LUMINANCE_BUFFER.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.CONTEXT_CLIENT_TYPE">
            <summary>
            [EGL] Egl.QueryContext: Returns the type of client API which the context supports (one of Egl.OPENGL_API, 
            Egl.OPENGL_ES_API, or Egl.OPENVG_API).
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.DISPLAY_SCALING">
            <summary>
            [EGL] Value of EGL_DISPLAY_SCALING symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.HORIZONTAL_RESOLUTION">
            <summary>
            [EGL] Egl.QuerySurface: Returns the horizontal dot pitch of the display on which a window surface is visible. The value 
            returned is equal to the actual dot pitch, in pixels/meter, multiplied by the constant value Egl.DISPLAY_SCALING.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.LUMINANCE_BUFFER">
            <summary>
            [EGL] Value of EGL_LUMINANCE_BUFFER symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.LUMINANCE_SIZE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a nonnegative integer that indicates the desired size of the luminance 
            component of the color buffer, in bits. If this value is zero, color buffers with the smallest luminance component size 
            are preferred. Otherwise, color buffers with the largest luminance component of at least the specified size are 
            preferred. The default value is zero.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of bits of luminance stored in the luminance buffer.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.OPENGL_ES_BIT">
            <summary>
            [EGL] Value of EGL_OPENGL_ES_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.OPENVG_BIT">
            <summary>
            [EGL] Value of EGL_OPENVG_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.OPENGL_ES_API">
            <summary>
            [EGL] Value of EGL_OPENGL_ES_API symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.OPENVG_API">
            <summary>
            [EGL] Value of EGL_OPENVG_API symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.OPENVG_IMAGE">
            <summary>
            [EGL] Value of EGL_OPENVG_IMAGE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.PIXEL_ASPECT_RATIO">
            <summary>
            [EGL] Egl.QuerySurface: Returns the aspect ratio of an individual pixel (the ratio of a pixel's width to its height). 
            The value returned is equal to the actual aspect ratio multiplied by the constant value Egl.DISPLAY_SCALING.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.RENDERABLE_TYPE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a bitmask indicating which types of client API contexts the frame buffer 
            configuration must support creating with Egl.CreateContext). Mask bits are the same as for attribute Egl.CONFORMANT. The 
            default value is Egl.OPENGL_ES_BIT.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns a bitmask indicating the types of supported client API contexts.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.RENDER_BUFFER">
            <summary>
            <para>
            [EGL] Egl.CreateWindowSurface: Specifies which buffer should be used for client API rendering to the window. If its 
            value is Egl.SINGLE_BUFFER, then client APIs should render directly into the visible window. If its value is 
            Egl.BACK_BUFFER, then client APIs should render into the back buffer. The default value of Egl.RENDER_BUFFER is 
            Egl.BACK_BUFFER. Client APIs may not be able to respect the requested rendering buffer. To determine the actual buffer 
            being rendered to by a context, call Egl.QueryContext.
            </para>
            <para>
            [EGL] Egl.QueryContext: Returns the buffer which client API rendering via the context will use. The value returned 
            depends on properties of both the context, and the surface to which the context is bound: If the context is bound to a 
            pixmap surface, then Egl.SINGLE_BUFFER will be returned. If the context is bound to a pbuffer surface, then 
            Egl.BACK_BUFFER will be returned. If the context is bound to a window surface, then either Egl.BACK_BUFFER or 
            Egl.SINGLE_BUFFER may be returned. The value returned depends on both the buffer requested by the setting of the 
            Egl.RENDER_BUFFER property of the surface (which may be queried by calling eglQuerySurface), and on the client API (not 
            all client APIs support single-buffer rendering to window surfaces). If the context is not bound to a surface, such as 
            an OpenGL ES context bound to a framebuffer object, then Egl.NONE will be returned.
            </para>
            <para>
            [EGL] Egl.QuerySurface: Returns the buffer which client API rendering is requested to use. For a window surface, this is 
            the same attribute value specified when the surface was created. For a pbuffer surface, it is always Egl.BACK_BUFFER. 
            For a pixmap surface, it is always Egl.SINGLE_BUFFER. To determine the actual buffer being rendered to by a context, 
            call Egl.QueryContext.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.RGB_BUFFER">
            <summary>
            [EGL] Value of EGL_RGB_BUFFER symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.SINGLE_BUFFER">
            <summary>
            [EGL] Value of EGL_SINGLE_BUFFER symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.SWAP_BEHAVIOR">
            <summary>
            <para>
            [EGL] Egl.QuerySurface: Returns the effect on the color buffer when posting a surface with Egl.SwapBuffers. Swap 
            behavior may be either Egl.BUFFER_PRESERVED or Egl.BUFFER_DESTROYED, as described for Egl.SurfaceAttrib.
            </para>
            <para>
            [EGL] Egl.SurfaceAttrib: Specifies the effect on the color buffer of posting a surface with Egl.SwapBuffers. A value of 
            Egl.BUFFER_PRESERVED indicates that color buffer contents are unaffected, while Egl.BUFFER_DESTROYED indicates that 
            color buffer contents may be destroyed or changed by the operation. The initial value of Egl.SWAP_BEHAVIOR is chosen by 
            the implementation.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.UNKNOWN">
            <summary>
            [EGL] Value of EGL_UNKNOWN symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.VERTICAL_RESOLUTION">
            <summary>
            [EGL] Egl.QuerySurface: Returns the vertical dot pitch of the display on which a window surface is visible. The value 
            returned is equal to the actual dot pitch, in pixels/meter, multiplied by the constant value Egl.DISPLAY_SCALING.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BACK_BUFFER">
            <summary>
            [EGL] Value of EGL_BACK_BUFFER symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BIND_TO_TEXTURE_RGB">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by Egl.DONT_CARE, Egl.TRUE, or Egl.FALSE. If Egl.TRUE is specified, then only 
            frame buffer configurations that support binding of color buffers to an OpenGL ES RGB texture will be considered. 
            Currently only frame buffer configurations that support pbuffers allow this. The default value is Egl.DONT_CARE.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns Egl.TRUE if color buffers can be bound to an RGB texture, Egl.FALSE otherwise.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BIND_TO_TEXTURE_RGBA">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by one of Egl.DONT_CARE, Egl.TRUE, or Egl.FALSE. If Egl.TRUE is specified, then 
            only frame buffer configurations that support binding of color buffers to an OpenGL ES RGBA texture will be considered. 
            Currently only frame buffer configurations that support pbuffers allow this. The default value is Egl.DONT_CARE.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns Egl.TRUE if color buffers can be bound to an RGBA texture, Egl.FALSE otherwise.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.CONTEXT_LOST">
            <summary>
            [EGL] Egl.GetError: A power management event has occurred. The application must destroy all contexts and reinitialise 
            OpenGL ES state and objects to continue rendering.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MIN_SWAP_INTERVAL">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a integer that indicates the minimum value that can be passed to 
            eglSwapInterval. The default value is Egl.DONT_CARE.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the minimum value that can be passed to eglSwapInterval.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MAX_SWAP_INTERVAL">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a integer that indicates the maximum value that can be passed to 
            Egl.SwapInterval. The default value is Egl.DONT_CARE.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the maximum value that can be passed to eglSwapInterval.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MIPMAP_TEXTURE">
            <summary>
            <para>
            [EGL] Egl.CreatePbufferFromClientBuffer: Specifies whether storage for mipmaps should be allocated. Space for mipmaps 
            will be set aside if the attribute value is Egl.TRUE and Egl.TEXTURE_FORMAT is not Egl.NO_TEXTURE. The default value is 
            Egl.FALSE.
            </para>
            <para>
            [EGL] Egl.CreatePbufferSurface: Specifies whether storage for mipmaps should be allocated. Space for mipmaps will be set 
            aside if the attribute value is Egl.TRUE and Egl.TEXTURE_FORMAT is not Egl.NO_TEXTURE. The default value is Egl.FALSE.
            </para>
            <para>
            [EGL] Egl.QuerySurface: Returns Egl.TRUE if texture has mipmaps, Egl.FALSE otherwise.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MIPMAP_LEVEL">
            <summary>
            <para>
            [EGL] Egl.QuerySurface: Returns which level of the mipmap to render to, if texture has mipmaps.
            </para>
            <para>
            [EGL] Egl.SurfaceAttrib: For mipmap textures, the Egl.MIPMAP_LEVEL attribute indicates which level of the mipmap should 
            be rendered. If the value of this attribute is outside the range of supported mipmap levels, the closest valid mipmap 
            level is selected for rendering. The default value is Egl..
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NO_TEXTURE">
            <summary>
            [EGL] Value of EGL_NO_TEXTURE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TEXTURE_2D">
            <summary>
            [EGL] Value of EGL_TEXTURE_2D symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TEXTURE_FORMAT">
            <summary>
            <para>
            [EGL] Egl.CreatePbufferFromClientBuffer: Specifies the format of the texture that will be created when a pbuffer is 
            bound to a texture map. Possible values are Egl.NO_TEXTURE, Egl.TEXTURE_RGB, and Egl.TEXTURE_RGBA. The default value is 
            Egl.NO_TEXTURE.
            </para>
            <para>
            [EGL] Egl.CreatePbufferSurface: Specifies the format of the texture that will be created when a pbuffer is bound to a 
            texture map. Possible values are Egl.NO_TEXTURE, Egl.TEXTURE_RGB, and Egl.TEXTURE_RGBA. The default value is 
            Egl.NO_TEXTURE.
            </para>
            <para>
            [EGL] Egl.QuerySurface: Returns format of texture. Possible values are Egl.NO_TEXTURE, Egl.TEXTURE_RGB, and 
            Egl.TEXTURE_RGBA.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TEXTURE_RGB">
            <summary>
            [EGL] Value of EGL_TEXTURE_RGB symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TEXTURE_RGBA">
            <summary>
            [EGL] Value of EGL_TEXTURE_RGBA symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TEXTURE_TARGET">
            <summary>
            <para>
            [EGL] Egl.CreatePbufferFromClientBuffer: Specifies the target for the texture that will be created when the pbuffer is 
            created with a texture format of Egl.TEXTURE_RGB or Egl.TEXTURE_RGBA. Possible values are Egl.NO_TEXTURE, or 
            Egl.TEXTURE_2D. The default value is Egl.NO_TEXTURE.
            </para>
            <para>
            [EGL] Egl.CreatePbufferSurface: Specifies the target for the texture that will be created when the pbuffer is created 
            with a texture format of Egl.TEXTURE_RGB or Egl.TEXTURE_RGBA. Possible values are Egl.NO_TEXTURE, or Egl.TEXTURE_2D. The 
            default value is Egl.NO_TEXTURE.
            </para>
            <para>
            [EGL] Egl.QuerySurface: Returns type of texture. Possible values are Egl.NO_TEXTURE, or Egl.TEXTURE_2D.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.ALPHA_SIZE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a nonnegative integer that indicates the desired size of the alpha component 
            of the color buffer, in bits. If this value is zero, color buffers with the smallest alpha component size are preferred. 
            Otherwise, color buffers with the largest alpha component of at least the specified size are preferred. The default 
            value is zero.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of bits of alpha stored in the color buffer.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_ACCESS">
            <summary>
            [EGL] Egl.GetError: EGL cannot access a requested resource (for example a context is bound in another thread).
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_ALLOC">
            <summary>
            [EGL] Egl.GetError: EGL failed to allocate resources for the requested operation.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_ATTRIBUTE">
            <summary>
            [EGL] Egl.GetError: An unrecognized attribute or attribute value was passed in the attribute list.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_CONFIG">
            <summary>
            [EGL] Egl.GetError: An EGLConfig argument does not name a valid EGL frame buffer configuration.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_CONTEXT">
            <summary>
            [EGL] Egl.GetError: An EGLContext argument does not name a valid EGL rendering context.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_CURRENT_SURFACE">
            <summary>
            [EGL] Egl.GetError: The current surface of the calling thread is a window, pixel buffer or pixmap that is no longer 
            valid.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_DISPLAY">
            <summary>
            [EGL] Egl.GetError: An EGLDisplay argument does not name a valid EGL display connection.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_MATCH">
            <summary>
            [EGL] Egl.GetError: Arguments are inconsistent (for example, a valid context requires buffers not supplied by a valid 
            surface).
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_NATIVE_PIXMAP">
            <summary>
            [EGL] Egl.GetError: A NativePixmapType argument does not refer to a valid native pixmap.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_NATIVE_WINDOW">
            <summary>
            [EGL] Egl.GetError: A NativeWindowType argument does not refer to a valid native window.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_PARAMETER">
            <summary>
            [EGL] Egl.GetError: One or more argument values are invalid.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BAD_SURFACE">
            <summary>
            [EGL] Egl.GetError: An EGLSurface argument does not name a valid surface (window, pixel buffer or pixmap) configured for 
            GL rendering.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BLUE_SIZE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a nonnegative integer that indicates the desired size of the blue component 
            of the color buffer, in bits. If this value is zero, color buffers with the smallest blue component size are preferred. 
            Otherwise, color buffers with the largest blue component of at least the specified size are preferred. The default value 
            is zero.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of bits of blue stored in the color buffer.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.BUFFER_SIZE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a nonnegative integer that indicates the desired color buffer size, in bits. 
            The smallest color buffers of at least the specified size are preferred. The default value is zero. The color buffer 
            size is the sum of Egl.RED_SIZE, Egl.GREEN_SIZE, Egl.BLUE_SIZE, and Egl.ALPHA_SIZE, and does not include any padding 
            bits which may be present in the pixel format. It is usually preferable to specify desired sizes for these color 
            components individually.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the depth of the color buffer. It is the sum of Egl.RED_SIZE, Egl.GREEN_SIZE, 
            Egl.BLUE_SIZE, and Egl.ALPHA_SIZE.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.CONFIG_CAVEAT">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by Egl.DONT_CARE, Egl.NONE, Egl.SLOW_CONFIG, or Egl.NON_CONFORMANT_CONFIG. If 
            Egl.DONT_CARE is specified, then configs are not matched for this attribute. The default value is Egl.DONT_CARE. If 
            Egl.NONE is specified, then configs are matched for this attribute, but only configs with no caveats (neither 
            Egl.SLOW_CONFIG or Egl.NON_CONFORMANT_CONFIG) will be considered. If Egl.SLOW_CONFIG is specified, then only slow 
            configs configurations will be considered. The meaning of``slow'' is implementation-dependent, but typically indicates a 
            non-hardware-accelerated (software) implementation. If Egl.NON_CONFORMANT_CONFIG is specified, then only configs 
            supporting non-conformant OpenGL ES contexts will be considered. If the EGL version is 1.3 or later, caveat 
            Egl.NON_CONFORMANT_CONFIG is obsolete, since the same information can be specified via the Egl.CONFORMANT attribute on a 
            per-client-API basis, not just for OpenGL ES.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the caveats for the frame buffer configuration. Possible caveat values are Egl.NONE, 
            Egl.SLOW_CONFIG, and Egl.NON_CONFORMANT.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.CONFIG_ID">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a valid integer ID that indicates the desired EGL frame buffer 
            configuration. When a Egl.CONFIG_ID is specified, all other attributes are ignored. The default value is Egl.DONT_CARE. 
            The meaning of config IDs is implementation-dependent. They are used only to uniquely identify different frame buffer 
            configurations.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the ID of the frame buffer configuration.
            </para>
            <para>
            [EGL] Egl.QueryContext: Returns the ID of the EGL frame buffer configuration with respect to which the context was 
            created.
            </para>
            <para>
            [EGL] Egl.QuerySurface: Returns the ID of the EGL frame buffer configuration with respect to which the surface was 
            created.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.CORE_NATIVE_ENGINE">
            <summary>
            [EGL] Value of EGL_CORE_NATIVE_ENGINE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.DEPTH_SIZE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a nonnegative integer that indicates the desired depth buffer size, in bits. 
            The smallest depth buffers of at least the specified size is preferred. If the desired size is zero, frame buffer 
            configurations with no depth buffer are preferred. The default value is zero. The depth buffer is used only by OpenGL 
            and OpenGL ES client APIs.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of bits in the depth buffer.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.DONT_CARE">
            <summary>
            [EGL] Value of EGL_DONT_CARE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.DRAW">
            <summary>
            [EGL] Value of EGL_DRAW symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.EXTENSIONS">
            <summary>
            [EGL] Egl.QueryString: Returns a space separated list of supported extensions to EGL.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.FALSE">
            <summary>
            [EGL] Value of EGL_FALSE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.GREEN_SIZE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a nonnegative integer that indicates the desired size of the green component 
            of the color buffer, in bits. If this value is zero, color buffers with the smallest green component size are preferred. 
            Otherwise, color buffers with the largest green component of at least the specified size are preferred. The default 
            value is zero.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of bits of green stored in the color buffer.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.HEIGHT">
            <summary>
            <para>
            [EGL] Egl.CreatePbufferSurface: Specifies the required height of the pixel buffer surface. The default value is Egl..
            </para>
            <para>
            [EGL] Egl.QuerySurface: Returns the height of the surface in pixels.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.LARGEST_PBUFFER">
            <summary>
            <para>
            [EGL] Egl.CreatePbufferSurface: Requests the largest available pixel buffer surface when the allocation would otherwise 
            fail. Use Egl.QuerySurface to retrieve the dimensions of the allocated pixel buffer. The default value is Egl.FALSE.
            </para>
            <para>
            [EGL] Egl.QuerySurface: Returns the same attribute value specified when the surface was created with 
            Egl.CreatePbufferSurface. For a window or pixmap surface, value is not modified.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.LEVEL">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by an integer buffer level specification. This specification is honored 
            exactly. Buffer level zero corresponds to the default frame buffer of the display. Buffer level one is the first overlay 
            frame buffer, level two the second overlay frame buffer, and so on. Negative buffer levels correspond to underlay frame 
            buffers. The default value is zero. Most imlementations do not support overlay or underlay planes (buffer levels other 
            than zero).
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the frame buffer level. Level zero is the default frame buffer. Positive levels 
            correspond to frame buffers that overlay the default buffer and negative levels correspond to frame buffers that 
            underlay the default buffer.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MAX_PBUFFER_HEIGHT">
            <summary>
            [EGL] Egl.GetConfigAttrib: Returns the maximum height of a pixel buffer surface in pixels.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MAX_PBUFFER_PIXELS">
            <summary>
            [EGL] Egl.GetConfigAttrib: Returns the maximum size of a pixel buffer surface in pixels.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.MAX_PBUFFER_WIDTH">
            <summary>
            [EGL] Egl.GetConfigAttrib: Returns the maximum width of a pixel buffer surface in pixels.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NATIVE_RENDERABLE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by Egl.DONT_CARE, Egl.TRUE, or Egl.FALSE. If Egl.TRUE is specified, then only 
            frame buffer configurations that allow native rendering into the surface will be considered. The default value is 
            Egl.DONT_CARE.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns Egl.TRUE if native rendering APIs can render into the surface, Egl.FALSE otherwise.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NATIVE_VISUAL_ID">
            <summary>
            [EGL] Egl.GetConfigAttrib: Returns the ID of the associated native visual.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NATIVE_VISUAL_TYPE">
            <summary>
            [EGL] Egl.GetConfigAttrib: Returns the type of the associated native visual.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NONE">
            <summary>
            [EGL] Value of EGL_NONE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NON_CONFORMANT_CONFIG">
            <summary>
            [EGL] Value of EGL_NON_CONFORMANT_CONFIG symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NOT_INITIALIZED">
            <summary>
            [EGL] Egl.GetError: EGL is not initialized, or could not be initialized, for the specified EGL display connection.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NO_CONTEXT">
            <summary>
            [EGL] Value of EGL_NO_CONTEXT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NO_DISPLAY">
            <summary>
            [EGL] Value of EGL_NO_DISPLAY symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.NO_SURFACE">
            <summary>
            [EGL] Value of EGL_NO_SURFACE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.PBUFFER_BIT">
            <summary>
            [EGL] Value of EGL_PBUFFER_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.PIXMAP_BIT">
            <summary>
            [EGL] Value of EGL_PIXMAP_BIT symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.READ">
            <summary>
            [EGL] Value of EGL_READ symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.RED_SIZE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a nonnegative integer that indicates the desired size of the red component 
            of the color buffer, in bits. If this value is zero, color buffers with the smallest red component size are preferred. 
            Otherwise, color buffers with the largest red component of at least the specified size are preferred. The default value 
            is zero.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of bits of red stored in the color buffer.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.SAMPLES">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by the minimum number of samples required in multisample buffers. 
            Configurations with the smallest number of samples that meet or exceed the specified minimum number are preferred. Note 
            that it is possible for color samples in the multisample buffer to have fewer bits than colors in the main color 
            buffers. However, multisampled colors maintain at least as much color resolution in aggregate as the main color buffers.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of samples per pixel.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.SAMPLE_BUFFERS">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by the minimum acceptable number of multisample buffers. Configurations with 
            the smallest number of multisample buffers that meet or exceed this minimum number are preferred. Currently operation 
            with more than one multisample buffer is undefined, so only values of zero or one will produce a match. The default 
            value is zero.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of multisample buffers.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.SLOW_CONFIG">
            <summary>
            [EGL] Value of EGL_SLOW_CONFIG symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.STENCIL_SIZE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a nonnegative integer that indicates the desired stencil buffer size, in 
            bits. The smallest stencil buffers of at least the specified size are preferred. If the desired size is zero, frame 
            buffer configurations with no stencil buffer are preferred. The default value is zero. The stencil buffer is used only 
            by OpenGL and OpenGL ES client APIs.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the number of bits in the stencil buffer.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.SUCCESS">
            <summary>
            [EGL] Egl.GetError: The last function succeeded without error.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.SURFACE_TYPE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by a bitmask indicating which EGL surface types and capabilities the frame 
            buffer configuration must support. Mask bits include: Egl.MULTISAMPLE_RESOLVE_BOX_BIT Config allows specifying box 
            filtered multisample resolve behavior with Egl.SurfaceAttrib. Egl.PBUFFER_BIT Config supports creating pixel buffer 
            surfaces. Egl.PIXMAP_BIT Config supports creating pixmap surfaces. Egl.SWAP_BEHAVIOR_PRESERVED_BIT Config allows setting 
            swap behavior for color buffers with Egl.SurfaceAttrib. Egl.VG_ALPHA_FORMAT_PRE_BIT Config allows specifying OpenVG 
            rendering with premultiplied alpha values at surface creation time (see Egl.CreatePbufferSurface, 
            Egl.CreatePixmapSurface, and Egl.CreateWindowSurface). Egl.VG_COLORSPACE_LINEAR_BIT Config allows specifying OpenVG 
            rendering in a linear colorspace at surface creation time (see Egl.CreatePbufferSurface, Egl.CreatePixmapSurface, and 
            Egl.CreateWindowSurface). Egl.WINDOW_BIT Config supports creating window surfaces. For example, if the bitmask is set to 
            Egl.WINDOW_BIT | Egl.PIXMAP_BIT, only frame buffer configurations that support both windows and pixmaps will be 
            considered. The default value is Egl.WINDOW_BIT.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns a bitmask indicating the types of supported EGL surfaces.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TRANSPARENT_BLUE_VALUE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by an integer value indicating the transparent blue value. The value must be 
            between zero and the maximum color buffer value for blue. Only frame buffer configurations that use the specified 
            transparent blue value will be considered. The default value is Egl.DONT_CARE. This attribute is ignored unless 
            Egl.TRANSPARENT_TYPE is included in attrib_list and specified as Egl.TRANSPARENT_RGB.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the transparent blue value.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TRANSPARENT_GREEN_VALUE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by an integer value indicating the transparent green value. The value must be 
            between zero and the maximum color buffer value for green. Only frame buffer configurations that use the specified 
            transparent green value will be considered. The default value is Egl.DONT_CARE. This attribute is ignored unless 
            Egl.TRANSPARENT_TYPE is included in attrib_list and specified as Egl.TRANSPARENT_RGB.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the transparent green value.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TRANSPARENT_RED_VALUE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by an integer value indicating the transparent red value. The value must be 
            between zero and the maximum color buffer value for red. Only frame buffer configurations that use the specified 
            transparent red value will be considered. The default value is Egl.DONT_CARE. This attribute is ignored unless 
            Egl.TRANSPARENT_TYPE is included in attrib_list and specified as Egl.TRANSPARENT_RGB.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the transparent red value.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TRANSPARENT_RGB">
            <summary>
            [EGL] Value of EGL_TRANSPARENT_RGB symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TRANSPARENT_TYPE">
            <summary>
            <para>
            [EGL] Egl.ChooseConfig: Must be followed by one of Egl.NONE or Egl.TRANSPARENT_RGB. If Egl.NONE is specified, then only 
            opaque frame buffer configurations will be considered. If Egl.TRANSPARENT_RGB is specified, then only transparent frame 
            buffer configurations will be considered. The default value is Egl.NONE. Most implementations support only opaque frame 
            buffer configurations.
            </para>
            <para>
            [EGL] Egl.GetConfigAttrib: Returns the type of supported transparency. Possible transparency values are: Egl.NONE, and 
            Egl.TRANSPARENT_RGB.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.TRUE">
            <summary>
            [EGL] Value of EGL_TRUE symbol.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.VENDOR">
            <summary>
            [EGL] Egl.QueryString: Returns the company responsible for this EGL implementation. This name does not change from 
            release to release.
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.VERSION">
            <summary>
            [EGL] Egl.QueryString: Returns a version or release number. The Egl.VERSION string is laid out as 
            follows:major_version.minor_version space vendor_specific_info
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.WIDTH">
            <summary>
            <para>
            [EGL] Egl.CreatePbufferSurface: Specifies the required width of the pixel buffer surface. The default value is Egl..
            </para>
            <para>
            [EGL] Egl.QuerySurface: Returns the width of the surface in pixels.
            </para>
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.Egl.WINDOW_BIT">
            <summary>
            [EGL] Value of EGL_WINDOW_BIT symbol.
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetCurrentContext">
            <summary>
            [EGL] eglGetCurrentContext: return the current EGL rendering context
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.BindAPI(System.UInt32)">
            <summary>
            [EGL] eglBindAPI: Set the current rendering API
            </summary>
            <param name="api">
            Specifies the client API to bind, one of Egl.OPENGL_API, Egl.OPENGL_ES_API, or Egl.OPENVG_API.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.QueryAPI">
            <summary>
            [EGL] eglQueryAPI: Query the current rendering API
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.CreatePbufferFromClientBuffer(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            [EGL] eglCreatePbufferFromClientBuffer: create a new EGL pixel buffer surface bound to an OpenVG image
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="buftype">
            Specifies the type of client API buffer to be bound. Must be Egl.OPENVG_IMAGE, corresponding to an OpenVG VGImage 
            buffer.
            </param>
            <param name="buffer">
            Specifies the OpenVG VGImage handle of the buffer to be bound.
            </param>
            <param name="config">
            Specifies the EGL frame buffer configuration that defines the frame buffer resource available to the surface.
            </param>
            <param name="attrib_list">
            Specifies pixel buffer surface attributes. May be Egl. or empty (first attribute is Egl.NONE).
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.ReleaseThread">
            <summary>
            [EGL] eglReleaseThread: Release EGL per-thread state
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.WaitClient">
            <summary>
            [EGL] eglWaitClient: Complete client API execution prior to subsequent native rendering calls
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.BindTexImage(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            [EGL] eglBindTexImage: Defines a two-dimensional texture image
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="surface">
            Specifies the EGL surface.
            </param>
            <param name="buffer">
            Specifies the texture image data.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.ReleaseTexImage(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            [EGL] eglReleaseTexImage: Releases a color buffer that is being used as a texture
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="surface">
            Specifies the EGL surface.
            </param>
            <param name="buffer">
            Specifies the texture image data.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.SurfaceAttrib(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            [EGL] eglSurfaceAttrib: set an EGL surface attribute
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="surface">
            Specifies the EGL surface.
            </param>
            <param name="attribute">
            Specifies the EGL surface attribute to set.
            </param>
            <param name="value">
            Specifies the attributes required value.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.SwapInterval(System.IntPtr,System.Int32)">
            <summary>
            [EGL] eglSwapInterval: specifies the minimum number of video frame periods per buffer swap for the window associated 
            with the current context.
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="interval">
            Specifies the minimum number of video frames that are displayed before a buffer swap will occur.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.ChooseConfig(System.IntPtr,System.Int32[],System.IntPtr[],System.Int32,System.Int32[])">
            <summary>
            [EGL] eglChooseConfig: return a list of EGL frame buffer configurations that match specified attributes
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="attrib_list">
            Specifies attributes required to match by configs.
            </param>
            <param name="configs">
            Returns an array of frame buffer configurations.
            </param>
            <param name="config_size">
            Specifies the size of the array of frame buffer configurations.
            </param>
            <param name="num_config">
            Returns the number of frame buffer configurations returned.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.CopyBuffers(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            [EGL] eglCopyBuffers: copy EGL surface color buffer to a native pixmap
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="surface">
            Specifies the EGL surface whose color buffer is to be copied.
            </param>
            <param name="target">
            A <see cref="T:IntPtr"/>.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.CreateContext(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            [EGL] eglCreateContext: create a new EGL rendering context
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="config">
            Specifies the EGL frame buffer configuration that defines the frame buffer resource available to the rendering context.
            </param>
            <param name="share_context">
            Specifies another EGL rendering context with which to share data, as defined by the client API corresponding to the 
            contexts. Data is also shared with all other contexts with which <paramref name="share_context"/> shares data. 
            Egl.NO_CONTEXT indicates that no sharing is to take place.
            </param>
            <param name="attrib_list">
            Specifies attributes and attribute values for the context being created. Only the attribute Egl.CONTEXT_CLIENT_VERSION 
            may be specified.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.CreatePbufferSurface(System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            [EGL] eglCreatePbufferSurface: create a new EGL pixel buffer surface
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="config">
            Specifies the EGL frame buffer configuration that defines the frame buffer resource available to the surface.
            </param>
            <param name="attrib_list">
            Specifies pixel buffer surface attributes. May be Egl. or empty (first attribute is Egl.NONE).
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.CreatePixmapSurface(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            [EGL] eglCreatePixmapSurface: create a new EGL pixmap surface
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="config">
            Specifies the EGL frame buffer configuration that defines the frame buffer resource available to the surface.
            </param>
            <param name="pixmap">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="attrib_list">
            Specifies pixmap surface attributes. May be Egl. or empty (first attribute is Egl.NONE).
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.CreateWindowSurface(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            [EGL] eglCreateWindowSurface: create a new EGL window surface
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="config">
            Specifies the EGL frame buffer configuration that defines the frame buffer resource available to the surface.
            </param>
            <param name="win">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="attrib_list">
            Specifies window surface attributes. May be Egl. or empty (first attribute is Egl.NONE).
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.DestroyContext(System.IntPtr,System.IntPtr)">
            <summary>
            [EGL] eglDestroyContext: destroy an EGL rendering context
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="ctx">
            A <see cref="T:IntPtr"/>.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.DestroySurface(System.IntPtr,System.IntPtr)">
            <summary>
            [EGL] eglDestroySurface: destroy an EGL surface
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="surface">
            Specifies the EGL surface to be destroyed.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetConfigAttrib(System.IntPtr,System.IntPtr,System.Int32,System.Int32[])">
            <summary>
            [EGL] eglGetConfigAttrib: return information about an EGL frame buffer configuration
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="config">
            Specifies the EGL frame buffer configuration to be queried.
            </param>
            <param name="attribute">
            Specifies the EGL rendering context attribute to be returned.
            </param>
            <param name="value">
            Returns the requested value.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetConfigAttrib(System.IntPtr,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            [EGL] eglGetConfigAttrib: return information about an EGL frame buffer configuration
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="config">
            Specifies the EGL frame buffer configuration to be queried.
            </param>
            <param name="attribute">
            Specifies the EGL rendering context attribute to be returned.
            </param>
            <param name="value">
            Returns the requested value.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetConfigs(System.IntPtr,System.IntPtr[],System.Int32,System.Int32[])">
            <summary>
            [EGL] eglGetConfigs: return a list of all EGL frame buffer configurations for a display
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="configs">
            Returns a list of configs.
            </param>
            <param name="config_size">
            Specifies the size of the list of configs.
            </param>
            <param name="num_config">
            Returns the number of configs returned.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetConfigs(System.IntPtr,System.IntPtr[],System.Int32,System.Int32@)">
            <summary>
            [EGL] eglGetConfigs: return a list of all EGL frame buffer configurations for a display
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="configs">
            Returns a list of configs.
            </param>
            <param name="config_size">
            Specifies the size of the list of configs.
            </param>
            <param name="num_config">
            Returns the number of configs returned.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetCurrentDisplay">
            <summary>
            [EGL] eglGetCurrentDisplay: return the display for the current EGL rendering context
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetCurrentSurface(System.Int32)">
            <summary>
            [EGL] eglGetCurrentSurface: return the read or draw surface for the current EGL rendering context
            </summary>
            <param name="readdraw">
            Specifies whether the EGL read or draw surface is to be returned.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetDisplay(System.IntPtr)">
            <summary>
            [EGL] eglGetDisplay: return an EGL display connection
            </summary>
            <param name="display_id">
            A <see cref="T:IntPtr"/>.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetError">
            <summary>
            [EGL] eglGetError: return error information
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.GetProcAddress(System.String)">
            <summary>
            [EGL] eglGetProcAddress: return a GL or an EGL extension function
            </summary>
            <param name="procname">
            Specifies the name of the function to return.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.Initialize(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
            [EGL] eglInitialize: initialize an EGL display connection
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="major">
            Returns the major version number of the EGL implementation. May be Egl..
            </param>
            <param name="minor">
            Returns the minor version number of the EGL implementation. May be Egl..
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.MakeCurrent(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            [EGL] eglMakeCurrent: attach an EGL rendering context to EGL surfaces
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="draw">
            Specifies the EGL draw surface.
            </param>
            <param name="read">
            Specifies the EGL read surface.
            </param>
            <param name="ctx">
            A <see cref="T:IntPtr"/>.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.QueryContext(System.IntPtr,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            [EGL] eglQueryContext: return EGL rendering context information
            </summary>
            <param name="display">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="context">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="attribute">
            Specifies the EGL rendering context attribute to be returned.
            </param>
            <param name="value">
            Returns the requested value.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.QueryString(System.IntPtr,System.Int32)">
            <summary>
            [EGL] eglQueryString: return a string describing an EGL display connection
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="name">
            Specifies a symbolic constant, one of Egl.CLIENT_APIS, Egl.VENDOR, Egl.VERSION, or Egl.EXTENSIONS.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.QuerySurface(System.IntPtr,System.IntPtr,System.Int32,System.Int32[])">
            <summary>
            [EGL] eglQuerySurface: return EGL surface information
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="surface">
            Specifies the EGL surface to query.
            </param>
            <param name="attribute">
            Specifies the EGL surface attribute to be returned.
            </param>
            <param name="value">
            Returns the requested value.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.SwapBuffers(System.IntPtr,System.IntPtr)">
            <summary>
            [EGL] eglSwapBuffers: post EGL surface color buffer to a native window
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
            <param name="surface">
            Specifies the EGL drawing surface whose buffers are to be swapped.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.Terminate(System.IntPtr)">
            <summary>
            [EGL] eglTerminate: terminate an EGL display connection
            </summary>
            <param name="dpy">
            A <see cref="T:IntPtr"/>.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.WaitGL">
            <summary>
            [EGL] eglWaitGL: Complete GL execution prior to subsequent native rendering calls
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.Egl.WaitNative(System.Int32)">
            <summary>
            [EGL] eglWaitNative: complete native execution prior to subsequent GL rendering calls
            </summary>
            <param name="engine">
            Specifies a particular marking engine to be waited on. Must be Egl.CORE_NATIVE_ENGINE.
            </param>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.VideoCore.bcm_host_get_processor_id">
            <summary>
            The processor ID.
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.VideoCore.bcm_host_is_kms_active">
            <summary>
            Returns 1 if kms is active (dtoverlay=v3d-kms-vc4)
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.VideoCore.bcm_host_is_fkms_active">
            <summary>
            Returns 1 if fkms is active (dtoverlay=v3d-fkms-vc4)
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.VideoCore.bcm_host_is_model_pi4">
            <summary>
            Returns 1 if model is Pi4
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.VideoCore.bcm_host_get_model_type">
            <summary>
            Gets the model of the Raspberry Pi board being used.
            </summary>
        </member>
        <member name="T:SharpPi.Native.NativeMethods.VideoCore.EGL_DISPMANX_WINDOW_T">
            <summary>
            The structure expected by eglCreateWindowSurface function.
            </summary>
        </member>
        <member name="T:SharpPi.Native.NativeMethods.DynamicLibrary">
            <summary>
            Dynamic Link Library (libdl)
            </summary>
        </member>
        <member name="F:SharpPi.Native.NativeMethods.DynamicLibrary.FLAGS_RTLD_NOW">
            <summary>
            I think this means force load all the symbols even if we're not using them yet.
            </summary>
        </member>
        <member name="P:SharpPi.Native.NativeMethods.DynamicLibrary.Location">
            <summary>
            The handle to the loaded library.
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.DynamicLibrary.Open(System.String,System.Int32)">
            <summary>
            Loads the dynamic library file named by the null-terminated string filename and returns an opaque "handle" for the dynamic library.
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.DynamicLibrary.Sym(System.IntPtr,System.String)">
            <summary>
            TBI
            </summary>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.DynamicLibrary.Close(System.IntPtr)">
            <summary>
            Decrements the reference count on the dynamic library handle handle.
            If the reference count drops to zero and no other loaded libraries use symbols in it, then the dynamic library is unloaded.
            </summary>
            <returns>0 on success, and nonzero on error.</returns>
        </member>
        <member name="M:SharpPi.Native.NativeMethods.DynamicLibrary.GetError">
            <summary>
            Returns a human readable string describing the most recent error that occurred from dlopen(), dlsym() or dlclose() since the last call to dlerror().
            It returns <see cref="!:null"/> if no errors have occurred since initialization or since it was last called.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpPi.Native.PinnedObject`1.Address">
            <summary>
            Address of the pinned object in memory.
            </summary>
        </member>
        <member name="M:SharpPi.Native.PinnedObject`1.Dispose">
            <summary>
            Releases all resource used by the <see cref="!:MemoryLock"/> object.
            </summary>
            <remarks>
            Call <see cref="M:SharpPi.Native.PinnedObject`1.Dispose"/> when you are finished using the <see cref="!:MemoryLock"/>.
            </remarks>
        </member>
        <member name="M:SharpPi.Graphics.Egl.Initialize(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initialize EGL display connection.
            </summary>
            <param name="display">The display handle</param>
        </member>
        <member name="M:SharpPi.Graphics.Egl.GetDisplay(System.IntPtr)">
            <summary>
            Get an EGL display connection.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.Egl.Terminate(System.IntPtr)">
            <summary>
            Terminate an EGL connection.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.Egl.DestroySurface(System.IntPtr,System.IntPtr)">
            <summary>
            Destroy an EGL surface.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.Egl.CreateWindowSurface(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32[])">
            <summary>
            Creates a new EGL window surface.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.EGLContext._NativeSurface">
            <summary>
            The native surface used by this device context.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.Display">
            <summary>
            Get the display connection.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.EglSurface">
            <summary>
            Get the EGL surface handle.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.EGLContext._Config">
            <summary>
            The frame buffer configuration.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.IsPixelFormatSet">
            <summary>
            Get the flag indicating whether this DeviceContext has a pixel format defined.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.EGLContext.IsPBufferSupported">
            <summary>
            Determine whether the hosting platform is able to create a P-Buffer.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="!:DeviceContextEGL"/> class.
            </summary>
            <param name='windowHandle'>
            A <see cref="T:System.IntPtr"/> that specifies the window handle used to create the device context.  If it is <see cref="F:System.IntPtr.Zero"/>
            the surface referenced by this NativeDeviceContext is a minimal PBuffer, or no surface at all in case EGL_KHR_surfaceless_context
            </param>
            <exception cref='T:System.InvalidOperationException'>
            Is thrown when an operation cannot be performed.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="!:DeviceContextEGL"/> class.
            </summary>
            <param name="display">
            A <see cref="T:System.IntPtr"/> that specifies the display handle used to create <paramref name="windowHandle"/>.
            </param>
            <param name='windowHandle'>
            A <see cref="T:System.IntPtr"/> that specifies the window handle used to create the device context. If it is <see cref="F:System.IntPtr.Zero"/>
            the surface referenced by this NativeDeviceContext is a minimal PBuffer, or no surface at all in case EGL_KHR_surfaceless_context
            is supported.
            </param>
            <exception cref='T:System.InvalidOperationException'>
            Is thrown when an operation cannot be performed.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.#ctor(SharpPi.Graphics.EGLContext.INativePBuffer)">
            <summary>
            Initializes a new instance of the <see cref="!:DeviceContextEGL"/> class.
            </summary>
            <param name='nativeBuffer'>
            A <see cref="T:SharpPi.Graphics.EGLContext.INativePBuffer"/> that specifies the P-Buffer used to create the device context.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="nativeBuffer"/> is null.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.CreateSimpleContext">
            <summary>
            Create a simple context.
            </summary>
            <returns>
            A <see cref="T:System.IntPtr"/> that represents the handle of the created context. If the context cannot be
            created, it returns IntPtr.Zero.
            </returns>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.CreateContext(System.IntPtr)">
            <summary>
            Creates a context.
            </summary>
            <param name="sharedContext">
            A <see cref="T:System.IntPtr"/> that specify a context that will share objects with the returned one. If
            it is IntPtr.Zero, no sharing is performed.
            </param>
            <returns>
            A <see cref="T:System.IntPtr"/> that represents the handle of the created context. If the context cannot be
            created, it returns IntPtr.Zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown in the case <paramref name="sharedContext"/> is different from IntPtr.Zero, and the objects
            cannot be shared with it.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.CreateContextAttrib(System.IntPtr,System.Int32[])">
            <summary>
            Creates a context, specifying attributes.
            </summary>
            <param name="sharedContext">
            A <see cref="T:System.IntPtr"/> that specify a context that will share objects with the returned one. If
            it is IntPtr.Zero, no sharing is performed.
            </param>
            <param name="attribsList">
            A <see cref="T:Int32[]"/> that specifies the attributes list.
            </param>
            <param name="api">
            A <see cref="!:KhronosVersion"/> that specifies the API to be implemented by the returned context. It can be null indicating the
            default API for this DeviceContext implementation. If it is possible, try to determine the API version also.
            </param>
            <returns>
            A <see cref="T:System.IntPtr"/> that represents the handle of the created context. If the context cannot be
            created, it returns IntPtr.Zero.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="attribsList"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="attribsList"/> length is zero or if the last item of <paramref name="attribsList"/>
            is not zero.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.MakeCurrent(System.IntPtr)">
            <summary>
            Makes the context current on the calling thread.
            </summary>
            <param name="ctx">
            A <see cref="T:System.IntPtr"/> that specify the context to be current on the calling thread, bound to
            thise device context. It can be IntPtr.Zero indicating that no context will be current.
            </param>
            <returns>
            It returns a boolean value indicating whether the operation was successful.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Exception thrown if the current platform is not supported.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.MakeCurrentCore(System.IntPtr)">
            <summary>
            Makes the context current on the calling thread.
            </summary>
            <param name="ctx">
            A <see cref="T:System.IntPtr"/> that specify the context to be current on the calling thread, bound to
            thise device context. It can be IntPtr.Zero indicating that no context will be current.
            </param>
            <returns>
            It returns a boolean value indicating whether the operation was successful.
            </returns>
            <exception cref="T:System.NotSupportedException">
            Exception thrown if the current platform is not supported.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.DeleteContext(System.IntPtr)">
            <summary>
            Deletes a context.
            </summary>
            <param name="ctx">
            A <see cref="T:System.IntPtr"/> that specify the context to be deleted.
            </param>
            <returns>
            It returns a boolean value indicating whether the operation was successful. If it returns false,
            query the exception by calling <see cref="!:GetPlatformException"/>.
            </returns>
            <remarks>
            <para>The context <paramref name="ctx"/> must not be current on any thread.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Exception thrown if <paramref name="ctx"/> is IntPtr.Zero.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.SwapBuffers">
            <summary>
            Swap the buffers of a device.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.SwapInterval(System.Int32)">
            <summary>
            Control the the buffers swap of a device.
            </summary>
            <param name="interval">
            A <see cref="T:System.Int32"/> that specifies the minimum number of video frames that are displayed
            before a buffer swap will occur.
            </param>
            <returns>
            It returns a boolean value indicating whether the operation was successful.
            </returns>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.PixelsFormats">
            <summary>
            Get the pixel formats supported by this device.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.ChoosePixelFormat(SharpPi.Graphics.DevicePixelFormat)">
            <summary>
            Set the device pixel format.
            </summary>
            <param name="pixelFormat">
            A <see cref="T:SharpPi.Graphics.DevicePixelFormat"/> that specifies the pixel format to set.
            </param>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.ChoosePixelFormat(System.IntPtr,SharpPi.Graphics.DevicePixelFormat)">
            <summary>
            Set the device pixel format.
            </summary>
            <param name="pixelFormat">
            A <see cref="T:SharpPi.Graphics.DevicePixelFormat"/> that specifies the pixel format to set.
            </param>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.SetPixelFormat(SharpPi.Graphics.DevicePixelFormat)">
            <summary>
            Set the device pixel format.
            </summary>
            <param name="pixelFormat">
            A <see cref="T:SharpPi.Graphics.DevicePixelFormat"/> that specifies the pixel format to set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Exception thrown if <paramref name="pixelFormat"/> is null.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed/unmanaged resources.
            </summary>
            <param name="disposing">
            A <see cref="T:System.Boolean"/> indicating whether the disposition is requested explictly.
            </param>
        </member>
        <member name="F:SharpPi.Graphics.EGLContext._PixelFormatCache">
            <summary>
            Pixel formats available on this DeviceContext (cache).
            </summary>
        </member>
        <member name="T:SharpPi.Graphics.EGLContext.NativeSurface">
            <summary>
            Basic native EGL surface.
            </summary>
            <remarks>
            Holds EGL display and version.
            </remarks>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativeSurface.#ctor(System.IntPtr)">
            <summary>
            Default constructor.
            </summary>
            <param name="display">
            A <see cref="T:System.IntPtr"/> that specifies the display handle to be passed to <see cref="M:SharpPi.Graphics.Egl.GetDisplay(System.IntPtr)"/>.
            </param>
        </member>
        <member name="F:SharpPi.Graphics.EGLContext.NativeSurface.DefaultDisplay">
            <summary>
            The default display handle.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.NativeSurface.Handle">
            <summary>
            Get the native surface handle.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativeSurface.CreateHandle(System.IntPtr,System.Int32[])">
            <summary>
            Create the native surface handle.
            </summary>
            <param name="configId">
            A <see cref="T:System.IntPtr"/> that specifies the configuration ID.
            </param>
            <param name="attribs">
            A <see cref="T:int[]"/> that lists the handle attributes.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the handle is already created.
            </exception>
        </member>
        <member name="F:SharpPi.Graphics.EGLContext.NativeSurface._Display">
            <summary>
            Get the display handle associated this instance.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativeSurface.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.INativeWindow.Display">
            <summary>
            Get the display handle associated this instance.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.INativeWindow.Handle">
            <summary>
            Get the native window handle.
            </summary>
        </member>
        <member name="T:SharpPi.Graphics.EGLContext.INativePBuffer">
            <summary>
            Native P-Buffer interface.
            </summary>
        </member>
        <member name="T:SharpPi.Graphics.EGLContext.NativeWindow">
            <summary>
            Native window implementation for Windows.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativeWindow.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Construct a NativeWindow on an OS window
            </summary>
            <param name="display">
            A <see cref="T:System.IntPtr"/> that specifies the display handle to be passed to <see cref="M:SharpPi.Graphics.Egl.GetDisplay(System.IntPtr)"/>.
            </param>
            <param name="windowHandle">
            A <see cref="T:System.IntPtr"/> that specifies the handle of the OS window.
            </param>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativeWindow.#ctor(System.IntPtr,System.IntPtr,SharpPi.Graphics.DevicePixelFormat)">
            <summary>
            Construct a NativeWindow on an OS window.
            </summary>
            <param name="display">
            A <see cref="T:System.IntPtr"/> that specifies the display handle to be passed to <see cref="M:SharpPi.Graphics.Egl.GetDisplay(System.IntPtr)"/>.
            </param>
            <param name="windowHandle">
            A <see cref="T:System.IntPtr"/> that specifies the handle of the OS window.
            </param>
            <param name="pixelFormat">
            A <see cref="T:SharpPi.Graphics.DevicePixelFormat"/> used for choosing the NativeWindow pixel format configuration. It can
            be null; in this case the pixel format will be set elsewhere.
            </param>
        </member>
        <member name="F:SharpPi.Graphics.EGLContext.NativeWindow._Handle">
            <summary>
            The EGL window handle.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.EGLContext.NativeWindow._WindowHandle">
            <summary>
            The OS window handle.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.NativeWindow.Handle">
            <summary>
            Get the EGL window handle.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativeWindow.CreateHandle(System.IntPtr,System.Int32[])">
            <summary>
            Create the native surface handle.
            </summary>
            <param name="configId">
            A <see cref="T:System.IntPtr"/> that specifies the configuration ID.
            </param>
            <param name="attribs">
            A <see cref="T:int[]"/> that lists the handle attributes.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the handle is already created.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativeWindow.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.NativeWindow.SharpPi#Graphics#EGLContext#INativeWindow#Display">
            <summary>
            Get the display handle associated this instance.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.NativeWindow.SharpPi#Graphics#EGLContext#INativeWindow#Handle">
            <summary>
            Get the native window handle.
            </summary>
        </member>
        <member name="T:SharpPi.Graphics.EGLContext.NativePBuffer">
            <summary>
            P-Buffer implementation for EGL.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativePBuffer.#ctor(SharpPi.Graphics.DevicePixelFormat,System.UInt32,System.UInt32)">
            <summary>
            Construct a NativePBuffer with a specific pixel format and size.
            </summary>
            <param name="pixelFormat">
            A <see cref="T:SharpPi.Graphics.DevicePixelFormat"/> that specifies the pixel format and the ancillary buffers required.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specifies the width of the P-Buffer, in pixels.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specifies the height of the P-Buffer, in pixels.
            </param>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativePBuffer.#ctor(System.IntPtr,SharpPi.Graphics.DevicePixelFormat,System.UInt32,System.UInt32)">
            <summary>
            Construct a NativePBuffer with a specific pixel format and size.
            </summary>
            <param name="display">
            
            </param>
            <param name="pixelFormat">
            A <see cref="T:SharpPi.Graphics.DevicePixelFormat"/> that specifies the pixel format and the ancillary buffers required.
            </param>
            <param name="width">
            A <see cref="T:System.UInt32"/> that specifies the width of the P-Buffer, in pixels.
            </param>
            <param name="height">
            A <see cref="T:System.UInt32"/> that specifies the height of the P-Buffer, in pixels.
            </param>
        </member>
        <member name="F:SharpPi.Graphics.EGLContext.NativePBuffer._Handle">
            <summary>
            The P-Buffer handle.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.NativePBuffer.Handle">
            <summary>
            Get the EGL window handle.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativePBuffer.CreateHandle(System.IntPtr,System.Int32[])">
            <summary>
            Create the native surface handle.
            </summary>
            <param name="configId">
            A <see cref="T:System.IntPtr"/> that specifies the configuration ID.
            </param>
            <param name="attribs">
            A <see cref="T:int[]"/> that lists the handle attributes.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Exception thrown if the handle is already created.
            </exception>
        </member>
        <member name="M:SharpPi.Graphics.EGLContext.NativePBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.NativePBuffer.SharpPi#Graphics#EGLContext#INativeWindow#Display">
            <summary>
            Get the display handle associated this instance.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.EGLContext.NativePBuffer.SharpPi#Graphics#EGLContext#INativeWindow#Handle">
            <summary>
            Get the native window handle.
            </summary>
        </member>
        <member name="T:SharpPi.Graphics.EglException">
            <summary>
            Exception thrown by Egl class.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.EglException.#ctor(System.Int32)">
            <summary>
            Construct a EglException.
            </summary>
            <param name="errorCode">
            A <see cref="T:System.Int32"/> that specifies the error code.
            </param>
        </member>
        <member name="M:SharpPi.Graphics.EglException.GetErrorMessage(System.Int32)">
            <summary>
            Returns a description of the error code.
            </summary>
            <param name="errorCode">
            A <see cref="T:System.Int32"/> that specifies the error code.
            </param>
            <returns>
            It returns a description of <paramref name="errorCode"/>.
            </returns>
        </member>
        <member name="T:SharpPi.Graphics.GLException">
            <summary>
            Exception thrown by Egl class.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.GLException.#ctor(OpenTK.Graphics.ES20.ErrorCode)">
            <summary>
            Construct a GLException.
            </summary>
            <param name="errorCode">
            A <see cref="T:System.Int32"/> that specifies the error code.
            </param>
        </member>
        <member name="M:SharpPi.Graphics.GLException.GetErrorMessage(OpenTK.Graphics.ES20.ErrorCode)">
            <summary>
            Returns a description of the error code.
            </summary>
            <param name="errorCode">
            A <see cref="T:System.Int32"/> that specifies the error code.
            </param>
            <returns>
            It returns a description of <paramref name="errorCode"/>.
            </returns>
        </member>
        <member name="M:SharpPi.Graphics.DevicePixelFormat.#ctor">
            <summary>
            Parameterless constructor.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.DevicePixelFormat.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="colorBits"></param>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.FormatIndex">
            <summary>
            Pixel format index.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.RgbaUnsigned">
            <summary>
            Flag indicating whether this pixel format provide canonical (normalized) unsigned integer RGBA color.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.RgbaFloat">
            <summary>
            Flag indicating whether this pixel format provide RGBA color composed by single-precision floating-point.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.RenderWindow">
            <summary>
            Pixel format can be used for rendering on windows.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.RenderBuffer">
            <summary>
            Pixel format can be used for rendering on memory buffers.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.RenderPBuffer">
            <summary>
            Pixel format can be used for rendering on pixel buffer objects.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.DoubleBuffer">
            <summary>
            Pixel format support double buffering.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.SwapMethod">
            <summary>
            Method used for swapping back buffers (WGL only).
            </summary>
            <remarks>
            It can assume the values Wgl.SWAP_EXCHANGE, SWAP_COPY, or SWAP_UNDEFINED in the case DoubleBuffer is false.
            </remarks>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.StereoBuffer">
            <summary>
            Pixel format support stereo buffering.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.ColorBits">
            <summary>
            Color bits (without alpha).
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.RedBits">
            <summary>
            Red bits.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.GreenBits">
            <summary>
            Green bits.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.BlueBits">
            <summary>
            Blue bits.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.AlphaBits">
            <summary>
            Alpha bits.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.DepthBits">
            <summary>
            Depth buffer bits.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.StencilBits">
            <summary>
            Stencil buffer bits.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.MultisampleBits">
            <summary>
            Multisample bits.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.DevicePixelFormat.SRGBCapable">
            <summary>
            sRGB conversion capability.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.DevicePixelFormat.Copy">
            <summary>
            Copy this DevicePixelFormat
            </summary>
            <returns>
            It returns a <see cref="T:SharpPi.Graphics.DevicePixelFormat"/> equals to this DevicePixelFormat.
            </returns>
        </member>
        <member name="M:SharpPi.Graphics.DevicePixelFormat.ToString">
            <summary>
            Represent this object with a String.
            </summary>
            <returns>
            Guess it.
            </returns>
        </member>
        <member name="M:SharpPi.Graphics.DevicePixelFormatCollection.Choose(SharpPi.Graphics.DevicePixelFormat)">
            <summary>
            Choose a <see cref="T:SharpPi.Graphics.DevicePixelFormat"/>
            </summary>
            <param name="pixelFormat">
            A <see cref="T:SharpPi.Graphics.DevicePixelFormat"/> that specify the minimum requirements
            </param>
            <returns></returns>
        </member>
        <member name="M:SharpPi.Graphics.DevicePixelFormatCollection.GuessChooseError(SharpPi.Graphics.DevicePixelFormat)">
            <summary>
            Try to guess why <see cref="M:SharpPi.Graphics.DevicePixelFormatCollection.Choose(SharpPi.Graphics.DevicePixelFormat)"/> is not returning any pixel format.
            </summary>
            <param name="pixelFormat">
            A <see cref="T:SharpPi.Graphics.DevicePixelFormat"/> that specify the minimum requirements
            </param>
            <returns>
            It returns a string indicating the actual reason behind a failure in pixel format selection using <paramref name="pixelFormat"/>.
            </returns>
        </member>
        <member name="M:SharpPi.Graphics.DevicePixelFormatCollection.Copy">
            <summary>
            Copy this DevicePixelFormatCollection.
            </summary>
            <returns>
            It returns a <see cref="T:SharpPi.Graphics.DevicePixelFormatCollection"/> equivalent to this DevicePixelFormatCollection.
            </returns>
        </member>
        <member name="T:SharpPi.Graphics.ImGuiController">
            <summary>
            A modified version of Veldrid.ImGui's ImGuiRenderer.
            Manages input for ImGui and handles rendering ImGui's DrawLists with Veldrid.
            TODO:
            Add the ability to change fonts on the fly
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.ImGuiController.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new ImGuiController.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.ImGuiController.RecreateFontDeviceTexture">
            <summary>
            Recreates the device texture used to render text.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.ImGuiController.Render">
            <summary>
            Renders the ImGui draw list data.
            This method requires a <see cref="!:GraphicsDevice"/> because it may create new DeviceBuffers if the size of vertex
            or index data has increased beyond the capacity of the existing buffers.
            A <see cref="!:CommandList"/> is needed to submit drawing and resource update commands.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.ImGuiController.Update">
            <summary>
            Updates ImGui input and IO configuration state.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.ImGuiController.SetPerFrameImGuiData">
            <summary>
            Sets per-frame data based on the associated window.
            This is called by Update(float).
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.ImGuiController.Dispose">
            <summary>
            Frees all graphics resources used by the renderer.
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.Vertex.Size">
            <summary>
            Size of the <see cref="T:SharpPi.Graphics.Vertex"/> struct in bytes.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.Texture2D.BindWhile``1(System.Func{``0})">
            <summary>
            Executes the supplied function while this <see cref="T:SharpPi.Graphics.Texture2D"/> instance has context.
            The <see cref="T:SharpPi.Graphics.Texture2D"/> instance is first bound before executing the function, then unbound after the provided function is finished executing.
            </summary>
            <typeparam name="T">The return value of the function.</typeparam>
            <param name="action">The function to execute with texture context.</param>
            <returns>The value returned by the provided <paramref name="action"/>.</returns>
        </member>
        <member name="M:SharpPi.Graphics.Texture2D.BindWhile(System.Action)">
            <summary>
            Executes the supplied action while this <see cref="T:SharpPi.Graphics.Texture2D"/> instance has context.
            The <see cref="T:SharpPi.Graphics.Texture2D"/> instance is first bound before executing the action, then unbound after the provided action is finished executing.
            </summary>
            <param name="action">The action to execute with texture context.</param>
        </member>
        <member name="T:SharpPi.Graphics.StatusCode">
            <summary>
            Return codes, non-zero indicates failure.
            </summary>
        </member>
        <member name="T:SharpPi.Graphics.ProtectionLevel">
            <summary>
            Derived from the WM DRM levels, 101-300
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.VideoCore.Initialize">
            <summary>
            Initialize the VideoCore driver. Call this before doing anything with VideoCore/OpenGL.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.VideoCore.Uninitialize">
            <summary>
            Shutdown the VideoCore driver. Call this after you are done using VideoCore/OpenGL.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.VideoCore.Run(SharpPi.Graphics.VideoCoreWindow)">
            <summary>
            Begin rendering a <see cref="T:SharpPi.Graphics.VideoCoreWindow"/> instance.
            </summary>
        </member>
        <member name="T:SharpPi.Graphics.VideoCoreWindow">
            <summary>
            OpenGL renderer based on VideoCore IV API on RaspberryPi.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.VideoCoreWindow.DisplayHandle">
            <summary>
            The display handle associated this instance. This property is always <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.VideoCoreWindow.NativeWindowHandle">
            <summary>
            The native window handle.
            </summary>
        </member>
        <member name="E:SharpPi.Graphics.VideoCoreWindow.PreUpdate">
            <summary>
            Called before <see cref="E:SharpPi.Graphics.VideoCoreWindow.Update"/>, this is where any pre-processsing should be done.
            </summary>
        </member>
        <member name="E:SharpPi.Graphics.VideoCoreWindow.Update">
            <summary>
            Called before <see cref="E:SharpPi.Graphics.VideoCoreWindow.UpdateGUI"/>, this is where 3D drawing and frame-by-frame updates should be done.
            </summary>
        </member>
        <member name="E:SharpPi.Graphics.VideoCoreWindow.PostUpdate">
            <summary>
            Called after <see cref="E:SharpPi.Graphics.VideoCoreWindow.Update"/> and before <see cref="E:SharpPi.Graphics.VideoCoreWindow.UpdateGUI"/>, this is where any post-processing should be done.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:SharpPi.Graphics.VideoCoreWindow.UpdateGUI" -->
        <member name="T:SharpPi.Graphics.VideoCoreWindow.EGL_DISPMANX_WINDOW_T">
            <summary>
            The structure expected by eglCreateWindowSurface function.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.VideoCoreWindow.#ctor">
            <summary>
            Construct a fullscreen window.
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.VideoCoreWindow.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:SharpPi.Graphics.VideoCoreWindow"/> object.
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.Time.deltaTime">
            <summary>
            The time since the last frame. (in seconds)
            </summary>
        </member>
        <member name="P:SharpPi.Graphics.Time.time">
            <summary>
            The time since the start of the application. (in seconds)
            </summary>
        </member>
        <member name="F:SharpPi.Graphics.Time.averageFramerate">
            <summary>
            The current average framerate. (average frames per second)
            </summary>
        </member>
        <member name="M:SharpPi.Graphics.Time.Delay(System.Int32)">
            <summary>
            Sleep the calling thread for some time.
            </summary>
        </member>
        <member name="T:SharpPi.Input.Bluetooth">
            <summary>
            Provides methods for interfacing with Bluetooth devices.
            </summary>
        </member>
        <member name="T:SharpPi.Input.KeyboardInputEventData">
             <summary>
             'time' is the timestamp, it returns the time at which the event happened.
             Type is for example EV_REL for relative moment, EV_KEY for a keypress or
             release. More types are defined in include/uapi/linux/input-event-codes.h.
            
             'code' is event code, for example REL_X or KEY_BACKSPACE, again a complete
             list is in include/uapi/linux/input-event-codes.h.
            
             'value' is the value the event carries. Either a relative change for
             EV_REL, absolute new value for EV_ABS(joysticks...), or 0 for EV_KEY for
             release, 1 for keypress and 2 for autorepeat.
             </summary>
        </member>
        <member name="F:SharpPi.Input.MouseInputEventData.Size">
            <summary>
            Will be 3 bytes for PS/2 mice.
            </summary>
        </member>
        <member name="F:SharpPi.Input.InputDeviceDetails.Id">
            <summary>
            Id of the device (struct input_id)
            https://www.kernel.org/doc/Documentation/input/input.txt
            </summary>
        </member>
        <member name="F:SharpPi.Input.InputDeviceDetails.Name">
            <summary>
            Name of the device.
            </summary>
        </member>
        <member name="F:SharpPi.Input.InputDeviceDetails.Path">
            <summary>
            Physical path to the device in the system hierarchy.
            </summary>
        </member>
        <member name="F:SharpPi.Input.InputDeviceDetails.SysPath">
            <summary>
            Sysfs path
            </summary>
        </member>
        <member name="F:SharpPi.Input.InputDeviceDetails.Uid">
            <summary>
            Unique identification code for the device (if device has it)
            </summary>
        </member>
        <member name="F:SharpPi.Input.InputDeviceDetails.Handles">
            <summary>
            The input handles associated with the device.
            </summary>
        </member>
        <member name="P:SharpPi.Input.Input.InputDeviceDetails">
            <summary>
            The <see cref="P:SharpPi.Input.Input.InputDeviceDetails"/> list from the most recent call to the <see cref="M:SharpPi.Input.Input.GetInputDevices(SharpPi.Input.InputDeviceType)"/> method.
            </summary>
        </member>
        <member name="E:SharpPi.Input.Input.OnDevicePluggedIn">
            <summary>
            This event is called when a new input device has been plugged in.
            </summary>
        </member>
        <member name="E:SharpPi.Input.Input.OnDeviceUnplugged">
            <summary>
            This event is called when a new input device has been plugged in.
            </summary>
        </member>
        <member name="M:SharpPi.Input.Input.Initialize(System.Numerics.Vector2)">
            <summary>
            Initialize the input event processor and starts raising input events.
            </summary>
        </member>
        <member name="T:SharpPi.Input.Input.InputWatcherTask">
            <summary>
            Make this more generic?x
            </summary>
        </member>
        <member name="M:SharpPi.Input.Input.InputWatcherTask.Watch(System.String,System.Action{SharpPi.Input.MouseInputEventData},System.Threading.CancellationToken)">
            <summary>
            keyboard = event0, mouse = /dev/input/mice
            should not have to open all of them
            https://thehackerdiary.wordpress.com/2017/04/21/exploring-devinput-1/
            </summary>
        </member>
        <member name="F:SharpPi.Mathf.PI">
            <summary>
            3.141593
            </summary>
        </member>
        <member name="F:SharpPi.Mathf.TwoPI">
            <summary>
            6.283186
            </summary>
        </member>
        <member name="F:SharpPi.Mathf.Infinity">
            <summary>
            Positive infinity.
            </summary>
        </member>
        <member name="F:SharpPi.Mathf.NegativeInfinity">
            <summary>
            Negative infinity.
            </summary>
        </member>
        <member name="F:SharpPi.Mathf.Deg2Rad">
            <summary>
            0.01745329
            </summary>
        </member>
        <member name="F:SharpPi.Mathf.Rad2Deg">
            <summary>
            57.29578
            </summary>
        </member>
        <member name="M:SharpPi.Mathf.Bearing(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Computes the angle (in degrees) from one <see cref="T:OpenTK.Vector2"/> to another <see cref="T:OpenTK.Vector2"/>.
            </summary>
            <param name="a">Starting point</param>
            <param name="b">Ending point</param>
            <returns></returns>
        </member>
        <member name="M:SharpPi.Mathf.Combine(System.Int32,System.Int32)">
            <summary>
            Combines two Int32 values into an Int64(long).
            Example usage: Size attribute.
            </summary>
            <param name="left">The first value.</param>
            <param name="right">The second value.</param>
        </member>
        <member name="M:SharpPi.Mathf.Split(System.Int64)">
            <summary>
            Split an Int64(long) into two Int32 values.
            Example usage: Size attribute.
            </summary>
            <param name="value">The Int64 to split</param>
            <returns>A tuple containing the two Int32 values.</returns>
        </member>
        <member name="T:SharpPi.OS.Kernel">
            <summary>
            Interface for the Linux Kernel.
            </summary>
        </member>
        <member name="T:SharpPi.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SharpPi.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SharpPi.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SharpPi.Properties.Resources.hosts_template">
             <summary>
               Looks up a localized string similar to 127.0.0.1       localhost
            ::1             localhost ip6-localhost ip6 - loopback
            ff02::1         ip6 - allnodes
            ff02::2         ip6 - allrouters
            
            127.0.1.1       {0}.
             </summary>
        </member>
        <member name="P:SharpPi.Properties.Resources.imgui_fragment_glsl">
             <summary>
               Looks up a localized string similar to #version 100
            
            precision mediump float;
            uniform sampler2D in_fontTexture;
            varying vec4 v_color;
            varying vec2 v_texCoord;
            
            void main()
            {
            	gl_FragColor = v_color * texture2D(in_fontTexture, v_texCoord);
            }.
             </summary>
        </member>
        <member name="P:SharpPi.Properties.Resources.imgui_vertex_glsl">
             <summary>
               Looks up a localized string similar to #version 100
            
            uniform mat4 projection_matrix;
            attribute vec2 in_position;
            attribute vec2 in_texCoord;
            attribute vec4 in_color;
            varying vec4 v_color;
            varying vec2 v_texCoord;
            
            void main()
            {
            	gl_Position = projection_matrix * vec4(in_position, 0, 1);
            	v_color = in_color;
            	v_texCoord = in_texCoord;
            }.
             </summary>
        </member>
        <member name="P:SharpPi.Properties.Resources.OpenSans_Regular">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:SharpPi.Properties.Resources.sharp_pi_banner">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SharpPi.Properties.Resources.supplicant_template">
             <summary>
               Looks up a localized string similar to ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
            update_config=1
            country=US
            
            network={{
                    ssid=&quot;{0}&quot;
                    psk=&quot;{1}&quot;
            }}.
             </summary>
        </member>
        <member name="M:SharpPi.Text.DictionaryExt.GetKeyValuePairs``1(System.String[],System.Char,System.Func{System.String,``0})">
            <summary>
            For each line in the specified <paramref name="lines"/> parameter, the line will get split by the specified <paramref name="splitChar"/> character.
            The left side will become the key, and the right side will be the value returned by the <paramref name="parseValue"/> function, giving you the ability to do custom value parsing.
            </summary>
        </member>
        <member name="M:SharpPi.Text.DictionaryExt.Dump``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{System.String},System.Boolean)">
            <summary>
            For each element in the supplied <see cref="T:System.Collections.Generic.Dictionary`2"/>, <paramref name="writeAction"/> will be called, supplying the method with formatted text of the Key and Value.
            </summary>
            <param name="showType">Whether or not to also include the key and value object types in the formatted text for each element.</param>
        </member>
        <member name="T:MMALSharp.Callbacks.ConnectionCallbackHandler">
            <summary>
            Base class for connection callback handlers.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.ConnectionCallbackHandler.WorkingConnection">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Callbacks.ConnectionCallbackHandler.#ctor(MMALSharp.IConnection)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.ConnectionCallbackHandler"/>.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.ConnectionCallbackHandler.InputCallback(MMALSharp.IBuffer)">
            <summary>
            The input port callback function to carry out.
            </summary>
            <param name="buffer">The working buffer header.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.ConnectionCallbackHandler.OutputCallback(MMALSharp.IBuffer)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Callbacks.DefaultConnectionCallbackHandler">
            <summary>
            Default callback handler for connections.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.DefaultConnectionCallbackHandler.#ctor(MMALSharp.IConnection)">
            <summary>
            Create a new instance of <see cref="T:MMALSharp.Callbacks.DefaultConnectionCallbackHandler"/>.
            </summary>
            <param name="connection">The connection object.</param>
        </member>
        <member name="T:MMALSharp.Callbacks.DefaultInputPortCallbackHandler">
            <summary>
            A default callback handler for ports.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.DefaultInputPortCallbackHandler.#ctor(MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Handlers.IInputCaptureHandler)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.DefaultPortCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.Inputs.IInputPort"/>.</param>
            <param name="handler">The input port capture handler.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.DefaultInputPortCallbackHandler.#ctor(MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Handlers.IInputCaptureHandler,MMALSharp.Native.MMALEncoding)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.DefaultPortCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.Inputs.IInputPort"/>.</param>
            <param name="handler">The input port capture handler.</param>
            <param name="encodingType">The <see cref="T:MMALSharp.Native.MMALEncoding"/> type to restrict on.</param>
        </member>
        <member name="T:MMALSharp.Callbacks.DefaultOutputPortCallbackHandler">
            <summary>
            A default callback handler for ports.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.DefaultOutputPortCallbackHandler.#ctor(MMALSharp.Ports.Outputs.IOutputPort,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.DefaultOutputPortCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.Outputs.IOutputPort"/>.</param>
            <param name="handler">The output port capture handler.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.DefaultOutputPortCallbackHandler.#ctor(MMALSharp.Ports.Outputs.IOutputPort,MMALSharp.Handlers.IOutputCaptureHandler,MMALSharp.Native.MMALEncoding)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.DefaultOutputPortCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.Outputs.IOutputPort"/>.</param>
            <param name="handler">The output port capture handler.</param>
            <param name="encodingType">The <see cref="T:MMALSharp.Native.MMALEncoding"/> type to restrict on.</param>
        </member>
        <member name="T:MMALSharp.Callbacks.DefaultPortCallbackHandler">
            <summary>
            A default callback handler for ports.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.DefaultPortCallbackHandler.#ctor(MMALSharp.Ports.IPort,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.DefaultPortCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.IPort"/>.</param>
            <param name="handler">The port capture handler.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.DefaultPortCallbackHandler.#ctor(MMALSharp.Ports.IPort,MMALSharp.Handlers.IOutputCaptureHandler,MMALSharp.Native.MMALEncoding)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.DefaultPortCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.IPort"/>.</param>
            <param name="handler">The port capture handler.</param>
            <param name="encodingType">The <see cref="T:MMALSharp.Native.MMALEncoding"/> type to restrict on.</param>
        </member>
        <member name="T:MMALSharp.Callbacks.FastImageOutputCallbackHandler">
            <summary>
            A callback handler specifically for rapid image capture from the camera's video port.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.FastImageOutputCallbackHandler.#ctor(MMALSharp.Ports.Outputs.IVideoPort,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.FastImageOutputCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.Outputs.IOutputPort"/>.</param>
            <param name="handler">The output port capture handler.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.FastImageOutputCallbackHandler.#ctor(MMALSharp.Ports.Outputs.IVideoPort,MMALSharp.Handlers.IOutputCaptureHandler,MMALSharp.Native.MMALEncoding)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.FastImageOutputCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.Outputs.IOutputPort"/>.</param>
            <param name="handler">The output port capture handler.</param>
            <param name="encoding">The <see cref="T:MMALSharp.Native.MMALEncoding"/> type to restrict on.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.FastImageOutputCallbackHandler.Callback(MMALSharp.IBuffer)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Callbacks.ICallbackHandler">
            <summary>
            Represents a callback handler.
            </summary>
        </member>
        <member name="T:MMALSharp.Callbacks.IConnectionCallbackHandler">
            <summary>
            Represents a connection callback handler.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.IConnectionCallbackHandler.WorkingConnection">
            <summary>
            The connection this callback handler is used with.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.IConnectionCallbackHandler.InputCallback(MMALSharp.IBuffer)">
            <summary>
            The input port callback function to carry out.
            </summary>
            <param name="buffer">The working buffer header.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.IConnectionCallbackHandler.OutputCallback(MMALSharp.IBuffer)">
            <summary>
            The output port callback function to carry out.
            </summary>
            <param name="buffer">The working buffer header.</param>
        </member>
        <member name="T:MMALSharp.Callbacks.IInputCallbackHandler">
            <summary>
            Represents a callback handler linked to an Input port.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.IInputCallbackHandler.CallbackWithResult(MMALSharp.IBuffer)">
            <summary>
            The callback function to carry out. Applies to input ports.
            </summary>
            <param name="buffer">The working buffer header.</param>
            <returns>A <see cref="T:MMALSharp.Handlers.ProcessResult"/> object based on the result of the callback function.</returns>
        </member>
        <member name="T:MMALSharp.Callbacks.InputPortCallbackHandler`2">
            <summary>
            Represents an input port callback handler.
            </summary>
            <typeparam name="TPort">The input port type linked to this callback handler.</typeparam>
            <typeparam name="TCaptureHandler">The capture handler type linked to this callback handler.</typeparam>
        </member>
        <member name="P:MMALSharp.Callbacks.InputPortCallbackHandler`2.EncodingType">
            <summary>
            The encoding type to restrict on.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.InputPortCallbackHandler`2.WorkingPort">
            <summary>
            The working port.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.InputPortCallbackHandler`2.CaptureHandler">
            <summary>
            The active capture handler.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.InputPortCallbackHandler`2.#ctor(`0,`1)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.InputPortCallbackHandler`2"/>.
            </summary>
            <param name="port">The working port.</param>
            <param name="handler">The input port capture handler.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.InputPortCallbackHandler`2.#ctor(`0,`1,MMALSharp.Native.MMALEncoding)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.InputPortCallbackHandler`2"/>.
            </summary>
            <param name="port">The working port.</param>
            <param name="handler">The input port capture handler.</param>
            <param name="encodingType">The <see cref="T:MMALSharp.Native.MMALEncoding"/> type to restrict on.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.InputPortCallbackHandler`2.CallbackWithResult(MMALSharp.IBuffer)">
            <summary>
            Responsible for feeding data into the input port.
            </summary>
            <param name="buffer">The working buffer.</param>
            <returns>A <see cref="T:MMALSharp.Handlers.ProcessResult"/> based on the result of the operation.</returns>
        </member>
        <member name="T:MMALSharp.Callbacks.IOutputCallbackHandler">
            <summary>
            Represents an output port callback handler.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.IOutputCallbackHandler.Callback(MMALSharp.IBuffer)">
            <summary>
            The callback function to carry out. Applies to output, control and connection ports.
            </summary>
            <param name="buffer">The working buffer header.</param>
        </member>
        <member name="T:MMALSharp.Callbacks.PortCallbackHandler`2">
            <summary>
            The base class for Output port callback handlers.
            </summary>
            <typeparam name="TPort">The port type.</typeparam>
            <typeparam name="TCaptureHandler">The capture handler type.</typeparam>
        </member>
        <member name="P:MMALSharp.Callbacks.PortCallbackHandler`2.EncodingType">
            <summary>
            The encoding type to restrict on.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.PortCallbackHandler`2.WorkingPort">
            <summary>
            The working port.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.PortCallbackHandler`2.CaptureHandler">
            <summary>
            The active capture handler.
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.PortCallbackHandler`2.#ctor(`0,`1)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.PortCallbackHandler`2"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.IPort"/>.</param>
            <param name="handler">The port capture handler.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.PortCallbackHandler`2.#ctor(`0,`1,MMALSharp.Native.MMALEncoding)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.PortCallbackHandler`2"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.IPort"/>.</param>
            <param name="handler">The port capture handler.</param>
            <param name="encodingType">The <see cref="T:MMALSharp.Native.MMALEncoding"/> type to restrict on.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.PortCallbackHandler`2.Callback(MMALSharp.IBuffer)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Callbacks.VideoOutputCallbackHandler">
            <summary>
            Represents a callback handler specifically for <see cref="T:MMALSharp.Components.MMALVideoEncoder"/> components.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.VideoOutputCallbackHandler.Split">
            <summary>
            Object containing properties used to determine when we should perform a file split.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.VideoOutputCallbackHandler.LastSplit">
            <summary>
            States the time we last did a file split.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.VideoOutputCallbackHandler.PrepareSplit">
            <summary>
            Property to indicate whether on the next callback we should split. This is used so that we can request an I-Frame from the camera
            and this can be applied on the next run to the newly created file.
            </summary>
        </member>
        <member name="P:MMALSharp.Callbacks.VideoOutputCallbackHandler.StoreMotionVectors">
            <summary>
            Property to indicate whether we should store motion vectors when processing image frames. 
            Motion vector data will be present when the buffer header equals "MMAL_BUFFER_HEADER_FLAG_CODECSIDEINFO".
            </summary>
        </member>
        <member name="M:MMALSharp.Callbacks.VideoOutputCallbackHandler.#ctor(MMALSharp.Ports.Outputs.IVideoPort,MMALSharp.Handlers.IVideoCaptureHandler,MMALSharp.Config.Split,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.VideoOutputCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.Outputs.IOutputPort"/>.</param>
            <param name="handler">The output port capture handler.</param>
            <param name="split">Configure to split into multiple files.</param>
            <param name="storeMotionVectors">Indicates whether we should store motion vectors.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.VideoOutputCallbackHandler.#ctor(MMALSharp.Ports.Outputs.IVideoPort,MMALSharp.Handlers.IVideoCaptureHandler,MMALSharp.Native.MMALEncoding,MMALSharp.Config.Split,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Callbacks.VideoOutputCallbackHandler"/>.
            </summary>
            <param name="port">The working <see cref="T:MMALSharp.Ports.Outputs.IOutputPort"/>.</param>
            <param name="handler">The output port capture handler.</param>
            <param name="encoding">The <see cref="T:MMALSharp.Native.MMALEncoding"/> type to restrict on.</param>
            <param name="split">Configure to split into multiple files.</param>
            <param name="storeMotionVectors">Indicates whether we should store motion vectors.</param>
        </member>
        <member name="M:MMALSharp.Callbacks.VideoOutputCallbackHandler.Callback(MMALSharp.IBuffer)">
            <summary>
            The callback function to carry out.
            </summary>
            <param name="buffer">The working buffer header.</param>
        </member>
        <member name="T:MMALSharp.Common.CircularBuffer`1">
            <inheritdoc/>
            <summary>
            Credit to @joaoportela - https://github.com/joaoportela/CircullarBuffer-CSharp
            Circular buffer.
            
            When writing to a full buffer:
            PushBack -> removes this[0] / Front()
            PushFront -> removes this[Size-1] / Back()
            
            this implementation is inspired by
            http://www.boost.org/doc/libs/1_53_0/libs/circular_buffer/doc/circular_buffer.html
            because I liked their interface.
            </summary>
        </member>
        <member name="F:MMALSharp.Common.CircularBuffer`1._start">
            <summary>
            The _start. Index of the first element in buffer.
            </summary>
        </member>
        <member name="F:MMALSharp.Common.CircularBuffer`1._end">
            <summary>
            The _end. Index after the last element in the buffer.
            </summary>
        </member>
        <member name="F:MMALSharp.Common.CircularBuffer`1._size">
            <summary>
            The _size. Buffer size.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.#ctor(System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:MMALSharp.Common.CircularBuffer`1"/> class.
            
            </summary>
            <param name='capacity'>
            Buffer capacity. Must be positive.
            </param>
            <param name='items'>
            Items to fill buffer with. Items length must be less than capacity.
            Suggestion: use Skip(x).Take(y).ToArray() to build this argument from
            any enumerable.
            </param>
        </member>
        <member name="P:MMALSharp.Common.CircularBuffer`1.Capacity">
            <summary>
            Maximum capacity of the buffer. Elements pushed into the buffer after
            maximum capacity is reached (IsFull = true), will remove an element.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.CircularBuffer`1.Size">
            <summary>
            Current buffer size (the number of elements that the buffer has).
            </summary>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.Front">
            <summary>
            Element at the front of the buffer - this[0].
            </summary>
            <returns>The value of the element of type T at the front of the buffer.</returns>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.Back">
            <summary>
            Element at the back of the buffer - this[Size - 1].
            </summary>
            <returns>The value of the element of type T at the back of the buffer.</returns>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.PushBack(`0)">
            <summary>
            Pushes a new element to the back of the buffer. Back()/this[Size-1]
            will now return this element.
            
            When the buffer is full, the element at Front()/this[0] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the back of the buffer</param>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.PushFront(`0)">
            <summary>
            Pushes a new element to the front of the buffer. Front()/this[0]
            will now return this element.
            
            When the buffer is full, the element at Back()/this[Size-1] will be 
            popped to allow for this new element to fit.
            </summary>
            <param name="item">Item to push to the front of the buffer</param>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.PopBack">
            <summary>
            Removes the element at the back of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.PopFront">
            <summary>
            Removes the element at the front of the buffer. Decreasing the 
            Buffer size by 1.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.ToArray">
            <summary>
            Copies the buffer contents to an array, according to the logical
            contents of the buffer (i.e. independent of the internal 
            order/contents)
            </summary>
            <returns>A new array with a copy of the buffer contents.</returns>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.Increment(System.Int32@)">
            <summary>
            Increments the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.Decrement(System.Int32@)">
            <summary>
            Decrements the provided index variable by one, wrapping
            around if necessary.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MMALSharp.Common.CircularBuffer`1.InternalIndex(System.Int32)">
            <summary>
            Converts the index in the argument to an index in <code>_buffer</code>
            </summary>
            <returns>
            The transformed index.
            </returns>
            <param name='index'>
            External index.
            </param>
        </member>
        <member name="T:MMALSharp.Common.CameraVersion">
            <summary>
            Represents a Raspberry Pi camera module model.
            </summary>
        </member>
        <member name="F:MMALSharp.Common.CameraVersion.OV5647">
            <summary>
            SUNNY OV5647.
            </summary>
        </member>
        <member name="F:MMALSharp.Common.CameraVersion.IMX219">
            <summary>
            Sony IMX219.
            </summary>
        </member>
        <member name="T:MMALSharp.Common.GenericExtensions">
            <summary>
            Provides extension methods for mathematical operations.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.GenericExtensions.Clamp``1(``0,``0,``0)">
            <summary>
            Returns a representation of this object that is in the specified range. Too large values will be dreceased to max; too small values will be increased to min.
            </summary>
            <typeparam name="T">The type of the value to be clamped.</typeparam>
            <param name="val">The value to be clamped.</param>
            <param name="min">The mininum inclusive value.</param>
            <param name="max">The maximum inclusive value.</param>
            <returns>A clamped representation of the initial value.</returns>
        </member>
        <member name="M:MMALSharp.Common.GenericExtensions.ToFloat(System.Byte)">
            <summary>
            Converts a <see cref="T:System.Byte"/> value to a <see cref="T:System.Single"/> value from 0.0 to 1.0.
            </summary>
            <param name="val">The byte value to convert.</param>
            <returns>The converted float value.</returns>
        </member>
        <member name="M:MMALSharp.Common.GenericExtensions.ToByte(System.Single)">
            <summary>
            Converts a <see cref="T:System.Single"/> value (0.0 to 1.0) to a <see cref="T:System.Byte"/> value from 0 to 255.
            </summary>
            <param name="val">The float value to convert.</param>
            <remarks>https://stackoverflow.com/questions/1914115/converting-color-value-from-float-0-1-to-byte-0-255</remarks>
            <returns>The converted byte value.</returns>
        </member>
        <member name="T:MMALSharp.Common.IImageContext">
            <summary>
            Represents a context to hold metadata for image frames.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.IImageContext.Data">
            <summary>
            The frame data.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.IImageContext.Raw">
            <summary>
            Indicator if working with raw image data.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.IImageContext.Resolution">
            <summary>
            The frame resolution.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.IImageContext.PixelFormat">
            <summary>
            The frame pixel format.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.IImageContext.StoreFormat">
            <summary>
            The frame encoding format.
            </summary>
        </member>
        <member name="T:MMALSharp.Common.ImageContext">
            <summary>
            Represents a context to hold metadata for image frames.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.ImageContext.Data">
            <summary>
            The working data.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.ImageContext.Raw">
            <summary>
            Flag to indicate whether image frame is raw.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.ImageContext.Resolution">
            <summary>
            The resolution of the frame we're processing.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.ImageContext.PixelFormat">
            <summary>
            The pixel format of the frame we're processing.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.ImageContext.StoreFormat">
            <summary>
            The image format to store the processed data in.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.ImageContext.#ctor(MMALSharp.Common.Utility.Resolution)">
            <summary>
            Create a new instance of <see cref="T:MMALSharp.Common.ImageContext"/> with the provided resolution. Assumes RGB24 and stores result to JPEG format when using image convolution techniques.
            </summary>
            <param name="res">The resolution of the image to process.</param>
        </member>
        <member name="M:MMALSharp.Common.ImageContext.#ctor(MMALSharp.Common.Utility.Resolution,System.Drawing.Imaging.PixelFormat,System.Boolean)">
            <summary>
            Create a new instance of <see cref="T:MMALSharp.Common.ImageContext"/> with the provided resolution. Stores result to JPEG format when using image convolution techniques.
            </summary>
            <param name="res">The resolution of the image to process.</param>
            <param name="format">The pixel format of the data to process.</param>
            <param name="raw">Image frame is raw data.</param>
        </member>
        <member name="M:MMALSharp.Common.ImageContext.#ctor(MMALSharp.Common.Utility.Resolution,System.Drawing.Imaging.PixelFormat,System.Boolean,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Create a new instance of <see cref="T:MMALSharp.Common.ImageContext"/> with the provided resolution.
            </summary>
            <param name="res">The resolution of the image to process.</param>
            <param name="format">The pixel format of the data to process.</param>
            <param name="raw">Image frame is raw data.</param>
            <param name="storeFormat">Image format to store processed data in.</param>
        </member>
        <member name="T:MMALSharp.Common.Utility.CancellationTokenExtensions">
            <summary>
            This class provides extensions for <see cref="T:System.Threading.CancellationToken"/>s.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.Utility.CancellationTokenExtensions.AsTask(System.Threading.CancellationToken)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> whose state will be set to <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/> when this <see cref="T:System.Threading.CancellationToken"/> is canceled.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:MMALSharp.Common.Utility.MMALColor">
            <summary>
            Provides useful methods to convert from various colour spaces to RGB.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.FromCIE1960(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> structure based from CIE 1960 floating point values.
            See: https://en.wikipedia.org/wiki/CIE_1960_color_space
            </summary>
            <param name="u">The chrominance U value.</param>
            <param name="v">The chrominance V value.</param>
            <param name="y">The CIE XYZ Y tristimulus value.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure representing the CIE 1960 parameter values.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.RGBToCIE1960(System.Drawing.Color)">
            <summary>
            Converts a RGB <see cref="T:System.Drawing.Color"/> structure to the CIE 1960 uniform colour space.
            See: https://en.wikipedia.org/wiki/CIE_1960_color_space        
            </summary>
            <param name="c">The <see cref="T:System.Drawing.Color"/> structure.</param>        
            <returns>A 2 pair <see cref="T:System.Tuple"/> of floating point values representing the RGB conversion to CIE 1960.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.RGBToCIEXYZ(System.Drawing.Color)">
            <summary>
            Converts a RGB <see cref="T:System.Drawing.Color"/> structure to the CIE XYZ colour space.
            See: https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)
            </summary>
            <param name="c">The <see cref="T:System.Drawing.Color"/> structure.</param>        
            <returns>A 3 pair <see cref="T:System.Tuple"/> of floating point values representing the RGB conversion to CIE XYZ.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.RGBToYIQ(System.Drawing.Color)">
            <summary>
            Converts a RGB <see cref="T:System.Drawing.Color"/> structure to the YIQ colour space.
            See: https://en.wikipedia.org/wiki/YIQ
            Math conversion from: https://github.com/python/cpython/blob/2.7/Lib/colorsys.py
            </summary>
            <param name="c">The <see cref="T:System.Drawing.Color"/> structure.</param>        
            <returns>A 3 pair <see cref="T:System.Tuple"/> of floating point values representing the RGB conversion to YIQ.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.RGBToHLS(System.Drawing.Color)">
            <summary>
            Converts a RGB <see cref="T:System.Drawing.Color"/> structure to the HLS colour space.
            See: https://en.wikipedia.org/wiki/HSL_and_HSV
            Math conversion from: https://github.com/python/cpython/blob/2.7/Lib/colorsys.py
            </summary>
            <param name="c">The <see cref="T:System.Drawing.Color"/> structure.</param>        
            <returns>A 3 pair <see cref="T:System.Tuple"/> of floating point values representing the RGB conversion to HLS.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.RGBToHSV(System.Drawing.Color)">
            <summary>
            Converts a RGB <see cref="T:System.Drawing.Color"/> structure to the HSV colour space.
            See: https://en.wikipedia.org/wiki/HSL_and_HSV
            Math conversion from: https://github.com/python/cpython/blob/2.7/Lib/colorsys.py
            </summary>
            <param name="c">The <see cref="T:System.Drawing.Color"/> structure.</param>        
            <returns>A 3 pair <see cref="T:System.Tuple"/> of floating point values representing the RGB conversion to HSV.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.RGBToYUV(System.Drawing.Color)">
            <summary>
            Converts a RGB <see cref="T:System.Drawing.Color"/> structure to the YUV colour space.
            See: https://en.wikipedia.org/wiki/YUV#Converting_between_Y%E2%80%B2UV_and_RGB
            </summary>
            <param name="c">The <see cref="T:System.Drawing.Color"/> structure.</param>        
            <returns>A 3 pair <see cref="T:System.Tuple"/> of floating point values representing the RGB conversion to YUV.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.RGBToYUVBytes(System.Drawing.Color)">
            <summary>
            Converts a RGB <see cref="T:System.Drawing.Color"/> structure to the YUV colour space as byte values.
            See: https://en.wikipedia.org/wiki/YUV#Converting_between_Y%E2%80%B2UV_and_RGB
            </summary>
            <param name="c">The <see cref="T:System.Drawing.Color"/> structure.</param>
            <returns>A 3 pair <see cref="T:System.Tuple"/> of byte values representing the RGB conversion to YUV.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.FromYUV(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> structure based from YUV floating point values.
            See: https://en.wikipedia.org/wiki/YUV#Conversion_to/from_RGB
            </summary>
            <param name="y">The luma value.</param>
            <param name="u">The chrominance U value.</param>
            <param name="v">The chrominance V value.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure representing the YUV parameter values.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.FromYUVBytes(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> structure based from YUV byte values.
            See: https://en.wikipedia.org/wiki/YUV#Converting_between_Y%E2%80%B2UV_and_RGB
            </summary>
            <param name="y">The luma value.</param>
            <param name="u">The chrominance U value.</param>
            <param name="v">The chrominance V value.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure representing the YUV parameter values.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.FromYIQ(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> structure based from YIQ floating point values.
            See: https://en.wikipedia.org/wiki/YIQ
            Math conversion from: https://github.com/python/cpython/blob/2.7/Lib/colorsys.py
            </summary>
            <param name="y">The luma value (between 0 - 1).</param>
            <param name="i">The chrominance I value (between -1 - 1).</param>
            <param name="q">The chrominance Q value (between -1 - 1).</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure representing the YIQ parameter values.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.FromHLS(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> structure based from HLS floating point values.
            See: https://en.wikipedia.org/wiki/HSL_and_HSV
            Math conversion from: https://github.com/python/cpython/blob/2.7/Lib/colorsys.py
            </summary>
            <param name="h">The hue value.</param>
            <param name="l">The lightness value.</param>
            <param name="s">The saturation value.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure representing the HLS parameter values.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.FromHSV(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> structure based from HSV floating point values.
            See: https://en.wikipedia.org/wiki/HSL_and_HSV
            Math conversion from: https://github.com/python/cpython/blob/2.7/Lib/colorsys.py
            </summary>
            <param name="h">The hue value.</param>
            <param name="s">The saturation value.</param>
            <param name="v">The 'value' (lightness) value.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure representing the HSV parameter values.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.FromCieXYZ(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> structure based from CIEXYZ floating point values. Assumes D65 illuminant.
            See: https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB) 
            </summary>
            <param name="x">The chrominance X value (0 &lt;= x &lt;= 0.9505).</param>
            <param name="y">The luminance Y value (0 &lt;= y &lt;= 1.0000).</param>
            <param name="z">The chrominance Z value (0 &lt;= z &lt;= 1.0890).</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure representing the CIEXYZ parameter values.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.FromCieLab(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> structure based from CIELab floating point values.
            See: https://en.wikipedia.org/wiki/Lab_color_space#Forward_transformation
            </summary>
            <param name="l">The lightness L value.</param>
            <param name="a">The chrominance A value.</param>
            <param name="b">The chrominance B value.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure representing the CIELab parameter values.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.MMALColor.FromCieLUV(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:System.Drawing.Color"/> structure based from CIELUV floating point values.
            See: https://en.wikipedia.org/wiki/CIELUV
            </summary>
            <param name="l">The lightness L value.</param>
            <param name="u">The chrominance U value.</param>
            <param name="v">The chrominance V value.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> structure representing the CIELUV parameter values.</returns>
        </member>
        <member name="T:MMALSharp.Common.Utility.Helpers">
            <summary>
            Provides general helper methods.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.Utility.Helpers.ConvertBytesToMegabytes(System.Int64)">
            <summary>
            Converts the count of bytes to megabytes in the format "0.00mb".
            </summary>
            <param name="bytes">The number of bytes.</param>
            <returns>A string representing the byte-megabyte conversion.</returns>
        </member>
        <member name="T:MMALSharp.Common.Utility.MMALLog">
            <summary>
            Provides static access to the global logger.
            Credit to @snakefoot - https://github.com/NLog/NLog.Extensions.Logging/issues/379#issuecomment-569544196
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.MMALLog.Logger">
            <summary>
            Gets the global logger component.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.MMALLog.LoggerFactory">
            <summary>
            Responsible for getting/setting the working LoggerFactory.
            </summary>
        </member>
        <member name="T:MMALSharp.Common.Utility.Resolution">
            <summary>
            Exposes properties for width and height. This class is used to specify a resolution for camera and ports.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.Width">
            <summary>
            The width of the <see cref="T:MMALSharp.Common.Utility.Resolution"/> object.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.Height">
            <summary>
            The height of the <see cref="T:MMALSharp.Common.Utility.Resolution"/> object.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.Utility.Resolution.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Common.Utility.Resolution"/> class with the specified width and height.
            </summary>
            <param name="width">The width to assign this resolution with.</param>
            <param name="height">The height to assign this resolution with.</param>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As8MPixel">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 3264 pixels high and 2448 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As7MPixel">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 3072 pixels high and 2304 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As6MPixel">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 3032 pixels high and 2008 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As5MPixel">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 2560 pixels high and 1920 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As4MPixel">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 2240 pixels high and 1680 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As3MPixel">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 2048 pixels high and 1536 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As2MPixel">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 1600 pixels high and 1200 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As1MPixel">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 1280 pixels high and 960 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As03MPixel">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 640 pixels high and 480 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As720p">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 1280 pixels high and 720 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As1080p">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 1920 pixels high and 1080 pixels wide.
            </summary>
        </member>
        <member name="P:MMALSharp.Common.Utility.Resolution.As1440p">
            <summary>
            Creates a new <see cref="T:MMALSharp.Common.Utility.Resolution"/> object with 2560 pixels high and 1440 pixels wide.
            </summary>
        </member>
        <member name="M:MMALSharp.Common.Utility.Resolution.CompareTo(MMALSharp.Common.Utility.Resolution)">
            <summary>
            Compares this Resolution instance against the Resolution passed in. 
            </summary>
            <param name="res">The resolution we are comparing to.</param>
            <returns>0 if width and height are same. 1 if source width is greater than target. -1 if target greater than source.</returns>
        </member>
        <member name="M:MMALSharp.Common.Utility.Resolution.Pad(System.Int32,System.Int32)">
            <summary>
            Pads a <see cref="T:MMALSharp.Common.Utility.Resolution"/> object to the desired width/height.
            </summary>
            <param name="width">The width to be padded to.</param>
            <param name="height">The height to be padded to.</param>
            <returns>A new <see cref="T:MMALSharp.Common.Utility.Resolution"/> struct, padded to the required width/height.</returns>
        </member>
        <member name="T:MMALSharp.Components.EncoderComponents.IEncoder">
            <summary>
            Represents an encoder component.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.EncoderComponents.IImageDecoder">
            <summary>
            Represents a image decoder component.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.EncoderComponents.IImageEncoder">
            <summary>
            Represents an image encoder component.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.EncoderComponents.IImageEncoder.RawBayer">
            <summary>
            Flag to return raw Bayer metadata with JPEG frames.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.EncoderComponents.IImageEncoder.UseExif">
            <summary>
            Flag to add EXIF tags to image frames.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.EncoderComponents.IImageEncoder.ExifTags">
            <summary>
            An array of user provided EXIF tags.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.EncoderComponents.IImageEncoder.ContinuousCapture">
            <summary>
            When enabled and if configured, image frames will be quickly processed by the camera's video port.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.EncoderComponents.IImageEncoder.JpegThumbnailConfig">
            <summary>
            The JPEG thumbnail configuration object.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.EncoderComponents.IVideoDecoder">
            <summary>
            Represents a video decoder component.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.EncoderComponents.IVideoEncoder">
            <summary>
            Represents a video encoder component.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.IMMALConvert">
            <summary>
            Supports converting user provided image data.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IMMALConvert.Convert(System.Int32)">
            <summary>
            Encodes/decodes user provided image data.
            </summary>
            <param name="outputPort">The output port to begin processing on.</param>
        </member>
        <member name="T:MMALSharp.Components.MMALEncoderBase">
            <summary>
            Represents a base class for all encoder components.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALEncoderBase.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Components.MMALEncoderBase"/>.
            </summary>
            <param name="encoderName">The name of the encoder component.</param>
        </member>
        <member name="T:MMALSharp.Components.MMALImageDecoder">
            <summary>
            A conformant image decode component, which takes encoded still images
            in various compressed formats on its input port, and decodes the image
            into raw pixels which are emitted on the output port.
            https://github.com/raspberrypi/firmware/blob/master/documentation/ilcomponents/image_decode.html
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALImageDecoder.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Components.MMALImageDecoder"/>.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.MMALImageEncoder">
            <summary>
            A conformant image encode component, which takes raw pixels on its
            input port, and encodes the image into various compressed formats on
            the output port.
            https://github.com/raspberrypi/firmware/blob/master/documentation/ilcomponents/image_encode.html
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALImageEncoder.MaxExifPayloadLength">
            <summary>
            Represents the maximum length of a formatted EXIF tag. This includes the tag's key, an equals sign, the tag's value and a null char.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALImageEncoder.RawBayer">
            <summary>
            When enabled, raw bayer metadata will be included in JPEG still captures.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALImageEncoder.UseExif">
            <summary>
            When enabled, EXIF metadata will be included in image stills.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALImageEncoder.ExifTags">
            <summary>
            Custom list of user defined EXIF metadata.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALImageEncoder.ContinuousCapture">
            <summary>
            If true, this component will be configured to process rapidly captured frames from the camera's video port.
            Note: The component pipeline must be configured as such. 
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALImageEncoder.JpegThumbnailConfig">
            <summary>
            Configuration for JPEG thumbnail embedding.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALImageEncoder.#ctor(System.Boolean,System.Boolean,System.Boolean,MMALSharp.Config.JpegThumbnail,MMALSharp.Config.ExifTag[])">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Components.MMALImageEncoder"/> class with the specified handler.
            </summary>
            <param name="rawBayer">Specifies whether to include raw bayer image data.</param>
            <param name="useExif">Specifies whether any EXIF tags should be used.</param>
            <param name="continuousCapture">Configure component for rapid capture mode.</param>
            <param name="thumbnailConfig">Configures the embedded JPEG thumbnail.</param>
            <param name="exifTags">A collection of custom EXIF tags.</param>
        </member>
        <member name="M:MMALSharp.Components.MMALImageEncoder.ConfigureOutputPort(System.Int32,MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IOutputCaptureHandler)">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Components.MMALImageEncoder.AddExifTags(MMALSharp.Config.ExifTag[])">
            <summary>
            Adds EXIF tags to the resulting image.
            </summary>
            <param name="exifTags">A list of user defined EXIF tags.</param>
        </member>
        <member name="M:MMALSharp.Components.MMALImageEncoder.AddExifTag(MMALSharp.Config.ExifTag)">
            <summary>
            Provides a facility to add an EXIF tag to the image. 
            </summary>
            <param name="exifTag">The EXIF tag to add to.</param>
        </member>
        <member name="T:MMALSharp.Components.MMALVideoDecoder">
            <summary>
            This conformant component accepts encoded video in a number of
            different formats, and decodes it to raw YUV frames.
            https://github.com/raspberrypi/firmware/blob/master/documentation/ilcomponents/video_decode.html
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALVideoDecoder.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Components.MMALVideoDecoder"/>.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.MMALVideoEncoder">
            <summary>
            This component accepts raw video frames and compresses them, emitting
            encoded video.It can accept YUV420 packed planar format, providing
            the slice height is the same as the frame height so a single buffer is
            a full frame.To gain efficiency it also accepts a proprietary image
            format from the camera component.
            https://github.com/raspberrypi/firmware/blob/master/documentation/ilcomponents/video_encode.html
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALVideoEncoder.MaxBitrateMJPEG">
            <summary>
            Signifies the max bitrate supported for MJPEG (25Mbits/s)
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALVideoEncoder.MaxBitrateLevel4">
            <summary>
            Signifies the max bitrate supported for H.264 Level 4 (25Mbits/s)
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALVideoEncoder.MaxBitrateLevel42">
            <summary>
            Signifies the max bitrate supported for H.264 Level 4.2 (62.5Mbits/s)
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALVideoEncoder.Quality">
            <summary>
            Quality of the encoder output. Valid property for both H264 and MJPEG encoders.
            H264 encoding - High: 10 Low: 40 Average: 20-25.
            MJPEG encoding - Uses same quality scale as JPEG encoder (Lowest: 1  Highest: 100).
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALVideoEncoder.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Components.MMALVideoEncoder"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALVideoEncoder.ConfigureOutputPort(System.Int32,MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IOutputCaptureHandler)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Components.VideoLevel">
            <summary>
            A class to describe a H.264 level mode.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.VideoLevel.Level">
            <summary>
            The MMAL level enum.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.VideoLevel.MacroblocksPerSecLimit">
            <summary>
            The max macroblocks per second limit for this level.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.VideoLevel.MacroblocksLimit">
            <summary>
            The max macroblocks limit for this level.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.VideoLevel.Maxbitrate">
            <summary>
            The max bitrate for this level.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.VideoLevel.#ctor(MMALSharp.Native.MMALParametersVideo.MMAL_VIDEO_LEVEL_T,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Components.VideoLevel"/>.
            </summary>
            <param name="level">The MMAL level enum.</param>
            <param name="mcbps">The max macroblocks per second value.</param>
            <param name="mcb">The max macroblocks value.</param>
            <param name="bitrate">The max bitrate value.</param>
        </member>
        <member name="T:MMALSharp.Components.ICameraComponent">
            <summary>
            Represents a camera component.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.ICameraComponent.PreviewPort">
            <summary>
            The camera's preview port.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.ICameraComponent.VideoPort">
            <summary>
            The camera's video port.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.ICameraComponent.StillPort">
            <summary>
            The camera's still port.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.ICameraComponent.CameraInfo">
            <summary>
            The managed camera info component object.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.ICameraComponent.Initialise(MMALSharp.Handlers.IOutputCaptureHandler,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Call to initialise the camera component.
            </summary>
            <param name="stillCaptureHandler">A capture handler when capturing raw image frames from the camera's still port (no encoder attached).</param>
            <param name="videoCaptureHandler">A capture handler when capturing raw video from the camera's video port (no encoder attached).</param>
        </member>
        <member name="T:MMALSharp.Components.ICameraInfoComponent">
            <summary>
            Represents a camera info component.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.ICameraInfoComponent.SensorName">
            <summary>
            The camera sensor name.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.ICameraInfoComponent.MaxWidth">
            <summary>
            The camera's max operating width.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.ICameraInfoComponent.MaxHeight">
            <summary>
            The camera's max operating height.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.IComponent">
            <summary>
            Represents a component.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.IComponent.Control">
            <summary>
            The component's control port.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.IComponent.Inputs">
            <summary>
            The list of input ports.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.IComponent.Outputs">
            <summary>
            The list of output ports.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.IComponent.Clocks">
            <summary>
            The list of clock ports.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.IComponent.Ports">
            <summary>
            The list of all ports.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.IComponent.Name">
            <summary>
            The name of the component.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.IComponent.Enabled">
            <summary>
            Flag whether this component is enabled.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.IComponent.ForceStopProcessing">
            <summary>
            Flag to force the component to stop processing.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IComponent.EnableConnections">
            <summary>
            Call to enable connections.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IComponent.DisableConnections">
            <summary>
            Call to disable connections.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IComponent.PrintComponent">
            <summary>
            Call to print metadata for this component.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IComponent.AcquireComponent">
            <summary>
            Acquire a reference on a component. Acquiring a reference on a component will prevent a component from being destroyed until the 
            acquired reference is released (by a call to mmal_component_destroy). References are internally counted so all acquired references 
            need a matching call to release them.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IComponent.ReleaseComponent">
            <summary>
            Release a reference on a component Release an acquired reference on a component. Triggers the destruction of the component 
            when the last reference is being released.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IComponent.DestroyComponent">
            <summary>
            Destroy a previously created component Release an acquired reference on a component. 
            Only actually destroys the component when the last reference is being released.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IComponent.EnableComponent">
            <summary>
            Enable processing on a component.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IComponent.DisableComponent">
            <summary>
            Disable processing on a component.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IComponent.CleanPortPools">
            <summary>
            Helper method to destroy any port pools still in action. Failure to do this will cause MMAL to block indefinitely.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.IDownstreamComponent">
            <summary>
            Represents a downstream component, i.e. a component that can be connected to.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.IDownstreamComponent.ProcessingPorts">
            <summary>
            The ports which are processing data on this component.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.IDownstreamComponent.ConfigureInputPort(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.IPort,MMALSharp.Handlers.IInputCaptureHandler)">
            <summary>
            Configures the input port.
            </summary>
            <param name="config">The port configuration object.</param>
            <param name="copyPort">The port to copy from.</param>
            <param name="handler">The capture handler to use with this port.</param>
            <returns>This component.</returns>
        </member>
        <member name="M:MMALSharp.Components.IDownstreamComponent.ConfigureInputPort(MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IInputCaptureHandler)">
            <summary>
            Call to configure changes on a downstream component input port.
            </summary>
            <param name="config">User provided port configuration object.</param>
            <param name="handler">The input port capture handler. This will be non-null if this port's component is the 1st component in the 
            pipeline and you are feeding data to it directly from a <see cref="T:MMALSharp.Handlers.IInputCaptureHandler"/>. If this port is connected to by another component then leave this parameter null.
            </param>
            <returns>This <see cref="T:MMALSharp.Components.MMALDownstreamComponent"/>.</returns>
        </member>
        <member name="M:MMALSharp.Components.IDownstreamComponent.ConfigureInputPort``1(MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IInputCaptureHandler)">
            <summary>
            Configures the input port. In addition, it will create a new instance of the port
            in the generic constraint and assign it to the component.
            </summary>
            <typeparam name="TPort">The input port constraint.</typeparam>
            <param name="config">The port configuration object.</param>
            <param name="handler">The input port capture handler. This will be non-null if this port's component is the 1st component in the 
            pipeline and you are feeding data to it directly from a <see cref="T:MMALSharp.Handlers.IInputCaptureHandler"/>. If this port is connected to by another component then leave this parameter null.
            </param>
            <returns>This component.</returns>
        </member>
        <member name="M:MMALSharp.Components.IDownstreamComponent.ConfigureOutputPort(MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Configures the output port.
            </summary>
            <param name="config">The port configuration object.</param>
            <param name="handler">The output port capture handler.</param>
            <returns>This component.</returns>
        </member>
        <member name="M:MMALSharp.Components.IDownstreamComponent.ConfigureOutputPort(System.Int32,MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Configures the output port.
            </summary>
            <param name="outputPort">The output port number.</param>
            <param name="config">The port configuration object.</param>
            <param name="handler">The capture handler to use with this port.</param>
            <returns>This component.</returns>
        </member>
        <member name="M:MMALSharp.Components.IDownstreamComponent.ConfigureOutputPort``1(System.Int32,MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Configures the output port. In addition, it will create a new instance of the port
            in the generic constraint and assign it to the component.
            </summary>
            <typeparam name="TPort">The output port constraint.</typeparam>
            <param name="outputPort">The output port number.</param>
            <param name="config">The port configuration object.</param>
            <param name="handler">The capture handler to use with this port.</param>
            <returns>This component.</returns>
        </member>
        <member name="T:MMALSharp.Components.IDownstreamHandlerComponent">
            <summary>
            Represents a downstream handler component.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.MMALSensorMode">
            <summary>
            Defines a set of sensor modes that allow to configure how the raw image data is sent to the GPU before further processing. See wiki on GitHub for more information.
            </summary>
            <remarks>
            https://github.com/techyian/MMALSharp/wiki/OmniVision-OV5647-Camera-Module
            https://github.com/techyian/MMALSharp/wiki/Sony-IMX219-Camera-Module
            https://www.raspberrypi.org/forums/viewtopic.php?t=85714
            </remarks>
        </member>
        <member name="F:MMALSharp.Components.MMALSensorMode.Mode0">
            <summary>
            Automatic mode (default).
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALSensorMode.Mode1">
            <summary>
            1080p cropped mode.
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALSensorMode.Mode2">
            <summary>
            4:3 ratio.
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALSensorMode.Mode3">
            <summary>
            4:3 ratio (low FPS with OV5647).
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALSensorMode.Mode4">
            <summary>
            2x2 binned 4:3.
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALSensorMode.Mode5">
            <summary>
            2x2 binned 16:9.
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALSensorMode.Mode6">
            <summary>
            High FPS. Ratio and resolution depend on camera module.
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALSensorMode.Mode7">
            <summary>
            VGA high FPS.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.MMALCameraComponent">
            <summary>
            Represents a camera component.
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALCameraComponent.MMALCameraPreviewPort">
            <summary>
            The output port number of the camera's preview port.
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALCameraComponent.MMALCameraVideoPort">
            <summary>
            The output port number of the camera's video port.
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALCameraComponent.MMALCameraStillPort">
            <summary>
            The output port number of the camera's still port.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALCameraComponent.PreviewPort">
            <summary>
            Managed reference to the Preview port of the camera.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALCameraComponent.VideoPort">
            <summary>
            Managed reference to the Video port of the camera.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALCameraComponent.StillPort">
            <summary>
            Managed reference to the Still port of the camera.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALCameraComponent.CameraInfo">
            <summary>
            Camera Info component. This is used to provide detailed info about the camera itself.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALCameraComponent.#ctor">
            <summary>
            Initialises a new MMALCameraComponent.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALCameraComponent.Dispose">
            <summary>
            Disposes of the current component, and frees any native resources still in use by it.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALCameraComponent.PrintComponent">
            <summary>
            Prints a summary of the ports and the resolution associated with this component to the console.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALCameraComponent.Initialise(MMALSharp.Handlers.IOutputCaptureHandler,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Call to initialise the camera component.
            </summary>
            <param name="stillCaptureHandler">A capture handler when capturing raw image frames from the camera's still port (no encoder attached).</param>
            <param name="videoCaptureHandler">A capture handler when capturing raw video from the camera's video port (no encoder attached).</param>
        </member>
        <member name="M:MMALSharp.Components.MMALCameraComponent.InitialisePreview">
            <summary>
            Initialises the camera's preview component using the user defined width/height for the video port.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALCameraComponent.InitialiseVideo(MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Initialises the camera's video port using the width, height and encoding as specified by the user.
            </summary>
            <param name="handler">The capture handler to associate with this port.</param>
        </member>
        <member name="M:MMALSharp.Components.MMALCameraComponent.InitialiseStill(MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Initialises the camera's still port using the width, height and encoding as specified by the user.
            </summary>
            <param name="handler">The capture handler to associate with the still port.</param>
        </member>
        <member name="T:MMALSharp.Components.MMALCameraInfoComponent">
            <summary>
            Represents a Camera Info component.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALCameraInfoComponent.SensorName">
            <summary>
            The sensor name of the camera.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALCameraInfoComponent.MaxWidth">
            <summary>
            Maximum width supported by the sensor.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALCameraInfoComponent.MaxHeight">
            <summary>
            Maximum height supported by the sensor.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALCameraInfoComponent.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Components.MMALCameraInfoComponent"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALCameraInfoComponent.PrintComponent">
            <summary>
            Prints the name of this component to the console.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.MMALDownstreamComponent">
            <summary>
            Represents a downstream component. A downstream component is a component that can have data passed to it from further up the component
            hierarchy.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALDownstreamComponent.ProcessingPorts">
            <summary>
            A list of working ports which are processing data in the component pipeline.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamComponent.#ctor(System.String)">
            <summary>
            Creates a new instance of a Downstream component.
            </summary>
            <param name="name">The name of the component.</param>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamComponent.ConfigureInputPort(MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IInputCaptureHandler)">
            <summary>
            Call to configure changes on a downstream component input port.
            </summary>
            <param name="config">User provided port configuration object.</param>
            <param name="handler">The input port capture handler. This will be non-null if this port's component is the 1st component in the 
            pipeline and you are feeding data to it directly from a <see cref="T:MMALSharp.Handlers.IInputCaptureHandler"/>. If this port is connected to by another component then leave this parameter null.
            </param>
            <returns>This <see cref="T:MMALSharp.Components.MMALDownstreamComponent"/>.</returns>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamComponent.ConfigureInputPort(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.IPort,MMALSharp.Handlers.IInputCaptureHandler)">
            <summary>
            Configures a specific input port on a downstream component. This method will perform a shallow copy of the output
            port it is to be connected to.
            </summary>
            <param name="config">User provided port configuration object.</param>
            <param name="copyPort">The output port we are copying format data from.</param>
            <param name="handler">The input port capture handler. This will be non-null if this port's component is the 1st component in the 
            pipeline and you are feeding data to it directly from a <see cref="T:MMALSharp.Handlers.IInputCaptureHandler"/>. If this port is connected to by another component then leave this parameter null.
            </param>
            <returns>This <see cref="T:MMALSharp.Components.MMALDownstreamComponent"/>.</returns>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamComponent.ConfigureInputPort``1(MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IInputCaptureHandler)">
            <summary>
            Call to configure changes on a downstream component input port.
            </summary>
            <typeparam name="TPort">Input port type.</typeparam>
            <param name="config">User provided port configuration object.</param>
            <param name="handler">The input port capture handler.</param>
            <returns>This <see cref="T:MMALSharp.Components.MMALDownstreamComponent"/>.</returns>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamComponent.ConfigureOutputPort(MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Call to configure changes on the first downstream component output port.
            </summary>
            <param name="config">User provided port configuration object.</param>
            <param name="handler">The output port capture handler.</param>
            <returns>This <see cref="T:MMALSharp.Components.MMALDownstreamComponent"/>.</returns>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamComponent.ConfigureOutputPort(System.Int32,MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Call to configure changes on a downstream component output port.
            </summary>
            <param name="outputPort">The output port number to configure.</param>
            <param name="config">User provided port configuration object.</param>
            <param name="handler">The output port capture handler.</param>
            <returns>This <see cref="T:MMALSharp.Components.MMALDownstreamComponent"/>.</returns>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamComponent.ConfigureOutputPort``1(System.Int32,MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Call to configure changes on a downstream component output port.
            </summary>
            <typeparam name="TPort">Output port type.</typeparam>
            <param name="outputPort">The output port number to configure.</param>
            <param name="config">User provided port configuration object.</param>
            <param name="handler">The output port capture handler.</param>
            <returns>This <see cref="T:MMALSharp.Components.MMALDownstreamComponent"/>.</returns>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamComponent.Dispose">
            <summary>
            Disposes of the current component, closes all connections and frees all associated unmanaged resources.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamComponent.ClosePipelineConnections">
            <summary>
            Responsible for closing and destroying any connections associated with this component prior to disposing.
            </summary>
        </member>
        <member name="T:MMALSharp.Components.MMALDownstreamHandlerComponent">
            <summary>
            Base class for all downstream components which support capture handlers.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALDownstreamHandlerComponent.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Components.MMALDownstreamHandlerComponent"/>.
            </summary>
            <param name="name">The name of the component.</param>
        </member>
        <member name="T:MMALSharp.Components.MMALIspComponent">
            <summary>
            This component wraps the ISP (Image Sensor Processor) hardware block to
            offer hardware accelerated format conversion and resizing.
            It has one input port taking Bayer, YUV or RGB images in numerous different formats.
            It has two output ports:
            Port 361 supports various RGB and YUV formats.
            Port 362 is off the low res resizer which can only downscale.Due to this
            port 362 must be at a lower resolution to port 361. If set to a higher resolution
            then the port will effectively be disabled and no ouput produced.It also doesn't have
            the colour conversion block, and so only supports YUV formats.
            https://github.com/raspberrypi/firmware/blob/master/documentation/ilcomponents/isp.html 
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALIspComponent.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Components.MMALIspComponent"/> class that can be used to change the size
            and the pixel format of resulting frames. 
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALIspComponent.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Components.MMALIspComponent"/> class that can be used to change the size
            and the pixel format of resulting frames. 
            </summary>
            <param name="outputPortType">The user defined output port type.</param>
        </member>
        <member name="T:MMALSharp.Components.MMALRendererBase">
            <summary>
            Represents a base class for all renderer components.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALRendererBase.#ctor(System.String)">
            <summary>
            Create a new instance of a renderer component.
            </summary>
            <param name="name">The name of the component.</param>
        </member>
        <member name="T:MMALSharp.Components.MMALNullSinkComponent">
            <summary>
            Represents a Null Sink component. This component should be used when a preview component is not required in order to measure exposure.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALNullSinkComponent.#ctor">
            <summary>
            Creates a new instance of a Null Sink renderer component. This component is intended to be connected to the Camera's preview port
            and is used to measure exposure. No video preview is available with this renderer.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALNullSinkComponent.PrintComponent">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Components.MMALVideoRenderer">
            <summary>
            Represents a Video Renderer component.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALVideoRenderer.Configuration">
            <summary>
            Gets the configuration for this video renderer. Call <see cref="M:MMALSharp.Components.MMALVideoRenderer.ConfigureRenderer"/> to apply changes.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALVideoRenderer.Overlays">
            <summary>
            Gets a list of overlay renderers connected to this video renderer.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALVideoRenderer.#ctor">
            <summary>
            Creates a new instance of a Video renderer component. This component is intended to be connected to the Camera's preview port
            and is used to measure exposure. It also produces real-time video to the Pi's HDMI output from the camera.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALVideoRenderer.#ctor(MMALSharp.Config.PreviewConfiguration)">
            <summary>
            Creates a new instance of a Video renderer component. This component is intended to be connected to the Camera's preview port
            and is used to measure exposure. It also produces real-time video to the Pi's HDMI output from the camera.
            </summary>
            <param name="config">The configuration object for this renderer.</param>
        </member>
        <member name="M:MMALSharp.Components.MMALVideoRenderer.RemoveOverlay(MMALSharp.Components.MMALOverlayRenderer)">
            <summary>
            Removes a <see cref="T:MMALSharp.Components.MMALOverlayRenderer"/> from this renderer's overlays if it exists.
            </summary>
            <param name="renderer">The overlay renderer to remove.</param>
        </member>
        <member name="M:MMALSharp.Components.MMALVideoRenderer.ConfigureRenderer">
            <summary>
            Commits all changes made to the configuration.
            </summary>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Components.MMALVideoRenderer.PrintComponent">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Components.MMALVideoRenderer.Dispose">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Components.MMALOverlayRenderer">
            <summary>
            MMAL provides the ability to add a static video render overlay onto the display output. The user must provide unencoded RGB input padded to the width/height of the camera block size (32x16).
            This class represents a video renderer which has the ability to overlay static resources to the display output.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALOverlayRenderer.Source">
            <summary>
            A reference to the current stream being used in the overlay.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALOverlayRenderer.ParentRenderer">
            <summary>
            The parent renderer which is being used to overlay onto the display.
            </summary>
        </member>
        <member name="P:MMALSharp.Components.MMALOverlayRenderer.OverlayConfiguration">
            <summary>
            The configuration for rendering a static preview overlay.
            </summary>
        </member>
        <member name="F:MMALSharp.Components.MMALOverlayRenderer.AllowedEncodings">
            <summary>
            A list of supported encodings for overlay image data.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALOverlayRenderer.#ctor(MMALSharp.Components.MMALVideoRenderer,MMALSharp.Config.PreviewOverlayConfiguration,System.Byte[])">
            <summary>
            Creates a new instance of a Overlay renderer component. This component is identical to the <see cref="T:MMALSharp.Components.MMALVideoRenderer"/> class, however it provides
            the ability to overlay a static source onto the render overlay.
            </summary>
            <param name="parent">The parent renderer which is being used to overlay onto the display.</param>
            <param name="config">The configuration for rendering a static preview overlay.</param>
            <param name="source">A reference to the current stream being used in the overlay.</param>
        </member>
        <member name="M:MMALSharp.Components.MMALOverlayRenderer.UpdateOverlay">
            <summary>
            Updates the overlay by sending <see cref="P:MMALSharp.Components.MMALOverlayRenderer.Source"/> as new image data.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALOverlayRenderer.UpdateOverlay(System.Byte[])">
            <summary>
            Updates the overlay by sending the specified buffer as new image data.
            </summary>
            <param name="imageData">Byte array containing the image data encoded like configured.</param>
        </member>
        <member name="T:MMALSharp.Components.MMALResizerComponent">
            <summary>
            Represents the resizer component. This component has the ability to change the encoding type &amp; pixel format, as well
            as the width/height of resulting frames.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALResizerComponent.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Components.MMALResizerComponent"/> class that can be used to change the size
            and the pixel format of resulting frames. 
            </summary>
        </member>
        <member name="T:MMALSharp.Components.MMALSplitterComponent">
            <summary>
            The Splitter Component is intended on being connected to the camera video output port. In turn, it
            provides an additional 4 output ports which can be used to produce multiple image/video outputs
            from the single camera video port.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALSplitterComponent.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Components.MMALSplitterComponent"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.Components.MMALSplitterComponent.ConfigureInputPort(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.IPort,MMALSharp.Handlers.IInputCaptureHandler)">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Components.MMALSplitterComponent.ConfigureInputPort(MMALSharp.Ports.MMALPortConfig,MMALSharp.Handlers.IInputCaptureHandler)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.MMALComponentBase">
            <summary>
            Base class for all components.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALComponentBase.Control">
            <summary>
            Reference to the Control port of this component.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALComponentBase.Inputs">
            <summary>
            Reference to all input ports associated with this component.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALComponentBase.Outputs">
            <summary>
            Reference to all output ports associated with this component.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALComponentBase.Clocks">
            <summary>
            Reference to all clock ports associated with this component.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALComponentBase.Ports">
            <summary>
            Reference to all ports associated with this component.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALComponentBase.Name">
            <summary>
            Name of the component
            </summary>
        </member>
        <member name="P:MMALSharp.MMALComponentBase.Enabled">
            <summary>
            Indicates whether this component is enabled.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALComponentBase.ForceStopProcessing">
            <summary>
            Flag to force processing to stop on this component.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALComponentBase.Ptr">
            <summary>
            Native pointer to the component this object represents.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.#ctor(System.String)">
            <summary>
            Creates the MMAL Component by the given name.
            </summary>
            <param name="name">The native MMAL name of the component you want to create.</param>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.CheckState">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.MMALComponentBase.EnableConnections">
            <summary>
            Enables any connections associated with this component, traversing down the pipeline to enable those connections
            also.
            </summary>
            <exception cref="T:MMALSharp.MMALPortConnectedException">Thrown when port enabled prior to enabling connection.</exception>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.DisableConnections">
            <summary>
            Disables any connections associated with this component, traversing down the pipeline to disable those connections
            also.
            </summary>
            <exception cref="T:MMALSharp.MMALPortConnectedException">Thrown when port still enabled prior to disabling connection.</exception>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.PrintComponent">
            <summary>
            Prints a summary of the ports associated with this component to the console.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.Dispose">
            <summary>
            Disposes of the current component, and frees any native resources still in use by it.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.AcquireComponent">
            <summary>
            Acquire a reference on a component. Acquiring a reference on a component will prevent a component from being destroyed until the 
            acquired reference is released (by a call to mmal_component_destroy). References are internally counted so all acquired references 
            need a matching call to release them.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.ReleaseComponent">
            <summary>
            Release a reference on a component Release an acquired reference on a component. Triggers the destruction of the component 
            when the last reference is being released.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.DestroyComponent">
            <summary>
            Destroy a previously created component Release an acquired reference on a component. 
            Only actually destroys the component when the last reference is being released.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.EnableComponent">
            <summary>
            Enable processing on a component.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.DisableComponent">
            <summary>
            Disable processing on a component.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.CleanPortPools">
            <summary>
            Helper method to destroy any port pools still in action. Failure to do this will cause MMAL to block indefinitely.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentBase.CreateComponent(System.String)">
            <summary>
            Provides a facility to create a component with a given name.
            </summary>
            <param name="name">The name of the component to create.</param>
            <returns>A pointer to the new component struct.</returns>
        </member>
        <member name="T:MMALSharp.Config.JustifyText">
            <summary>
            Used to indicate how text should be justified when using annotation.
            </summary>
        </member>
        <member name="F:MMALSharp.Config.JustifyText.Centre">
            <summary>
            Centre aligned.
            </summary>
        </member>
        <member name="F:MMALSharp.Config.JustifyText.Left">
            <summary>
            Left aligned.
            </summary>
        </member>
        <member name="F:MMALSharp.Config.JustifyText.Right">
            <summary>
            Right aligned.
            </summary>
        </member>
        <member name="T:MMALSharp.Config.AnnotateImage">
            <summary>
            The <see cref="T:MMALSharp.Config.AnnotateImage"/> type is for use with the image annotation functionality.
            This will produce a textual overlay on image stills depending on the options enabled.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.CustomText">
            <summary>
            Custom text to overlay on the stills capture.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.TextSize">
            <summary>
            The text size to use.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.TextColour">
            <summary>
            The <see cref="T:System.Drawing.Color"/> of the text.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.BgColour">
            <summary>
            The <see cref="T:System.Drawing.Color"/> of the background. Note: AllowCustomBackgroundColour should be enabled
            for this to work.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.ShowShutterSettings">
            <summary>
            Show shutter settings.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.ShowGainSettings">
            <summary>
            Show gain settings.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.ShowLensSettings">
            <summary>
            Show lens settings.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.ShowCafSettings">
            <summary>
            Show Continuous Auto Focus settings.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.ShowMotionSettings">
            <summary>
            Show motion settings.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.ShowFrameNumber">
            <summary>
            Show the frame number.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.AllowCustomBackgroundColour">
            <summary>
            Allows custom background colour to be used.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.ShowDateText">
            <summary>
            Show the current date.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.ShowTimeText">
            <summary>
            Show the current time.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.Justify">
            <summary>
            Justify annotation text.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.XOffset">
            <summary>
            X Offset from the justification edge.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.AnnotateImage.YOffset">
            <summary>
            Y Offset from the justification edge.
            </summary>
        </member>
        <member name="M:MMALSharp.Config.AnnotateImage.#ctor(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,MMALSharp.Config.JustifyText,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Config.AnnotateImage"/>.
            </summary>
            <param name="customText">The custom text to display.</param>
            <param name="textSize">The size of displayed text.</param>
            <param name="textColour">The colour of displayed text.</param>
            <param name="bgColour">The colour of the background.</param>
            <param name="showShutterSettings">Shows shutter settings.</param>
            <param name="showGainSettings">Shows gain settings.</param>
            <param name="showLensSettings">Show lens settings.</param>
            <param name="showCafSettings">Show CAF settings.</param>
            <param name="showMotionSettings">Show motion settings.</param>
            <param name="showFrameNumber">Show frame number.</param>
            <param name="allowCustomBackground">Enable custom background colour.</param>
            <param name="showDateText">Show date text.</param>
            <param name="showTimeText">Show time text.</param>
            <param name="justify">Justify text.</param>
            <param name="xOffset">Text X offset value.</param>
            <param name="yOffset">Text Y offset value.</param>
        </member>
        <member name="M:MMALSharp.Config.AnnotateImage.#ctor(System.String,System.Int32,System.Drawing.Color)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Config.AnnotateImage"/> with date and time enabled by default.
            </summary>
            <param name="customText">The custom text to display.</param>
            <param name="textSize">The size of displayed text.</param>
            <param name="textColour">The colour of displayed text.</param>
        </member>
        <member name="T:MMALSharp.Config.ColourEffects">
            <summary>
            Allows a user to adjust the colour of outputted frames.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.ColourEffects.Enable">
            <summary>
            Enable the Colour Effects functionality.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.ColourEffects.Color">
            <summary>
            The <see cref="P:MMALSharp.Config.ColourEffects.Color"/> to use.
            </summary>
        </member>
        <member name="M:MMALSharp.Config.ColourEffects.#ctor(System.Boolean,System.Drawing.Color)">
            <summary>
            Initialises a new <see cref="T:MMALSharp.Config.ColourEffects"/> struct.
            </summary>
            <param name="enable">Enable the Colour Effects functionality.</param>
            <param name="color">The <see cref="P:MMALSharp.Config.ColourEffects.Color"/> to use.</param>
        </member>
        <member name="T:MMALSharp.Config.ExifTag">
            <summary>
            Represents an Exif tag for use with JPEG still captures.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.ExifTag.Key">
            <summary>
            The Exif key.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.ExifTag.Value">
            <summary>
            The Exif value.
            </summary>
        </member>
        <member name="T:MMALSharp.Config.JpegThumbnail">
            <summary>
            Provides config settings for JPEG thumbnail embedding.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.JpegThumbnail.Enable">
            <summary>
            Enable JPEG thumbnail.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.JpegThumbnail.Width">
            <summary>
            The width of the thumbnail.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.JpegThumbnail.Height">
            <summary>
            The height of the thumbnail.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.JpegThumbnail.Quality">
            <summary>
            The quality of the thumbnail.
            </summary>
        </member>
        <member name="M:MMALSharp.Config.JpegThumbnail.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new instance of <see cref="T:MMALSharp.Config.JpegThumbnail"/>.
            </summary>
            <param name="enable">Enable JPEG thumbnail.</param>
            <param name="width">The width of the thumbnail.</param>
            <param name="height">The height of the thumbnail.</param>
            <param name="quality">The quality of the thumbnail.</param>
        </member>
        <member name="T:MMALSharp.Config.PreviewConfiguration">
            <summary>
            Defines the settings for a <see cref="T:MMALSharp.Components.MMALVideoRenderer"/> component.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewConfiguration.FullScreen">
            <summary>
            Indicates whether to use full screen or windowed mode.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewConfiguration.NoAspect">
            <summary>
            If set to true, indicates that any display scaling should disregard the aspect ratio of the frame region being displayed.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewConfiguration.CopyProtect">
            <summary>
            Enable copy protection. 
            Note: Doesn't appear to be supported by the firmware.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewConfiguration.PreviewWindow">
            <summary>
            Specifies where the preview overlay should be drawn on the screen.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewConfiguration.Opacity">
            <summary>
            Opacity of the preview windows. Value between 1 (fully invisible) - 255 (fully opaque).
            Note: If RGBA encoding is used with the preview component then the alpha channel will be ignored.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewConfiguration.Layer">
            <summary>
            Sets the relative depth of the images, with greater values being in front of smaller values.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewConfiguration.DisplayTransform">
            <summary>
            Indicates whether any flipping or rotation should be used on the overlay.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewConfiguration.DisplayMode">
            <summary>
            Indicates how the image should be scaled to fit the display.
            </summary>
        </member>
        <member name="T:MMALSharp.Config.PreviewOverlayConfiguration">
            <summary>
            Defines the settings for a <see cref="T:MMALSharp.Components.MMALOverlayRenderer"/> component.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewOverlayConfiguration.Resolution">
            <summary>
            Specifies the resolution of the static resource to be used with this Preview Overlay. If this is null then the parent renderer's resolution will be used instead.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.PreviewOverlayConfiguration.Encoding">
            <summary>
            The encoding of the static resource. Can be one of the following: YUV, RGB, RGBA, BGR, BGRA.
            If left null, we will try to work out the encoding based on the size of the image (3 bytes for RGB, 4 bytes for RGBA).
            </summary>
        </member>
        <member name="T:MMALSharp.Config.Split">
            <summary>
            The <see cref="T:MMALSharp.Config.Split"/> type is used when taking video capture and a user wishes to split
            recording into multiple files. 
            </summary>
        </member>
        <member name="P:MMALSharp.Config.Split.Value">
            <summary>
            How often files should be split.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.Split.Mode">
            <summary>
            The <see cref="T:MMALSharp.Config.TimelapseMode"/> mode to use.
            </summary>
        </member>
        <member name="T:MMALSharp.Config.StereoMode">
            <summary>
            The Stereoscopic mode code has mainly been added for completeness.
            It requires a Raspberry Pi Compute Module with two cameras connected.
            This functionality has not been tested.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.StereoMode.Mode">
            <summary>
            Gets or sets the stereoscopic mode.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.StereoMode.Decimate">
            <summary>
            Gets or sets a value indicating whether to half the width and height of a stereoscopic image.
            </summary>
            <remarks>https://github.com/raspberrypi/userland/blob/master/host_applications/linux/apps/raspicam/RaspiCamControl.c#L204</remarks>
        </member>
        <member name="P:MMALSharp.Config.StereoMode.SwapEyes">
            <summary>
            Gets or sets a value indicating a swap of camera order for stereoscopic mode.
            </summary>
            <remarks>https://github.com/raspberrypi/userland/blob/master/host_applications/linux/apps/raspicam/RaspiCamControl.c#L205</remarks>
        </member>
        <member name="T:MMALSharp.Config.Timelapse">
            <summary>
            The <see cref="T:MMALSharp.Config.Timelapse"/> type is for use with Timelapse still captures.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.Timelapse.Mode">
            <summary>
            The timelapse mode.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.Timelapse.CancellationToken">
            <summary>
            Specifies when timelapse capture should finish.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.Timelapse.Value">
            <summary>
            How often images should be taken (relates to the <see cref="T:MMALSharp.Config.TimelapseMode"/> chosen).
            </summary>
        </member>
        <member name="T:MMALSharp.Config.TimelapseMode">
            <summary>
            The unit of time to use.
            </summary>
        </member>
        <member name="F:MMALSharp.Config.TimelapseMode.Millisecond">
            <summary>
            Uses milliseconds as unit of time. One hour equals 3'600'000 milliseconds.
            </summary>
        </member>
        <member name="F:MMALSharp.Config.TimelapseMode.Second">
            <summary>
            Uses seconds as unit of time. One hour equals 3'600 seconds.
            </summary>
        </member>
        <member name="F:MMALSharp.Config.TimelapseMode.Minute">
            <summary>
            Uses minutes as unit of time. One hour equals 60 minutes.
            </summary>
        </member>
        <member name="T:MMALSharp.Config.Zoom">
            <summary>
            Allows a user to specify a Region of Interest with Still captures.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.Zoom.X">
            <summary>
            The X coordinate between 0 - 1.0.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.Zoom.Y">
            <summary>
            The Y coordinate between 0 - 1.0.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.Zoom.Width">
            <summary>
            The Width value between 0 - 1.0.
            </summary>
        </member>
        <member name="P:MMALSharp.Config.Zoom.Height">
            <summary>
            The Height value between 0 - 1.0.
            </summary>
        </member>
        <member name="M:MMALSharp.Config.Zoom.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Intialises a new <see cref="T:MMALSharp.Config.Zoom"/> struct.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="width">The Width value.</param>
            <param name="height">The Height value.</param>
        </member>
        <member name="T:MMALSharp.MMALNativeExceptionHelper">
            <summary>
            Provides methods which support calling native methods.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALNativeExceptionHelper.MMALCheck(MMALSharp.Native.MMALUtil.MMAL_STATUS_T,System.String)">
            <summary>
            Checks whether the provided MMAL_STATUS_T is equal to MMAL_SUCCESS and throws the associated exception in case of an error.
            </summary>
            <param name="status">The MMAL_STATUS_T to search for an error.</param>
            <param name="message">The message for the exception that will be thrown if an error occurred.</param>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="T:MMALSharp.PiCameraError">
            <summary>
            Represents unspecific errors that occur during working with the Pi Camera.
            </summary>
        </member>
        <member name="M:MMALSharp.PiCameraError.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.PiCameraError"/> exception.
            </summary>
        </member>
        <member name="M:MMALSharp.PiCameraError.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.PiCameraError"/> exception with a specified message.
            </summary>
            <param name="msg">A message that describes the current error.</param>
        </member>
        <member name="T:MMALSharp.MMALException">
            <summary>
            Base class for all native error exception wrappers.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALException.#ctor(MMALSharp.Native.MMALUtil.MMAL_STATUS_T,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALException"/> class with the specified error code and message.
            This exception is the base class for all exception wrappers.
            </summary>
            <param name="status">The native status code.</param>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALNoMemoryException">
            <summary>
            Native error corresponding to an <see cref="T:System.OutOfMemoryException"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALNoMemoryException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALNoMemoryException"/> class with the specified message.
            This exception is similar to an <see cref="T:System.OutOfMemoryException"/>.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALNoSpaceException">
            <summary>
            Native error that occurs when running out of resources other than memory.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALNoSpaceException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALNoSpaceException"/> class with the specified message.
            This exception indicates running out of resources other than memory.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALInvalidException">
            <summary>
            Native error corresponding to an <see cref="T:System.ArgumentException"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALInvalidException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALInvalidException"/> class with the specified message.
            This exception is similar to an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALNotImplementedException">
            <summary>
            Native error corresponding to a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALNotImplementedException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALNotImplementedException"/> class with the specified message.
            This exception is similar to a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALInvalidDirectoryException">
            <summary>
            Native error corresponding to a <see cref="T:System.IO.FileNotFoundException"/> or <see cref="T:System.IO.DirectoryNotFoundException"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALInvalidDirectoryException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALInvalidDeviceException"/> class with the specified message.
            This exception is similar to a <see cref="T:System.IO.FileNotFoundException"/> or <see cref="T:System.IO.DirectoryNotFoundException"/>.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALInvalidDeviceException">
            <summary>
            Native error that occurs when a device or address does not exist.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALInvalidDeviceException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALInvalidDeviceException"/> class with the specified message.
            This exception indicates a non existent device or address.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALIOException">
            <summary>
            Native error corresponding to an <see cref="T:System.IO.IOException"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALIOException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALIOException"/> class with the specified message.
            This exception is similar to an <see cref="T:System.IO.IOException"/>.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALIllegalSeekException">
            <summary>
            Native error that occurs when performing an illegal seek operation.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALIllegalSeekException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALIllegalSeekException"/> class with the specified message.
            This exception indicates an illegal seek operation.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALCorruptException">
            <summary>
            Native error that occurs when MMAL encounters corrupt data.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALCorruptException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALCorruptException"/> class with the specified message.
            This exception indicates MMAL has encountered corrupted data.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALComponentNotReadyException">
            <summary>
            Native error that occurs when a component is not ready.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentNotReadyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALComponentNotReadyException"/> class with the specified message.
            This exception indicates that a component is not ready.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALComponentNotConfiguredException">
            <summary>
            Native error that occurs when a component is not configured.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALComponentNotConfiguredException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALComponentNotConfiguredException"/> class with the specified message.
            This exception indicates a not configured component.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALPortConnectedException">
            <summary>
            Native error that occurs when a port is already connected.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALPortConnectedException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALPortNotConnectedException"/> class with the specified message.
            This exception indicates an already connected port.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALPortNotConnectedException">
            <summary>
            Native error that occurs when a port is not connected.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALPortNotConnectedException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALPortNotConnectedException"/> class with the specified message.
            This exception indicates a disconnected port.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALResourceUnavailableException">
            <summary>
            Native error that occurs when resource (e.g. a buffer) is temporarily unavailable. You should try again later.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALResourceUnavailableException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALResourceUnavailableException"/> class with the specified message.
            This exception indicates a temporiarily unavailable resource.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.MMALBadAddressException">
            <summary>
            Native error that occurs when facing a bad address.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALBadAddressException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.MMALBadAddressException"/> class with the specified message.
            This exception indicates a bad address.
            </summary>
            <param name="message">The error message to print.</param>
        </member>
        <member name="T:MMALSharp.IBuffer">
            <summary>
            Represents a buffer header.
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Cmd">
            <summary>
            Defines what the buffer header contains. This is a FourCC with 0 as a special value meaning stream data.
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.AllocSize">
            <summary>
            Allocated size in bytes of payload buffer.
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Length">
            <summary>
            Number of bytes currently used in the payload buffer (starting from offset).
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Offset">
            <summary>
            Offset in bytes to the start of valid data in the payload buffer.
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Flags">
            <summary>
            Flags describing properties of a buffer header.
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Pts">
            <summary>
            Presentation timestamp in microseconds.
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Dts">
            <summary>
            Decode timestamp in microseconds (dts = pts, except in the case of video streams with B frames).
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Type">
            <summary>
            Accessor to the specific type this buffer header represents.
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Properties">
            <summary>
            List of properties associated with this buffer header.
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Events">
            <summary>
            List of events associated with this buffer header.
            </summary>
        </member>
        <member name="P:MMALSharp.IBuffer.Ptr">
            <summary>
            Native pointer that represents this buffer header.
            </summary>
        </member>
        <member name="M:MMALSharp.IBuffer.PrintProperties">
            <summary>
            Print the properties associated with this buffer header to console.
            </summary>
        </member>
        <member name="M:MMALSharp.IBuffer.ParseEvents">
            <summary>
            Writes events associated with the buffer header to log.
            </summary>
        </member>
        <member name="M:MMALSharp.IBuffer.AssertProperty(MMALSharp.Native.MMALBufferProperties)">
            <summary>
            Checks whether a buffer header contains a certain status code.
            </summary>
            <param name="property">The status code.</param>
            <returns>True if the buffer header contains the status code.</returns>
        </member>
        <member name="M:MMALSharp.IBuffer.GetBufferData">
            <summary>
            Gathers all data in this payload and returns as a byte array.
            </summary>
            <returns>A byte array containing the image frame.</returns>
        </member>
        <member name="M:MMALSharp.IBuffer.ReadIntoBuffer(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Writes user provided image data into a buffer header.
            </summary>
            <param name="source">The array of image data to write to buffer header.</param>
            <param name="length">The length of the data being written.</param>
            <param name="eof">Signal that we've reached the end of the input file.</param>
        </member>
        <member name="M:MMALSharp.IBuffer.Acquire">
            <summary>
            Acquire a buffer header. Acquiring a buffer header increases a reference counter on it and makes 
            sure that the buffer header won't be recycled until all the references to it are gone.
            </summary>
        </member>
        <member name="M:MMALSharp.IBuffer.Release">
            <summary>
            Release a buffer header. Releasing a buffer header will decrease its reference counter and when no more references are left, 
            the buffer header will be recycled by calling its 'release' callback function.
            </summary>
        </member>
        <member name="M:MMALSharp.IBuffer.Reset">
            <summary>
            Reset a buffer header. Resets all header variables to default values.
            </summary>
        </member>
        <member name="T:MMALSharp.IBufferEvent">
            <summary>
            Represents a buffer event format.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.Ptr">
            <summary>
            Native pointer that represents this event format.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.FourCC">
            <summary>
            The FourCC code of the component.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.Bitrate">
            <summary>
            The working bitrate of the component.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.Width">
            <summary>
            The width value.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.Height">
            <summary>
            The height value.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.CropX">
            <summary>
            The CropX value.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.CropY">
            <summary>
            The CropY value.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.CropWidth">
            <summary>
            The crop width value.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.CropHeight">
            <summary>
            The crop height value.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.ParNum">
            <summary>
            The pixel aspect ratio numerator value.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.ParDen">
            <summary>
            The pixel aspect ratio denominator value.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.FramerateNum">
            <summary>
            The framerate numerator value.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferEvent.FramerateDen">
            <summary>
            The framerate denominator value.
            </summary>
        </member>
        <member name="T:MMALSharp.IBufferPool">
            <summary>
            Represents a pool of buffer headers.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferPool.Ptr">
            <summary>
            Native pointer that represents this buffer header pool.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferPool.Queue">
            <summary>
            Accessor to the queue of buffer headers this pool has.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferPool.HeadersNum">
            <summary>
            The number of buffer headers in this pool.
            </summary>
        </member>
        <member name="M:MMALSharp.IBufferPool.Resize(System.UInt32,System.UInt32)">
            <summary>
            Resize a pool of MMAL_BUFFER_HEADER_T. This allows modifying either the number of allocated buffers, the payload size or both at the same time.
            </summary>
            <param name="numHeaders">Number of headers to be contained in this pool.</param>
            <param name="size">The size of the headers.</param>
        </member>
        <member name="T:MMALSharp.IBufferQueue">
            <summary>
            Represents a queue of buffer headers.
            </summary>
        </member>
        <member name="P:MMALSharp.IBufferQueue.Ptr">
            <summary>
            Native pointer to the buffer header queue this object represents.
            </summary>
        </member>
        <member name="M:MMALSharp.IBufferQueue.GetBuffer">
            <summary>
            Get a MMAL_BUFFER_HEADER_T from a queue.
            </summary>
            <returns>A new managed buffer header object.</returns>
        </member>
        <member name="M:MMALSharp.IBufferQueue.QueueLength">
            <summary>
            Get the number of buffer headers currently in this queue.
            </summary>
            <returns>The number of buffers currently in this queue.</returns>
        </member>
        <member name="M:MMALSharp.IBufferQueue.Wait">
            <summary>
            Waits (blocking) for a buffer header to be available in the queue and allocates it.
            </summary>
            <returns>The buffer header.</returns>
        </member>
        <member name="M:MMALSharp.IBufferQueue.TimedWait(System.Int32)">
            <summary>
            Waits (blocking) for a buffer header to be available in the queue and allocates it. This is the same as a wait, except that it will abort in case of timeout.
            </summary>
            <param name="waitms">Number of milliseconds to wait before aborting.</param>
            <returns>The buffer header.</returns>
        </member>
        <member name="M:MMALSharp.IBufferQueue.Put(MMALSharp.IBuffer)">
            <summary>
            Puts the buffer header back into this queue.
            </summary>
            <param name="buffer">The buffer header.</param>
        </member>
        <member name="T:MMALSharp.IConnection">
            <summary>
            Represents a connection between two ports.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.CallbackHandler">
            <summary>
            The connection callback handler.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.DownstreamComponent">
            <summary>
            The downstream component associated with the connection.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.UpstreamComponent">
            <summary>
            The upstream component associated with the connection.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.InputPort">
            <summary>
            The input port of this connection.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.OutputPort">
            <summary>
            The output port of this connection.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.ConnectionPool">
            <summary>
            The pool of buffer headers in this connection.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.Name">
            <summary>
            Name of this connection.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.Enabled">
            <summary>
            Indicates whether this connection is enabled.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.Flags">
            <summary>
            Flags passed during the create call (Read Only). A bitwise combination of Connection flags values.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.TimeSetup">
            <summary>
            Time in microseconds taken to setup the connection.
            </summary>  
        </member>
        <member name="P:MMALSharp.IConnection.TimeEnable">
            <summary>
            Time in microseconds taken to enable the connection.
            </summary>
        </member>
        <member name="P:MMALSharp.IConnection.TimeDisable">
            <summary>
            Time in microseconds taken to disable the connection.
            </summary>
        </member>
        <member name="M:MMALSharp.IConnection.ManagedConnectionCallback(MMALSharp.IBuffer)">
            <summary>
            The managed connection callback method.
            </summary>
            <param name="buffer">The working buffer header.</param>
        </member>
        <member name="M:MMALSharp.IConnection.Enable">
            <summary>
            Enable a connection. The format of the two ports must have been committed before calling this function, although note that on creation, 
            the connection automatically copies and commits the output port's format to the input port.
            </summary>
        </member>
        <member name="M:MMALSharp.IConnection.Disable">
            <summary>
            Disable a connection.
            </summary>
        </member>
        <member name="M:MMALSharp.IConnection.Destroy">
            <summary>
            Destroy a connection. Release an acquired reference on a connection. Only actually destroys the connection when the last reference is 
            being released. The actual destruction of the connection will start by disabling it, if necessary. Any pool, queue, and so on owned by 
            the connection shall then be destroyed.
            </summary>
        </member>
        <member name="T:MMALSharp.IMMALObject">
            <summary>
            Represents a MMAL object.
            </summary>
        </member>
        <member name="M:MMALSharp.IMMALObject.CheckState">
            <summary>
            Checks whether a native MMAL pointer is valid.
            </summary>
            <returns>True if the pointer is valid.</returns>
        </member>
        <member name="P:MMALSharp.IMMALObject.IsDisposed">
            <summary>
            Returns whether this MMAL object has been disposed of.
            </summary>
        </member>
        <member name="T:MMALSharp.MMALBootstrapper">
            <summary>
            Used as a common class to store downstream component references between standalone mode and camera connected mode.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBootstrapper.DownstreamComponents">
            <summary>
            List of all encoders currently in the pipeline.
            </summary>
        </member>
        <member name="T:MMALSharp.MMALBufferImpl">
            <summary>
            Represents a buffer header object.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Data">
            <summary>
            Pointer to the data associated with this buffer header.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Cmd">
            <summary>
            Defines what the buffer header contains. This is a FourCC with 0 as a special value meaning stream data.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.AllocSize">
            <summary>
            Allocated size in bytes of payload buffer.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Length">
            <summary>
            Number of bytes currently used in the payload buffer (starting from offset).
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Offset">
            <summary>
            Offset in bytes to the start of valid data in the payload buffer.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Flags">
            <summary>
            Flags describing properties of a buffer header.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Pts">
            <summary>
            Presentation timestamp in microseconds.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Dts">
            <summary>
            Decode timestamp in microseconds (dts = pts, except in the case of video streams with B frames).
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Type">
            <summary>
            Accessor to the specific type this buffer header represents.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Properties">
            <summary>
            List of properties associated with this buffer header.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Events">
            <summary>
            List of events associated with this buffer header.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALBufferImpl.Ptr">
            <summary>
            Native pointer that represents this buffer header.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.#ctor(MMALSharp.Native.MMAL_BUFFER_HEADER_T*)">
            <summary>
            Creates a new Managed reference to a MMAL Buffer.
            </summary>
            <param name="ptr">The native pointer to the buffer.</param>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.PrintProperties">
            <summary>
            Print the properties associated with this buffer header to console.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.ParseEvents">
            <summary>
            Writes events associated with the buffer header to log.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.AssertProperty(MMALSharp.Native.MMALBufferProperties)">
            <summary>
            Checks whether a buffer header contains a certain status code.
            </summary>
            <param name="property">The status code.</param>
            <returns>True if the buffer header contains the status code.</returns>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.ToString">
            <summary>
            Returns a summary, including length presentation timestamp and flags, about this buffer header instance.
            </summary>
            <returns>A string summarising this instance.</returns>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.CheckState">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.GetBufferData">
            <summary>
            Gathers all data in this payload and returns as a byte array.
            </summary>
            <returns>A byte array containing the image frame.</returns>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.ReadIntoBuffer(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Writes user provided image data into a buffer header.
            </summary>
            <param name="source">The array of image data to write to buffer header.</param>
            <param name="length">The length of the data being written.</param>
            <param name="eof">Signal that we've reached the end of the input file.</param>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.Acquire">
            <summary>
            Acquire a buffer header. Acquiring a buffer header increases a reference counter on it and makes 
            sure that the buffer header won't be recycled until all the references to it are gone.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.Release">
            <summary>
            Release a buffer header. Releasing a buffer header will decrease its reference counter and when no more references are left, 
            the buffer header will be recycled by calling its 'release' callback function.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.Reset">
            <summary>
            Reset a buffer header. Resets all header variables to default values.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALBufferImpl.InitialiseProperties">
            <summary>
            Adds all properties associated with this buffer header to <see cref="P:MMALSharp.MMALBufferImpl.Properties"/>.
            </summary>
        </member>
        <member name="T:MMALSharp.MMALCamera">
            <summary>
            This class provides an interface to the Raspberry Pi camera module. 
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCamera.Instance">
            <summary>
            Gets the singleton instance of the MMAL Camera. Call to initialise the camera for first use.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCamera.Camera">
            <summary>
            Reference to the camera component.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALCamera.StartCapture(MMALSharp.Ports.Outputs.IOutputPort)">
            <summary>
            Begin capture on one of the camera's output ports.
            </summary>
            <param name="port">An output port of the camera component.</param>
        </member>
        <member name="M:MMALSharp.MMALCamera.StopCapture(MMALSharp.Ports.Outputs.IOutputPort)">
            <summary>
            Stop capture on one of the camera's output ports.
            </summary>
            <param name="port">An output port of the camera component.</param>
        </member>
        <member name="M:MMALSharp.MMALCamera.ForceStop(MMALSharp.Ports.Outputs.IOutputPort)">
            <summary>
            Force capture to stop on a port (Still or Video).
            </summary>
            <param name="port">The capture port.</param>
        </member>
        <member name="M:MMALSharp.MMALCamera.TakeRawVideo(MMALSharp.Handlers.IVideoCaptureHandler,System.Threading.CancellationToken)">
            <summary>
            Self-contained method for recording raw video frames directly from the camera's video port.
            Uses the encoding and pixel format as set in <see cref="P:MMALSharp.MMALCameraConfig.VideoEncoding"/> and <see cref="P:MMALSharp.MMALCameraConfig.VideoSubformat"/>.
            </summary>
            <param name="handler">The video capture handler to apply to the encoder.</param>
            <param name="cancellationToken">A cancellationToken to signal when to stop video capture.</param>        
            <returns>The awaitable Task.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.TakeVideo(MMALSharp.Handlers.IVideoCaptureHandler,System.Threading.CancellationToken,MMALSharp.Config.Split)">
            <summary>
            Self-contained method for recording H.264 video for a specified amount of time. Records at 30fps, 25Mb/s at the highest quality.
            </summary>
            <param name="handler">The video capture handler to apply to the encoder.</param>
            <param name="cancellationToken">A cancellationToken to signal when to stop video capture.</param>
            <param name="split">Used for Segmented video mode.</param>
            <returns>The awaitable Task.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.TakeRawPicture(MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Self-contained method to capture raw image data directly from the Camera component - this method does not use an Image encoder.
            Note: We cannot use the OPAQUE encoding format with this helper method, the capture will not fail, but will not produce valid data. For reference, RaspiStillYUV uses YUV420.
            </summary>
            <param name="handler">The image capture handler to use to save image.</param>
            <returns>The awaitable Task.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:MMALSharp.PiCameraError"/>
        </member>
        <member name="M:MMALSharp.MMALCamera.TakePicture(MMALSharp.Handlers.IOutputCaptureHandler,MMALSharp.Native.MMALEncoding,MMALSharp.Native.MMALEncoding)">
            <summary>
            Self-contained method for capturing a single image from the camera still port.
            An MMALImageEncoder component will be created and attached to the still port.
            </summary>
            <param name="handler">The image capture handler to apply to the encoder component.</param>
            <param name="encodingType">The image encoding type e.g. JPEG, BMP.</param>
            <param name="pixelFormat">The pixel format to use with the encoder e.g. I420 (YUV420).</param>
            <returns>The awaitable Task.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.TakePictureTimeout(MMALSharp.Handlers.IFileStreamCaptureHandler,MMALSharp.Native.MMALEncoding,MMALSharp.Native.MMALEncoding,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Self-contained method for capturing a continual images from the camera still port for a specified period of time.
            An MMALImageEncoder component will be created and attached to the still port.
            </summary>
            <param name="handler">The image capture handler to apply to the encoder component.</param>
            <param name="encodingType">The image encoding type e.g. JPEG, BMP.</param>
            <param name="pixelFormat">The pixel format to use with the encoder e.g. I420 (YUV420).</param>
            <param name="cancellationToken">A cancellationToken to trigger stop capturing.</param>
            <param name="burstMode">When enabled, burst mode will increase the rate at which images are taken, at the expense of quality.</param>
            <returns>The awaitable Task.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.TakePictureTimelapse(MMALSharp.Handlers.IFileStreamCaptureHandler,MMALSharp.Native.MMALEncoding,MMALSharp.Native.MMALEncoding,MMALSharp.Config.Timelapse)">
            <summary>
            Self-contained method for capturing timelapse images.
            An MMALImageEncoder component will be created and attached to the still port.
            </summary>
            <param name="handler">The image capture handler to apply to the encoder component.</param>
            <param name="encodingType">The image encoding type e.g. JPEG, BMP.</param>
            <param name="pixelFormat">The pixel format to use with the encoder e.g. I420 (YUV420).</param>
            <param name="timelapse">A Timelapse object which specifies the timeout and rate at which images should be taken.</param>
            <returns>The awaitable Task.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:MMALSharp.MMALCamera.ProcessAsync(MMALSharp.Ports.Outputs.IOutputPort,System.Threading.CancellationToken)">
            <summary>
            Helper method to begin processing image data. Starts the Camera port and awaits until processing is complete.
            Cleans up resources upon finish.
            </summary>
            <param name="cameraPort">The camera port which image data is coming from.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for a task to complete.</param>
            <returns>The awaitable Task.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.PrintPipeline">
            <summary>
            Prints the currently configured component pipeline to the console window.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALCamera.DisableCamera">
            <summary>
            Disables processing on the camera component.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALCamera.EnableCamera">
            <summary>
            Enables processing on the camera component
            </summary>
        </member>
        <member name="M:MMALSharp.MMALCamera.ConfigureCameraSettings(MMALSharp.Handlers.IOutputCaptureHandler,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Initialises the camera component ready for operation. This method can also be called if you want to change
            configuration settings in <see cref="T:MMALSharp.MMALCameraConfig"/>.
            </summary>
            <param name="stillCaptureHandler">Optional output capture handler for use with raw image capture.</param>
            <param name="videoCaptureHandler">Optional output capture handler for use with raw video capture.</param>
            <returns>The camera instance.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.EnableAnnotation">
            <summary>
            Enables the annotation feature which will produce a textual overlay on produced frames.
            </summary>
            <returns>The camera instance.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.DisableAnnotation">
            <summary>
            Disables the annotation feature.
            </summary>
            <returns>The camera instance.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.AddOverlay(MMALSharp.Components.MMALVideoRenderer,MMALSharp.Config.PreviewOverlayConfiguration,System.Byte[])">
            <summary>
            Creates an overlay renderer that is able to render an overlay from a static image source.
            </summary>
            <param name="parent">The parent renderer which is being used to overlay onto the display.</param>
            <param name="config">The configuration for rendering a static preview overlay.</param>
            <param name="source">A reference to the current stream being used in the overlay.</param>
            <returns>The created <see cref="T:MMALSharp.Components.MMALOverlayRenderer"/> object.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.WithMotionDetection(MMALSharp.Handlers.IMotionCaptureHandler,MMALSharp.Processors.Motion.MotionConfig,System.Action,MMALSharp.Common.IImageContext)">
            <summary>
            Call to enable motion detection.
            </summary>
            <param name="handler">The motion capture handler.</param>
            <param name="config">The motion configuration object.</param>
            <param name="onDetect">The callback when motion is detected.</param>
            <param name="imageContext">The image metadata.</param>
            <returns>The camera instance.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.Cleanup">
            <summary>
            Cleans up any unmanaged resources. It is intended for this method to be run when no more activity is to be done on the camera.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALCamera.ProcessRawAsync(MMALSharp.Ports.Outputs.IOutputPort,System.Threading.CancellationToken)">
            <summary>
            Acts as an isolated processor specifically used when capturing raw frames from the camera component.
            </summary>
            <param name="cameraPort">The camera component port (still or video).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The awaitable task.</returns>
        </member>
        <member name="M:MMALSharp.MMALCamera.CheckPreviewComponentStatus">
            <summary>
            Helper method to check the Renderer component status. If a Renderer has not been initialized, a warning will
            be shown to the user.
            </summary>
        </member>
        <member name="T:MMALSharp.MMALCameraConfig">
            <summary>
            Provides a rich set of camera/sensor related configuration. Call <see cref="M:MMALSharp.MMALCamera.ConfigureCameraSettings(MMALSharp.Handlers.IOutputCaptureHandler,MMALSharp.Handlers.IOutputCaptureHandler)"/> to apply changes.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.Debug">
            <summary>
            Gets or sets a value indicating whether to enable verbose debug output for many operations.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.SensorMode">
            <summary>
            Manually set the camera sensor mode to force certain attributes.
            See: 
            https://github.com/techyian/MMALSharp/wiki/OmniVision-OV5647-Camera-Module
            https://github.com/techyian/MMALSharp/wiki/Sony-IMX219-Camera-Module
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.Sharpness">
            <summary>
            Configure the sharpness of the image.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.Contrast">
            <summary>
            Configure the contrast of the image.
            </summary>  
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.Brightness">
            <summary>
            Configure the brightness of the image.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.Saturation">
            <summary>
            Configure the saturation of the image.
            </summary>  
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ISO">
            <summary>
            Configure the light sensitivity of the sensor.
            </summary> 
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ExposureCompensation">
            <summary>
            Configure the exposure compensation of the camera. Doing so will produce a lighter/darker image beyond the recommended exposure.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ExposureMode">
            <summary>
            Configure the exposure mode used by the camera. 
            </summary>  
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ExposureMeterMode">
            <summary>
            Configure the exposure metering mode to be used by the camera. The metering mode determines how the camera measures exposure.       
            </summary> 
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.AwbMode">
            <summary>
            Configure the Auto White Balance to be used by the camera.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ImageFx">
            <summary>
            Configure any image effects to be used by the camera       
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ColourFx">
            <summary>
            Allows a user to change the colour of an image, e.g. U = 128, V = 128 will result in a greyscale (monochrome) image.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.Rotation">
            <summary>
            Specify the rotation of the image, possible values are 0, 90, 180, 270.
            </summary>   
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.Flips">
            <summary>
            Specify whether the image should be flipped.
            </summary>                       
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ROI">
            <summary>
            Zoom in on an image to focus on a region of interest.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ShutterSpeed">
            <summary>
            Changing the shutter speed alters how long the sensor is exposed to light (in microseconds).
            <para />
            There's currently an upper limit of approximately 6.000.000µs (6.000ms, 6s), past which operation is undefined. 8MP Sony sensor supports 8s max shutter speed.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.AwbGainsR">
            <summary>
            Adjust auto white balance 'red' gains.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.AwbGainsB">
            <summary>
            Adjust auto white balance 'blue' gains.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.DrcLevel">
            <summary>
            Adjust dynamic range compression.
            
            DRC changes the images by increasing the range of dark areas, and decreasing the brighter areas. This can improve the image in low light areas.        
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.StatsPass">
            <summary>
            Displays the exposure, analogue and digital gains, and AWB settings used.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.Annotate">
            <summary>
            Allows fine tuning of annotation options.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.StereoMode">
            <summary>
            Adjust Stereoscopic mode - only supported with Raspberry Pi Compute module.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.SetChangeEventRequest">
            <summary>
            Enable to receive event request callbacks.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ClockMode">
            <summary>
            Specify the Presentation timestamp (PTS) mode.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.PreviewEncoding">
            <summary>
            The encoding type to use with the Preview renderer.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.PreviewSubformat">
            <summary>
            The pixel format to use with the Preview renderer.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.VideoEncoding">
            <summary>
            The encoding type to use for Video captures.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.VideoSubformat">
            <summary>
            The pixel format to use for Video captures.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.VideoResolution">
            <summary>
            The Resolution to use for Video captures.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.VideoStabilisation">
            <summary>
            Enable video stabilisation.
            </summary> 
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.RateControl">
            <summary>
            Used to force behaviour of frame rate control.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.IntraPeriod">
            <summary>
            Specifies the number of frames after which a new I-frame is inserted in to the stream.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.VideoProfile">
            <summary>
            Represents the H.264 video profile you wish to use.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.VideoLevel">
            <summary>
            Represents the H.264 video level you wish to use.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.ImmutableInput">
            <summary>
            Requires the video encoder not to modify the input images. 
            </summary>
            <remarks>http://www.jvcref.com/files/PI/documentation/ilcomponents/prop.html#OMX_IndexParamBrcmImmutableInput</remarks>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.InlineHeaders">
            <summary>
            Force the stream to include PPS and SPS headers on every I-frame. Needed for certain 
            streaming cases e.g. Apple HLS.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.InlineMotionVectors">
            <summary>
            Enable output of motion vectors. 
            See https://www.raspberrypi.org/forums/viewtopic.php?t=85867 for use case.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.IntraRefresh">
            <summary>
            Sets the intra refresh period (GoP) rate for the recorded video.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.VideoFramerate">
            <summary>
            Specifies the frames per second to record
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.VideoColorSpace">
            <summary>
            The working video color space, specific to the camera's video port. 
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.StillEncoding">
            <summary>
            The encoding type to use for Still captures.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.StillSubFormat">
            <summary>
            The pixel format to use for Still captures. Irrelevant when not using OPAQUE encoding.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.StillResolution">
            <summary>
            The Resolution to use for Still captures.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.StillFramerate">
            <summary>
            The frame rate to use for Still captures.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALCameraConfig.StillBurstMode">
            <summary>
            Indicates whether the camera's still port should feature Burst Mode, i.e. MMAL_PARAMETER_CAMERA_BURST_CAPTURE.
            When enabled, burst mode will increase the rate at which images are taken, at the expense of quality.
            </summary>
        </member>
        <member name="T:MMALSharp.MMALCameraComponentExtensions">
            <summary>
            Provides extension methods for useful configuration against the Camera component.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetIsEnabledAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            States whether the camera control port is configured to display annotation settings.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>True if configured to display annotation settings.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetShowShutterAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            States whether the annotate feature will display shutter information.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>True if configured to display shutter information.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetShowCafAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            States whether the annotate feature will display Continuous Auto Focus information.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>True if configured to display Continuous Auto Focus information.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetShowGainAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            States whether the annotate feature will display gain information.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>True if configured to display gain information.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetShowLensAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            States whether the annotate feature will display lens information.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>True if configured to display lens information.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetShowMotionAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            States whether the annotate feature will display motion information.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>True if configured to display motion information.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetShowFrameNumberAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            States whether the annotate feature will display frame number information.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>True if configured to display frame number information.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetShowBlackBackgroundAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            States whether the annotate feature will use a black background when displaying information.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>True if configured to use a black background when displaying information.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetCustomTextAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Get the custom text (if any) that the user has requested to be displayed using the annotate feature.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The custom text specified by the user.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetTextColourAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the <see cref="T:System.Drawing.Color"/> structure that will be used to display information using the annotate feature.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The <see cref="T:System.Drawing.Color"/> structure.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetBackgroundColourAnnotateSettings(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the <see cref="T:System.Drawing.Color"/> structure that will be used as a background when displaying information using the annotate feature.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The <see cref="T:System.Drawing.Color"/> structure.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetSensorMode(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the sensor mode currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The sensor mode.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetSaturation(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the saturation value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The saturation value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetSharpness(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the sharpness value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The sharpness value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetContrast(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the contrast value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The contrast value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetBrightness(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the brightness value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The brightness value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetISO(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the ISO value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The ISO value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.SetISO(MMALSharp.Components.MMALCameraComponent,System.Int32)">
            <summary>
            Sets the ISO to the specified value. Range from 100 to 800.
            </summary>
            <param name="camera">The camera component.</param>
            <param name="iso">The ISO value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetVideoStabilisation(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Video Stabilisation value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Video Stabilisation value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetExposureCompensation(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Exposure Compensation value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Exposure Compensation value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.SetExposureCompensation(MMALSharp.Components.MMALCameraComponent,System.Int32)">
            <summary>
            Sets the exposure compensation to the specified value. Range from -10 to 10.
            </summary>
            <param name="camera">The camera component.</param>
            <param name="expCompensation">The exposure compensation value.</param>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetExposureMode(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Exposure Mode value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Exposure Mode value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetExposureMeteringMode(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Exposure Metering Mode value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Exposure Metering Mode value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetAwbMode(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Automatic White Balance value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Automatic White Balance value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetExposureSpeed(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Exposure Speed value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Exposure Speed value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetFocusPosition(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Focus Position value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Focus Position value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetAnalogGain(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Analog Gain value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Analog Gain value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetDigitalGain(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Digital Gain value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Digital Gain value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetAwbRedGain(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the AWB Red Gain value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The AWB Red Gain value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetAwbBlueGain(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the AWB Blue Gain value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The AWB Blue Gain value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetImageFx(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Image Effects value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Image Effects value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetColourFx(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Colour Effects value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Colour Effects value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetRotation(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Rotation value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Rotation value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetFlips(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Flips value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Flips value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetVideoFlips(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Flips value currently being used by the video port.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Flips value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetStillFlips(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Flips value currently being used by the still port.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Flips value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetZoom(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Zoom (Region of Interest) value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Zoom value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.SetZoom(MMALSharp.Components.MMALCameraComponent,MMALSharp.Config.Zoom)">
            <summary>
            Sets the zoom to the specified value. Each parameter must not be greater than 1.0.
            </summary>
            <param name="camera">The camera component.</param>
            <param name="rect">The region of interest.</param>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetShutterSpeed(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Shutter Speed value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Shutter Speed value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetDRC(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Dynamic Range Compression value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Dynamic Range Compression value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetStatsPass(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets the Statistics Pass value currently being used by the camera.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>The Statistics Pass value.</returns>
        </member>
        <member name="M:MMALSharp.MMALCameraComponentExtensions.GetBurstMode(MMALSharp.Components.MMALCameraComponent)">
            <summary>
            Gets whether the camera's still port has burst mode enabled.
            </summary>
            <param name="camera">The camera component.</param>
            <returns>True if burst mode is enabled.</returns>
        </member>
        <member name="T:MMALSharp.MMALConnectionImpl">
            <summary>
            Represents a connection between two ports.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.CallbackHandler">
            <summary>
            The connection callback handler.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.ConnectionPool">
            <summary>
            The pool of buffer headers in this connection.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.DownstreamComponent">
            <summary>
            The downstream component associated with the connection.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.UpstreamComponent">
            <summary>
            The upstream component associated with the connection.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.InputPort">
            <summary>
            The input port of this connection.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.OutputPort">
            <summary>
            The output port of this connection.
            </summary>
        </member>
        <member name="F:MMALSharp.MMALConnectionImpl.ConnectionLock">
            <summary>
            Monitor lock for connection callback method.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.Name">
            <summary>
            Name of this connection.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.Enabled">
            <summary>
            Indicates whether this connection is enabled.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.Flags">
            <summary>
            Flags passed during the create call (Read Only). A bitwise combination of Connection flags values.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.TimeSetup">
            <summary>
            Time in microseconds taken to setup the connection.
            </summary>                          
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.TimeEnable">
            <summary>
            Time in microseconds taken to enable the connection.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.TimeDisable">
            <summary>
            Time in microseconds taken to disable the connection.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALConnectionImpl.Ptr">
            <summary>
            Native pointer to the connection that this object represents.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.CheckState">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.#ctor(MMALSharp.Native.MMAL_CONNECTION_T*,MMALSharp.Ports.Outputs.IOutputPort,MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Components.IDownstreamComponent,MMALSharp.Components.IComponent,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.MMALConnectionImpl"/>.
            </summary>
            <param name="ptr">The native connection pointer.</param>
            <param name="output">The upstream component's output port.</param>
            <param name="input">The downstream component's input port.</param>
            <param name="inputComponent">The upstream component.</param>
            <param name="outputComponent">The downstream component.</param>
            <param name="useCallback">Configure the connection to intercept native callbacks. Note: will adversely impact performance.</param>
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.ManagedConnectionCallback(MMALSharp.IBuffer)">
            <summary>
            The managed connection callback method.
            </summary>
            <param name="buffer">The working buffer header.</param>
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.ToString">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.Enable">
            <summary>
            Enable a connection. The format of the two ports must have been committed before calling this function, although note that on creation, 
            the connection automatically copies and commits the output port's format to the input port.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.Disable">
            <summary>
            Disable a connection.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.Destroy">
            <summary>
            Destroy a connection. Release an acquired reference on a connection. Only actually destroys the connection when the last reference is 
            being released. The actual destruction of the connection will start by disabling it, if necessary. Any pool, queue, and so on owned by 
            the connection shall then be destroyed.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.CreateConnection(MMALSharp.Ports.Outputs.IOutputPort,MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Components.IDownstreamComponent,System.Boolean)">
            <summary>
            Facility to create a connection between two port objects.
            </summary>
            <param name="output">The output port of the connection.</param>
            <param name="input">The input port of the connection.</param>
            <param name="inputComponent">The managed instance of the component we are connecting to.</param>
            <param name="useCallback">When set to true, enable the connection callback delegate (adversely affects performance).</param>
            <returns>A new managed connection object.</returns>
        </member>
        <member name="M:MMALSharp.MMALConnectionImpl.NativeConnectionCallback(MMALSharp.Native.MMAL_CONNECTION_T*)">
            <summary>
            Represents the native callback method for a connection between two ports.
            </summary>
            <param name="connection">The native pointer to a MMAL_CONNECTION_T struct.</param>
            <returns>The value of all flags set against this connection.</returns>
        </member>
        <member name="T:MMALSharp.MMALEventFormat">
            <summary>
            Represents an MMAL Event Format.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.Ptr">
            <summary>
            Native pointer that represents this event format.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.FourCC">
            <summary>
            The FourCC code.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.Bitrate">
            <summary>
            The working bitrate.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.Width">
            <summary>
            The width value.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.Height">
            <summary>
            The height value.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.CropX">
            <summary>
            The CropX value.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.CropY">
            <summary>
            The CropY value.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.CropWidth">
            <summary>
            The crop width value.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.CropHeight">
            <summary>
            The crop height value.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.ParNum">
            <summary>
            The pixel aspect ratio numerator value.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.ParDen">
            <summary>
            The pixel aspect ratio denominator value.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.FramerateNum">
            <summary>
            The framerate numerator value.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALEventFormat.FramerateDen">
            <summary>
            The framerate denominator value.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALEventFormat.#ctor(MMALSharp.Native.MMAL_ES_FORMAT_T)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.MMALEventFormat"/>.
            </summary>
            <param name="format">The native struct.</param>
        </member>
        <member name="M:MMALSharp.MMALEventFormat.#ctor(MMALSharp.Native.MMAL_ES_FORMAT_T,MMALSharp.Native.MMAL_ES_FORMAT_T*)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.MMALEventFormat"/>.
            </summary>
            <param name="format">The native struct.</param>
            <param name="ptr">The native pointer.</param>
        </member>
        <member name="T:MMALSharp.MMALObject">
            <summary>
            This class is the base class for all MMAL components.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALObject.IsDisposed">
            <summary>
            Returns whether this MMAL object has been disposed of.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALObject.#ctor">
            <summary>
            Creates a new instance of the MMALObject class and adds this instance to the Objects list.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALObject.Dispose">
            <summary>
            Marks this object as disposed.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALObject.CheckState">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.MMALPoolImpl">
            <summary>
            Represents a pool of buffer headers. An instance of this class can be created via a MMALPortImpl.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALPoolImpl.Ptr">
            <summary>
            Native pointer that represents this buffer header pool.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALPoolImpl.Queue">
            <summary>
            Accessor to the queue of buffer headers this pool has.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALPoolImpl.HeadersNum">
            <summary>
            The number of buffer headers in this pool.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALPoolImpl.#ctor(MMALSharp.Ports.IPort)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.MMALPoolImpl"/> based on a port.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:MMALSharp.MMALPoolImpl.#ctor(MMALSharp.Native.MMAL_POOL_T*)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.MMALPoolImpl"/> based on an existing <see cref="T:MMALSharp.Native.MMAL_POOL_T"/> pointer.
            </summary>
            <param name="ptr">The <see cref="T:MMALSharp.Native.MMAL_POOL_T"/> pointer.</param>
        </member>
        <member name="M:MMALSharp.MMALPoolImpl.CheckState">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.MMALPoolImpl.Resize(System.UInt32,System.UInt32)">
            <summary>
            Resize a pool of MMAL_BUFFER_HEADER_T. This allows modifying either the number of allocated buffers, the payload size or both at the same time.
            </summary>
            <param name="numHeaders">Number of headers to be contained in this pool.</param>
            <param name="size">The size of the headers.</param>
        </member>
        <member name="M:MMALSharp.MMALPoolImpl.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.MMALPoolImpl.Destroy">
            <summary>
            Destroy a pool of MMAL_BUFFER_HEADER_T. This will also deallocate all of the memory which was allocated when creating or resizing the pool.
            </summary>
        </member>
        <member name="T:MMALSharp.MMALQueueImpl">
            <summary>
            Represents a queue of buffer headers.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALQueueImpl.Ptr">
            <summary>
            Native pointer to the buffer header queue this object represents.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.#ctor(MMALSharp.Native.MMAL_QUEUE_T*)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.MMALQueueImpl"/>.
            </summary>
            <param name="ptr">The native pointer.</param>
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.GetBuffer">
            <summary>
            Get a new buffer from this queue.
            </summary>
            <returns>A new managed buffer header object.</returns>
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.ToString">
            <summary>
            Returns the pointer address of this queue.
            </summary>
            <returns>The pointer address of this queue.</returns>
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.CheckState">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.QueueLength">
            <summary>
            Get the number of buffer headers currently in this queue.
            </summary>
            <returns>The number of buffers currently in this queue.</returns>
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.Wait">
            <summary>
            Waits (blocking) for a buffer header to be available in the queue and allocates it.
            </summary>
            <returns>The buffer header.</returns>
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.TimedWait(System.Int32)">
            <summary>
            Waits (blocking) for a buffer header to be available in the queue and allocates it. This is the same as a wait, except that it will abort in case of timeout.
            </summary>
            <param name="waitms">Number of milliseconds to wait before aborting.</param>
            <returns>The buffer header.</returns>
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.Put(MMALSharp.IBuffer)">
            <summary>
            Puts the buffer header back into this queue.
            </summary>
            <param name="buffer">The buffer header.</param>
        </member>
        <member name="M:MMALSharp.MMALQueueImpl.Destroy">
            <summary>
            Destroy a queue of MMAL_BUFFER_HEADER_T.
            </summary>
        </member>
        <member name="T:MMALSharp.MMALStandalone">
            <summary>
            Used for Standalone use of MMALSharp without camera.
            </summary>
        </member>
        <member name="P:MMALSharp.MMALStandalone.Instance">
            <summary>
            Bootstraps MMAL for standalone use.
            </summary>
        </member>
        <member name="M:MMALSharp.MMALStandalone.ProcessAsync(MMALSharp.Components.IDownstreamComponent,System.Threading.CancellationToken)">
            <summary>
            Helper method to begin processing user provided image/video data. Starts the initial component control, input and output ports and awaits until processing is complete.
            Cleans up resources upon finish.
            </summary>
            <param name="initialComponent">The first component in your pipeline.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for a task to complete.</param>
            <returns>The awaitable Task.</returns>
        </member>
        <member name="M:MMALSharp.MMALStandalone.PrintPipeline(MMALSharp.Components.IDownstreamComponent)">
            <summary>
            Prints the currently configured component pipeline to the console window.
            </summary>
            <param name="initialComponent">The first component in your pipeline.</param>
        </member>
        <member name="M:MMALSharp.MMALStandalone.Cleanup">
            <summary>
            Cleans up any unmanaged resources. It is intended for this method to be run when no more activity is to be done with MMAL.
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_EOS">
            <summary>
            Signals that the current payload is the end of the stream of data
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_FRAME_START">
            <summary>
            Signals that the start of the current payload starts a frame
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_FRAME_END">
            <summary>
            Signals that the end of the current payload ends a frame
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_FRAME">
            <summary>
            Signals that the current payload contains only complete frames (1 or more)
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_KEYFRAME">
            <summary>
            Signals that the current payload is a keyframe (i.e. self decodable)
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_DISCONTINUITY">
            <summary>
            Signals a discontinuity in the stream of data (e.g. after a seek). Can be used for instance by a decoder to reset its state
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_CONFIG">
            <summary>
            Signals a buffer containing some kind of config data for the component (e.g. codec config data)
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_ENCRYPTED">
            <summary>
            Signals an encrypted payload
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_CODECSIDEINFO">
            <summary>
            Signals a buffer containing side information (e.g. Motion vectors).
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAGS_SNAPSHOT">
            <summary>
            Signals a buffer which is the snapshot/postview image from a stills capture
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_CORRUPTED">
            <summary>
            Signals a buffer which contains data known to be corrupted
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_TRANSMISSION_FAILED">
            <summary>
            Signals that a buffer failed to be transmitted
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_DECODEONLY">
            <summary>
            Signals the output buffer won't be used, just update reference frames
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALBufferProperties.MMAL_BUFFER_HEADER_FLAG_NAL">
            <summary>
            Signals that the end of the current payload ends a NAL
            </summary>
        </member>
        <member name="P:MMALSharp.Native.MMALEncodingHelpers.EncodingList">
            <summary>
            Gets a list of all supported encodings.
            Call <see cref="M:MMALSharp.PortExtensions.GetSupportedEncodings(MMALSharp.Ports.IPort)"/> to get supported encodings for a specific port.
            </summary>
        </member>
        <member name="M:MMALSharp.Native.MMALEncodingHelpers.ParseEncoding(System.Int32)">
            <summary>
            Parses an integer encoding value to an MMALEncoding object.
            </summary>
            <param name="encodingType">The encoding type value.</param>
            <returns>The MMALEncoding object</returns>
        </member>
        <member name="M:MMALSharp.Native.MMALEncodingHelpers.ParseEncoding(System.String)">
            <summary>
            Parses a string encoding name to an MMALEncoding object.
            </summary>
            <param name="encodingName">The encoding type name.</param>
            <returns>The MMALEncoding object</returns>
        </member>
        <member name="F:MMALSharp.Native.MMALEncoding.OPAQUE">
            <summary>
            An opaque buffer is a Broadcom specific format that references a GPU internal bitmap. It is typed as <see cref="F:MMALSharp.Native.MMALEncoding.EncodingType.Internal"/>.
            </summary>
            <remarks>https://www.raspberrypi.org/forums/viewtopic.php?t=53698</remarks>
        </member>
        <member name="F:MMALSharp.Native.MMALParametersVideo.MMAL_DISPLAYMODE_T.MMAL_DISPLAY_MODE_FILL">
            <summary>
            Fill the screen.
            </summary>
        </member>
        <member name="F:MMALSharp.Native.MMALParametersVideo.MMAL_DISPLAYMODE_T.MMAL_DISPLAY_MODE_LETTERBOX">
            <summary>
            All the source region should be displayed and black bars added if necessary.
            </summary>
        </member>
        <member name="P:MMALSharp.Native.MMALUtil.MMAL_TIME_UNKNOWN">
            <summary>
            Special Unknown Time Value
            Timestamps in MMAL are defined as signed 64 bits integer values representing microseconds.
            However a pre-defined special value is used to signal that a timestamp is not known.
            </summary>
        </member>
        <member name="T:MMALSharp.Ports.Clocks.ClockPort">
            <summary>
            Represents a clock port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Clocks.ClockPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Clocks.ClockPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this component.</param>
        </member>
        <member name="T:MMALSharp.Ports.Controls.ControlPort">
            <summary>
            Represents a control port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.Controls.ControlPort.Resolution">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.Controls.ControlPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Controls.ControlPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this component.</param>
        </member>
        <member name="M:MMALSharp.Ports.Controls.ControlPort.Enable">
            <summary>
            Enables processing on a control port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Controls.ControlPort.Start">
            <summary>
            Starts the control port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Controls.ControlPort.NativeControlPortCallback(MMALSharp.Native.MMAL_PORT_T*,MMALSharp.Native.MMAL_BUFFER_HEADER_T*)">
            <summary>
            This is the camera's control port callback function. The callback is used if
            MMALCameraConfig.SetChangeEventRequest is set to true.
            </summary>
            <param name="port">Native port struct pointer.</param>
            <param name="buffer">Native buffer header pointer.</param>
        </member>
        <member name="T:MMALSharp.Ports.Controls.IControlPort">
            <summary>
            Represents a control port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Controls.IControlPort.Start">
            <summary>
            Starts the control port.
            </summary>
        </member>
        <member name="T:MMALSharp.Ports.GenericPort">
            <summary>
            Represents a generic MMAL port of any type.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.GenericPort.Resolution">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.GenericPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,MMALSharp.Ports.PortType,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.GenericPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="type">The type of port.</param>
            <param name="guid">Managed unique identifier for this component.</param>
        </member>
        <member name="T:MMALSharp.Ports.Inputs.IInputPort">
            <summary>
            Represents an input port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.IInputPort.ConnectTo(MMALSharp.Ports.Outputs.IOutputPort,MMALSharp.IConnection)">
            <summary>
            Call to connect this input port to an output port. This method
            simply assigns the <see cref="T:MMALSharp.IConnection"/> to the ConnectedReference property. 
            </summary>
            <param name="outputPort">The connected output port.</param>
            <param name="connection">The connection object.</param>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.IInputPort.Configure(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.IPort,MMALSharp.Handlers.IInputCaptureHandler)">
            <summary>
            Call to configure an input port.
            </summary>
            <param name="config">The port configuration object.</param>
            <param name="copyPort">The port to copy from.</param>
            <param name="handler">The capture handler to assign to this port.</param>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.IInputPort.Enable">
            <summary>
            Enables processing on an input port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.IInputPort.ReleaseBuffer(MMALSharp.IBuffer)">
            <summary>
            Releases an input port buffer and reads further data from user provided image data if not reached end of file.
            </summary>
            <param name="bufferImpl">A managed buffer object.</param>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.IInputPort.Start">
            <summary>
            Starts the input port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.IInputPort.RegisterCallbackHandler(MMALSharp.Callbacks.IInputCallbackHandler)">
            <summary>
            Registers a new input callback handler with this port.
            </summary>
            <param name="callbackHandler">The callback handler.</param>
        </member>
        <member name="T:MMALSharp.Ports.Inputs.InputPort">
            <summary>
            Represents an input port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.Inputs.InputPort.Resolution">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.Inputs.InputPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Inputs.InputPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this component.</param>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.InputPort.ConnectTo(MMALSharp.Ports.Outputs.IOutputPort,MMALSharp.IConnection)">
            <summary>
            Call to connect this input port to an output port. This method
            simply assigns the <see cref="T:MMALSharp.IConnection"/> to the ConnectedReference property. 
            </summary>
            <param name="outputPort">The connected output port.</param>
            <param name="connection">The connection object.</param>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.InputPort.Configure(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.IPort,MMALSharp.Handlers.IInputCaptureHandler)">
            <summary>
            Call to configure an input port.
            </summary>
            <param name="config">The port configuration object.</param>
            <param name="copyPort">The port to copy from.</param>
            <param name="handler">The capture handler to assign to this port.</param>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.InputPort.Enable">
            <summary>
            Enables processing on an input port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.InputPort.ReleaseBuffer(MMALSharp.IBuffer)">
            <summary>
            Releases an input port buffer and reads further data from user provided image data if not reached end of file.
            </summary>
            <param name="bufferImpl">A managed buffer object.</param>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.InputPort.Start">
            <summary>
            Starts the input port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.InputPort.RegisterCallbackHandler(MMALSharp.Callbacks.IInputCallbackHandler)">
            <summary>
            Registers a new input callback handler with this port.
            </summary>
            <param name="callbackHandler">The callback handler.</param>
        </member>
        <member name="T:MMALSharp.Ports.Inputs.OverlayPort">
            <summary>
            Represents port behaviour especially for the static overlay renderer functionality. This object overrides <see cref="M:MMALSharp.Ports.Inputs.OverlayPort.NativeInputPortCallback(MMALSharp.Native.MMAL_PORT_T*,MMALSharp.Native.MMAL_BUFFER_HEADER_T*)"/>
            forcing it to do nothing when it receives a callback from the component.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.OverlayPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Inputs.OverlayPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this component.</param>
        </member>
        <member name="M:MMALSharp.Ports.Inputs.OverlayPort.#ctor(MMALSharp.Ports.IPort)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Inputs.OverlayPort"/>.
            </summary>
            <param name="copyFrom">The port to copy data from.</param>
        </member>
        <member name="T:MMALSharp.Ports.IPort">
            <summary>
            Represents a port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Ptr">
            <summary>
            Native pointer that represents this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.PortType">
            <summary>
            Specifies the type of port this is.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.ComponentReference">
            <summary>
            Managed reference to the component this port is associated with.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.ConnectedReference">
            <summary>
            Managed reference to the downstream component this port is connected to.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.BufferPool">
            <summary>
            Managed reference to the pool of buffer headers associated with this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Guid">
            <summary>
            User defined identifier given to this object.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.EncodingType">
            <summary>
            The MMALEncoding encoding type that this port will process data in. Helpful for retrieving encoding name/FourCC value.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.PixelFormat">
            <summary>
            The MMALEncoding pixel format that this port will process data in. Helpful for retrieving encoding name/FourCC value.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.PortConfig">
            <summary>
            The config for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Name">
            <summary>
            Native name of port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Enabled">
            <summary>
            Indicates whether this port is enabled.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.BufferNumMin">
            <summary>
            Specifies minimum number of buffer headers required for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.BufferSizeMin">
            <summary>
            Specifies minimum size of buffer headers required for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.BufferAlignmentMin">
            <summary>
            Specifies minimum alignment value for buffer headers required for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.BufferNumRecommended">
            <summary>
            Specifies recommended number of buffer headers for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.BufferSizeRecommended">
            <summary>
            Specifies recommended size of buffer headers for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.BufferNum">
            <summary>
            Indicates the currently set number of buffer headers for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.BufferSize">
            <summary>
            Indicates the currently set size of buffer headers for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Format">
            <summary>
            Accessor for the elementary stream.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Resolution">
            <summary>
            The Width/Height that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Crop">
            <summary>
            The region of interest that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.FrameRate">
            <summary>
            The framerate we are processing data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.VideoColorSpace">
            <summary>
            The working video color space, specific to video ports.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.CropWidth">
            <summary>
            The Region of Interest width that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.CropHeight">
            <summary>
            The Region of Interest height that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.NativeEncodingType">
            <summary>
            The encoding type that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.NativeEncodingSubformat">
            <summary>
            The pixel format that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Bitrate">
            <summary>
            The working bitrate of this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Par">
            <summary>
            The working aspect ratio of this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.ZeroCopy">
            <summary>
            Indicates whether ZeroCopy mode should be enabled on this port. When enabled, data is not copied to the ARM processor and is handled directly by the GPU. Useful when
            transferring large amounts of data or raw capture.
            See: https://www.raspberrypi.org/forums/viewtopic.php?t=170024
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.IPort.Trigger">
            <summary>
            Asynchronous trigger which is set when processing has completed on this port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.IPort.EnablePort(System.IntPtr)">
            <summary>
            Enables the specified port.
            </summary>
            <param name="callback">The function pointer MMAL will call back to.</param>
        </member>
        <member name="M:MMALSharp.Ports.IPort.DisablePort">
            <summary>
            Disable processing on a port. Disabling a port will stop all processing on this port and return all (non-processed)
            buffer headers to the client. If this is a connected output port, the input port to which it is connected shall also be disabled.
            Any buffer pool shall be released.
            </summary>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.IPort.Commit">
            <summary>
            Commit format changes on this port.
            </summary>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.IPort.ShallowCopy(MMALSharp.Ports.IPort)">
            <summary>
            Shallow copy a format structure. It is worth noting that the extradata buffer will not be copied in the new format.
            </summary>
            <param name="destination">The destination port we're copying to.</param>
        </member>
        <member name="M:MMALSharp.Ports.IPort.ShallowCopy(MMALSharp.IBufferEvent)">
            <summary>
            Shallow copy a format structure. It is worth noting that the extradata buffer will not be copied in the new format.
            </summary>
            <param name="eventFormatSource">The source event format we're copying from.</param>
        </member>
        <member name="M:MMALSharp.Ports.IPort.FullCopy(MMALSharp.Ports.IPort)">
            <summary>
            Fully copy a format structure, including the extradata buffer.
            </summary>
            <param name="destination">The destination port we're copying to.</param>
        </member>
        <member name="M:MMALSharp.Ports.IPort.FullCopy(MMALSharp.IBufferEvent)">
            <summary>
            Fully copy a format structure, including the extradata buffer.
            </summary>
            <param name="eventFormatSource">The source event format we're copying from.</param>
        </member>
        <member name="M:MMALSharp.Ports.IPort.Flush">
            <summary>
            Ask a port to release all the buffer headers it currently has. This is an asynchronous operation and the
            flush call will return before all the buffer headers are returned to the client.
            </summary>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.IPort.SendBuffer(MMALSharp.IBuffer)">
            <summary>
            Send a buffer header to a port.
            </summary>
            <param name="buffer">A managed buffer object.</param>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.IPort.SendAllBuffers">
            <summary>
            Attempts to send all available buffers in the queue to this port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.IPort.SendAllBuffers(MMALSharp.IBufferPool)">
            <summary>
            Attempts to send all available buffers in the specified pool's queue to this port.
            </summary>
            <param name="pool">The specified pool.</param>
        </member>
        <member name="M:MMALSharp.Ports.IPort.DestroyPortPool">
            <summary>
            Destroy a pool of MMAL_BUFFER_HEADER_T associated with a specific port. This will also deallocate all of the memory
            which was allocated when creating or resizing the pool.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.IPort.InitialiseBufferPool">
            <summary>
            Initialises a new buffer pool.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.IPort.ExtraDataAlloc(System.Int32)">
            <summary>
            Attempts to allocate the native extradata store with the given size.
            </summary>
            <param name="size">The size to allocate.</param>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.IPort.CloseConnection">
            <summary>
            To be called once connection has been disposed of.
            </summary>
        </member>
        <member name="T:MMALSharp.Ports.MMALPortConfig">
            <summary>
            Port configuration class.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.EncodingType">
            <summary>
            The encoding type this output port will send data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.PixelFormat">
            <summary>
            The pixel format this output port will send data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.Width">
            <summary>
            User provided width of output frame.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.Height">
            <summary>
            User provided height of output frame.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.Framerate">
            <summary>
            The framerate of the outputted data.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.Quality">
            <summary>
            The quality of our outputted data. 
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.Bitrate">
            <summary>
            The bitrate we are sending data at.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.ZeroCopy">
            <summary>
            Instruct MMAL to not copy buffers to ARM memory (useful for large buffers and handling raw data).
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.Timeout">
            <summary>
            Time that processing shall stop. Relevant for video recording.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.BufferNum">
            <summary>
            Requested number of buffer headers.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.BufferSize">
            <summary>
            Requested size of buffer headers.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.Crop">
            <summary>
            The Region of Interest requested.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.Split">
            <summary>
            Video split configuration object.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.MMALPortConfig.StoreMotionVectors">
            <summary>
            Indicates whether motion vector data should be stored to a separate output stream. Only applies to Video recording.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.MMALPortConfig.#ctor(MMALSharp.Native.MMALEncoding,MMALSharp.Native.MMALEncoding,System.Int32)">
            <summary>
            Create a new instance of <see cref="T:MMALSharp.Ports.MMALPortConfig"/> with parameters useful for image capture.
            </summary>
            <param name="encodingType">The encoding type.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="quality">The output quality. Only affects JPEG quality for image stills.</param>
        </member>
        <member name="M:MMALSharp.Ports.MMALPortConfig.#ctor(MMALSharp.Native.MMALEncoding,MMALSharp.Native.MMALEncoding,System.Int32,System.Int32,System.Nullable{System.DateTime},MMALSharp.Config.Split,System.Boolean)">
            <summary>
            Create a new instance of <see cref="T:MMALSharp.Ports.MMALPortConfig"/> with parameters useful for video capture.
            </summary>
            <param name="encodingType">The encoding type.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="quality">The output quality. Affects the quantization parameter for H.264 encoding. Set bitrate 0 and set this for variable bitrate.</param>
            <param name="bitrate">The output bitrate.</param>
            <param name="timeout">Video record timeout. This is useful if you have multiple video recording streams which you want to stop at different times.</param>
            <param name="split">Video split configuration object.</param>
            <param name="storeMotionVectors">Indicates whether to store motion vectors. Applies to H.264 video encoding.</param>
        </member>
        <member name="M:MMALSharp.Ports.MMALPortConfig.#ctor(MMALSharp.Native.MMALEncoding,MMALSharp.Native.MMALEncoding,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Nullable{System.Drawing.Rectangle},System.Boolean)">
            <summary>
            Create a new instance of <see cref="T:MMALSharp.Ports.MMALPortConfig"/> with parameters useful for standalone image/video processing.
            </summary>
            <param name="encodingType">The encoding type.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="width">The output width.</param>
            <param name="height">The output height.</param>
            <param name="framerate">The output framerate.</param>
            <param name="quality">The output quality.</param>
            <param name="bitrate">The output bitrate.</param>
            <param name="zeroCopy">Specify zero copy.</param>
            <param name="timeout">Video record timeout.</param>
            <param name="bufferNum">Requested number of buffer headers.</param>
            <param name="bufferSize">Requested size of buffer headers.</param>
            <param name="crop">The Region of Interest requested.</param>
            <param name="storeMotionVectors">Indicates whether to store motion vectors. Applies to H.264 video encoding.</param>
        </member>
        <member name="T:MMALSharp.Ports.Outputs.FastStillPort">
            <summary>
            Represents a still port used specifically when capturing rapid single image frames from the camera's video port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.Outputs.FastStillPort.Resolution">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.Outputs.FastStillPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.FastStillPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this port.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.FastStillPort.#ctor(MMALSharp.Ports.IPort)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.FastStillPort"/>.
            </summary>
            <param name="copyFrom">The port to copy data from.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.FastStillPort.Configure(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Handlers.IOutputCaptureHandler)">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.Outputs.FastStillPort.NativeOutputPortCallback(MMALSharp.Native.MMAL_PORT_T*,MMALSharp.Native.MMAL_BUFFER_HEADER_T*)">
            <summary>
            The native callback MMAL passes buffer headers to.
            </summary>
            <param name="port">The port the buffer is sent to.</param>
            <param name="buffer">The buffer header.</param>
        </member>
        <member name="T:MMALSharp.Ports.Outputs.FileEncodeOutputPort">
            <summary>
            A custom port definition used specifically when using encoder conversion functionality.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.FileEncodeOutputPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.FileEncodeOutputPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this port.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.FileEncodeOutputPort.#ctor(MMALSharp.Ports.IPort)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.FileEncodeOutputPort"/>.
            </summary>
            <param name="copyFrom">The port to copy data from.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.FileEncodeOutputPort.NativeOutputPortCallback(MMALSharp.Native.MMAL_PORT_T*,MMALSharp.Native.MMAL_BUFFER_HEADER_T*)">
            <summary>
            The native callback MMAL passes buffer headers to.
            </summary>
            <param name="port">The port the buffer is sent to.</param>
            <param name="buffer">The buffer header.</param>
        </member>
        <member name="T:MMALSharp.Ports.Outputs.IOutputPort">
            <summary>
            Represents an output port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.IOutputPort.Configure(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Call to configure an output port.
            </summary>
            <param name="config">The port configuration object.</param>
            <param name="copyFrom">The port to copy from.</param>
            <param name="handler">The capture handler to assign to this port.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.IOutputPort.ConnectTo(MMALSharp.Components.IDownstreamComponent,System.Int32,System.Boolean)">
            <summary>
            Connects two components together by their input and output ports.
            </summary>
            <param name="component">The component we want to connect to.</param>
            <param name="inputPort">The input port of the component we want to connect to.</param>
            <param name="useCallback">Flag to use connection callback (adversely affects performance).</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.IOutputPort.Start">
            <summary>
            Enable the port specified.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.IOutputPort.ReleaseBuffer(MMALSharp.IBuffer)">
            <summary>
            Release an output port buffer, get a new one from the queue and send it for processing.
            </summary>
            <param name="bufferImpl">A managed buffer object.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.IOutputPort.RegisterCallbackHandler(MMALSharp.Callbacks.IOutputCallbackHandler)">
            <summary>
            Call to register a new callback handler with this port.
            </summary>
            <param name="callbackHandler">The output callback handler.</param>
        </member>
        <member name="T:MMALSharp.Ports.Outputs.IStillPort">
            <summary>
            Represents a still port.
            </summary>
        </member>
        <member name="T:MMALSharp.Ports.Outputs.IVideoPort">
            <summary>
            Represents a video port.
            </summary>
        </member>
        <member name="T:MMALSharp.Ports.Outputs.OutputPort">
            <summary>
            Represents an output port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.Outputs.OutputPort.Resolution">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.Outputs.OutputPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.OutputPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this component.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.OutputPort.Configure(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Handlers.IOutputCaptureHandler)">
            <summary>
            Call to configure an output port.
            </summary>
            <param name="config">The port configuration object.</param>
            <param name="copyFrom">The port to copy from.</param>
            <param name="handler">The capture handler to assign to this port.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.OutputPort.ConnectTo(MMALSharp.Components.IDownstreamComponent,System.Int32,System.Boolean)">
            <summary>
            Connects two components together by their input and output ports.
            </summary>
            <param name="destinationComponent">The component we want to connect to.</param>
            <param name="inputPort">The input port of the component we want to connect to.</param>
            <param name="useCallback">Flag to use connection callback (adversely affects performance).</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.OutputPort.ReleaseBuffer(MMALSharp.IBuffer)">
            <summary>
            Release an output port buffer, get a new one from the queue and send it for processing.
            </summary>
            <param name="bufferImpl">A managed buffer object.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.OutputPort.RegisterCallbackHandler(MMALSharp.Callbacks.IOutputCallbackHandler)">
            <summary>
            Call to register a new callback handler with this port.
            </summary>
            <param name="callbackHandler">The output callback handler.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.OutputPort.Enable">
            <summary>
            Enables processing on an output port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.OutputPort.Start">
            <summary>
            Enable the port specified.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.OutputPort.NativeOutputPortCallback(MMALSharp.Native.MMAL_PORT_T*,MMALSharp.Native.MMAL_BUFFER_HEADER_T*)">
            <summary>
            The native callback MMAL passes buffer headers to.
            </summary>
            <param name="port">The port the buffer is sent to.</param>
            <param name="buffer">The buffer header.</param>
        </member>
        <member name="T:MMALSharp.Ports.Outputs.SplitterVideoPort">
            <summary>
            Represents a splitter component output port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.SplitterVideoPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.SplitterVideoPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this port.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.SplitterVideoPort.#ctor(MMALSharp.Ports.IPort)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.SplitterVideoPort"/>.
            </summary>
            <param name="copyFrom">The port to copy data from.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.SplitterVideoPort.Configure(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Handlers.IOutputCaptureHandler)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Ports.Outputs.StillPort">
            <summary>
            Represents a still image encoder/decoder port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.Outputs.StillPort.Resolution">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.Outputs.StillPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.StillPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this component.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.StillPort.#ctor(MMALSharp.Ports.IPort)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.StillPort"/>.
            </summary>
            <param name="copyFrom">The port to copy data from.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.StillPort.Configure(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Handlers.IOutputCaptureHandler)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Ports.Outputs.VideoPort">
            <summary>
            Represents a video encode/decode port
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.Outputs.VideoPort.Resolution">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.Outputs.VideoPort.#ctor(System.IntPtr,MMALSharp.Components.IComponent,System.Guid)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.VideoPort"/>. 
            </summary>
            <param name="ptr">The native pointer.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="guid">Managed unique identifier for this port.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.VideoPort.#ctor(MMALSharp.Ports.IPort)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Ports.Outputs.VideoPort"/>.
            </summary>
            <param name="copyFrom">The port to copy data from.</param>
        </member>
        <member name="M:MMALSharp.Ports.Outputs.VideoPort.Configure(MMALSharp.Ports.MMALPortConfig,MMALSharp.Ports.Inputs.IInputPort,MMALSharp.Handlers.IOutputCaptureHandler)">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.Outputs.VideoPort.NativeOutputPortCallback(MMALSharp.Native.MMAL_PORT_T*,MMALSharp.Native.MMAL_BUFFER_HEADER_T*)">
            <summary>
            The native callback MMAL passes buffer headers to.
            </summary>
            <param name="port">The port the buffer is sent to.</param>
            <param name="buffer">The buffer header.</param>
        </member>
        <member name="T:MMALSharp.Ports.PortBase`1">
            <summary>
            Base class for port objects.
            </summary>
            <typeparam name="TCallback">The callback handler type.</typeparam>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.CallbackHandler">
            <summary>
            The callback handler associated with this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.PortType">
            <summary>
            Specifies the type of port this is.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.ComponentReference">
            <summary>
            Managed reference to the component this port is associated with.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.ConnectedReference">
            <summary>
            Managed reference to the downstream component this port is connected to.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.BufferPool">
            <summary>
            Managed reference to the pool of buffer headers associated with this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Guid">
            <summary>
            User defined identifier given to this object.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.EncodingType">
            <summary>
            The MMALEncoding encoding type that this port will process data in. Helpful for retrieving encoding name/FourCC value.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.PixelFormat">
            <summary>
            The MMALEncoding pixel format that this port will process data in. Helpful for retrieving encoding name/FourCC value.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.PortConfig">
            <summary>
            The config for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.ZeroCopy">
            <summary>
            Indicates whether ZeroCopy mode should be enabled on this port. When enabled, data is not copied to the ARM processor and is handled directly by the GPU. Useful when
            transferring large amounts of data or raw capture.
            See: https://www.raspberrypi.org/forums/viewtopic.php?t=170024
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Trigger">
            <summary>
            Asynchronous trigger which is set when processing has completed on this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Ptr">
            <summary>
            Native pointer that represents this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Name">
            <summary>
            Native name of port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Enabled">
            <summary>
            Indicates whether this port is enabled.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.BufferNumMin">
            <summary>
            Specifies minimum number of buffer headers required for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.BufferSizeMin">
            <summary>
            Specifies minimum size of buffer headers required for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.BufferAlignmentMin">
            <summary>
            Specifies minimum alignment value for buffer headers required for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.BufferNumRecommended">
            <summary>
            Specifies recommended number of buffer headers for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.BufferSizeRecommended">
            <summary>
            Specifies recommended size of buffer headers for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.BufferNum">
            <summary>
            Indicates the currently set number of buffer headers for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.BufferSize">
            <summary>
            Indicates the currently set size of buffer headers for this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Format">
            <summary>
            Accessor for the elementary stream.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Resolution">
            <summary>
            The Width/Height that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Crop">
            <summary>
            The region of interest that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.FrameRate">
            <summary>
            The framerate we are processing data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.VideoColorSpace">
            <summary>
            The working video color space, specific to video ports.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.CropWidth">
            <summary>
            The Region of Interest width that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.CropHeight">
            <summary>
            The Region of Interest height that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.NativeEncodingType">
            <summary>
            The encoding type that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.NativeEncodingSubformat">
            <summary>
            The pixel format that this port will process data in.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Bitrate">
            <summary>
            The working bitrate of this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Par">
            <summary>
            The working aspect ratio of this port.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.Comp">
            <summary>
            Native pointer that represents the component this port is associated with.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.PtrCallback">
            <summary>
            Native pointer to the native callback function.
            </summary>
        </member>
        <member name="P:MMALSharp.Ports.PortBase`1.NativeCallback">
            <summary>
            Delegate for native port callback.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.CheckState">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.#ctor(System.IntPtr,MMALSharp.Components.IComponent,MMALSharp.Ports.PortType,System.Guid)">
            <summary>
            Creates a new managed reference to a MMAL Component Port.
            </summary>
            <param name="ptr">The native pointer to the component port.</param>
            <param name="comp">The component this port is associated with.</param>
            <param name="type">The type of port this is.</param>
            <param name="guid">A managed unique identifier for this port.</param>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.EnablePort(System.IntPtr)">
            <summary>
            Enables the specified port.
            </summary>
            <param name="callback">The function pointer MMAL will call back to.</param>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.DisablePort">
            <summary>
            Disable processing on a port. Disabling a port will stop all processing on this port and return all (non-processed)
            buffer headers to the client. If this is a connected output port, the input port to which it is connected shall also be disabled.
            Any buffer pool shall be released.
            </summary>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.Commit">
            <summary>
            Commit format changes on this port.
            </summary>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.ShallowCopy(MMALSharp.Ports.IPort)">
            <summary>
            Shallow copy a format structure. It is worth noting that the extradata buffer will not be copied in the new format.
            </summary>
            <param name="destination">The destination port we're copying to.</param>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.ShallowCopy(MMALSharp.IBufferEvent)">
            <summary>
            Shallow copy a format structure. It is worth noting that the extradata buffer will not be copied in the new format.
            </summary>
            <param name="eventFormatSource">The source event format we're copying from.</param>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.FullCopy(MMALSharp.Ports.IPort)">
            <summary>
            Fully copy a format structure, including the extradata buffer.
            </summary>
            <param name="destination">The destination port we're copying to.</param>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.FullCopy(MMALSharp.IBufferEvent)">
            <summary>
            Fully copy a format structure, including the extradata buffer.
            </summary>
            <param name="eventFormatSource">The source event format we're copying from.</param>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.Flush">
            <summary>
            Ask a port to release all the buffer headers it currently has. This is an asynchronous operation and the
            flush call will return before all the buffer headers are returned to the client.
            </summary>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.SendBuffer(MMALSharp.IBuffer)">
            <summary>
            Send a buffer header to a port.
            </summary>
            <param name="buffer">A managed buffer object.</param>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.SendAllBuffers">
            <summary>
            Attempts to send all available buffers in the queue to this port.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.SendAllBuffers(MMALSharp.IBufferPool)">
            <summary>
            Attempts to send all available buffers in the specified pool's queue to this port.
            </summary>
            <param name="pool">The specified pool.</param>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.DestroyPortPool">
            <summary>
            Destroy a pool of MMAL_BUFFER_HEADER_T associated with a specific port. This will also deallocate all of the memory
            which was allocated when creating or resizing the pool.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.InitialiseBufferPool">
            <summary>
            Initialises a new buffer pool.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.CloseConnection">
            <summary>
            To be called once connection has been disposed of.
            </summary>
        </member>
        <member name="M:MMALSharp.Ports.PortBase`1.ExtraDataAlloc(System.Int32)">
            <summary>
            Attempts to allocate the native extradata store with the given size.
            </summary>
            <param name="size">The size to allocate.</param>
            <exception cref="T:MMALSharp.MMALException"/>
        </member>
        <member name="T:MMALSharp.Ports.PortType">
            <summary>
            Describes a port type.
            </summary>
        </member>
        <member name="F:MMALSharp.Ports.PortType.Input">
            <summary>
            An input port.
            </summary>
        </member>
        <member name="F:MMALSharp.Ports.PortType.Output">
            <summary>
            An output port.
            </summary>
        </member>
        <member name="F:MMALSharp.Ports.PortType.Clock">
            <summary>
            A clock port.
            </summary>
        </member>
        <member name="F:MMALSharp.Ports.PortType.Control">
            <summary>
            A control port.
            </summary>
        </member>
        <member name="F:MMALSharp.Ports.PortType.Generic">
            <summary>
            A generic port.
            </summary>
        </member>
        <member name="T:MMALSharp.PortExtensions">
            <summary>
            Provides extension methods to obtain and change the configuration of a port.
            </summary>
        </member>
        <member name="M:MMALSharp.PortExtensions.GetParameter(MMALSharp.Ports.IPort,System.Int32)">
            <summary>
            Provides a facility to get data from the port using the native helper functions.
            </summary>
            <param name="port">The port to get the parameter from.</param>
            <param name="key">The unique key for the parameter.</param>
            <returns>Dynamic parameter based on key parameter.</returns>
        </member>
        <member name="M:MMALSharp.PortExtensions.GetRawCapture(MMALSharp.Ports.IPort)">
            <summary>
            Gets a value indicating whether to include raw Bayer image data on this port.
            </summary>
            <param name="port">The port you are querying.</param>
            <returns>True if raw Bayer image data will be returned.</returns>
        </member>
        <member name="M:MMALSharp.PortExtensions.GetSupportedEncodings(MMALSharp.Ports.IPort)">
            <summary>
            Retrieves an array of FourCC integer codes that this port is compatible with.
            </summary>
            <param name="port">The port we are getting supported encodings for.</param>
            <returns>An array of FourCC integers.</returns>
        </member>
        <member name="M:MMALSharp.PortExtensions.GetPortType(MMALSharp.Ports.PortType)">
            <summary>
            Returns the type of port in string format.
            </summary>
            <param name="type">The port type.</param>
            <returns>A string representation of the port type.</returns>
        </member>
        <member name="M:MMALSharp.PortExtensions.SetParameter(MMALSharp.Ports.IPort,System.Int32,System.Object)">
            <summary>
            Provides a facility to set data on the port using the native helper functions.
            </summary>
            <param name="port">The port we want to set the parameter on.</param>
            <param name="key">The unique key of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:MMALSharp.PortExtensions.SetImageCapture(MMALSharp.Ports.IPort,System.Boolean)">
            <summary>
            Starts or stops image processing on a port.
            </summary>
            <param name="port">The port.</param>
            <param name="enable">Set true to start image capture.</param>
        </member>
        <member name="M:MMALSharp.PortExtensions.SetRawCapture(MMALSharp.Ports.IPort,System.Boolean)">
            <summary>
            Enables or disables inclusion of raw Bayer metadata on this port.
            </summary>
            <param name="port">The port.</param>
            <param name="raw">Set true to include Bayer metadata.</param>
        </member>
        <member name="M:MMALSharp.PortExtensions.GetFramerateRange(MMALSharp.Ports.IPort)">
            <summary>
            Retrieves the currently configured framerate range for a given port.
            </summary>
            <param name="port">The port.</param>
            <returns>A <see cref="T:MMALSharp.Native.MMAL_PARAMETER_FPS_RANGE_T"/> structure containing the configured framerate range.</returns>
        </member>
        <member name="T:MMALSharp.Handlers.CircularBufferCaptureHandler">
            <summary>
            Represents a capture handler working as a circular buffer.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.CircularBufferCaptureHandler.Buffer">
            <summary>
            The circular buffer object responsible for storing image data.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.CircularBufferCaptureHandler.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.CircularBufferCaptureHandler"/> class with the specified Circular buffer capacity and directory/extension of the working file.
            </summary>
            <param name="bufferSize">The buffer's size.</param>
            <param name="directory">The directory to save captured videos.</param>
            <param name="extension">The filename extension for saving files.</param>
        </member>
        <member name="M:MMALSharp.Handlers.CircularBufferCaptureHandler.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.CircularBufferCaptureHandler"/> class with the specified Circular buffer capacity and working file path.
            </summary>
            <param name="bufferSize">The buffer's size.</param>
            <param name="fullPath">The absolute full path to save captured data to.</param>
        </member>
        <member name="M:MMALSharp.Handlers.CircularBufferCaptureHandler.Process(System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.CircularBufferCaptureHandler.DetectMotion(MMALSharp.Processors.Motion.MotionConfig,System.Action,MMALSharp.Common.IImageContext)">
            <summary>
            Call to enable motion detection.
            </summary>
            <param name="config">The motion configuration.</param>
            <param name="onDetect">A callback for when motion is detected.</param>
            <param name="imageContext">The frame metadata.</param>
        </member>
        <member name="M:MMALSharp.Handlers.CircularBufferCaptureHandler.StartRecording">
            <summary>
            Call to start recording.
            </summary>        
        </member>
        <member name="M:MMALSharp.Handlers.CircularBufferCaptureHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.CircularBufferCaptureHandler.TotalProcessed">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Handlers.FileStreamCaptureHandler">
            <summary>
            Processes image data to a <see cref="T:System.IO.FileStream"/>.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.FileStreamCaptureHandler.ProcessedFiles">
            <summary>
            A list of files that have been processed by this capture handler.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.FileStreamCaptureHandler.Directory">
            <summary>
            The directory to save to (if applicable).
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.FileStreamCaptureHandler.Extension">
            <summary>
            The extension of the file (if applicable).
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.FileStreamCaptureHandler.CurrentFilename">
            <summary>
            The name of the current file associated with the FileStream.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.FileStreamCaptureHandler.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.FileStreamCaptureHandler"/> class with the specified directory and filename extension. Filenames will be in the
            format "dd-MMM-yy HH-mm-ss" taken from this moment in time.
            </summary>
            <param name="directory">The directory to save captured data.</param>
            <param name="extension">The filename extension for saving files.</param>
        </member>
        <member name="M:MMALSharp.Handlers.FileStreamCaptureHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.FileStreamCaptureHandler"/> class with the specified file path.
            </summary>
            <param name="fullPath">The absolute full path to save captured data to.</param>
        </member>
        <member name="M:MMALSharp.Handlers.FileStreamCaptureHandler.GetFilename">
            <summary>
            Gets the filename that a FileStream points to.
            </summary>
            <returns>The filename.</returns>
        </member>
        <member name="M:MMALSharp.Handlers.FileStreamCaptureHandler.GetFilepath">
            <summary>
            Gets the filepath that a FileStream points to.
            </summary>
            <returns>The filepath.</returns>
        </member>
        <member name="M:MMALSharp.Handlers.FileStreamCaptureHandler.NewFile">
            <summary>
            Creates a new File (FileStream), assigns it to the Stream instance of this class and disposes of any existing stream. 
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.FileStreamCaptureHandler.PostProcess">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.FileStreamCaptureHandler.TotalProcessed">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Handlers.ICaptureHandler">
            <summary>
            Provides the functionality to process user provided or captured image data.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.ICaptureHandler.TotalProcessed">
            <summary>
            Returns a string of how much data has been processed by this capture handler.
            </summary>
            <returns>How much data has been processed by this capture handler.</returns>
        </member>
        <member name="T:MMALSharp.Handlers.IFileStreamCaptureHandler">
            <summary>
            Represents a FileStreamCaptureHandler.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.IFileStreamCaptureHandler.NewFile">
            <summary>
            Creates a new File (FileStream), assigns it to the Stream instance of this class and disposes of any existing stream. 
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.IFileStreamCaptureHandler.GetFilepath">
            <summary>
            Gets the filepath that a FileStream points to.
            </summary>
            <returns>The filepath.</returns>
        </member>
        <member name="M:MMALSharp.Handlers.IFileStreamCaptureHandler.GetFilename">
            <summary>
            Gets the filename that a FileStream points to.
            </summary>
            <returns>The filename.</returns>
        </member>
        <member name="T:MMALSharp.Handlers.IInputCaptureHandler">
            <summary>
            Represents a capture handler attached to an Input port.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.IInputCaptureHandler.Process(System.UInt32)">
            <summary>
            Processes image data to an input port.
            </summary>
            <param name="allocSize">The feed chunk size.</param>
            <returns>A <see cref="T:MMALSharp.Handlers.ProcessResult"/> with the fed image data.</returns>
        </member>
        <member name="T:MMALSharp.Handlers.ImageStreamCaptureHandler">
            <summary>
            Processes Image data to a <see cref="T:System.IO.FileStream"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.ImageStreamCaptureHandler.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.ImageStreamCaptureHandler"/> class with the specified directory and filename extension.
            </summary>
            <param name="directory">The directory to save captured images.</param>
            <param name="extension">The filename extension for saving files.</param>
        </member>
        <member name="M:MMALSharp.Handlers.ImageStreamCaptureHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.ImageStreamCaptureHandler"/> class with the specified file path.
            </summary>
            <param name="fullPath">The absolute full path to save captured data to.</param>
        </member>
        <member name="T:MMALSharp.Handlers.IMotionCaptureHandler">
            <summary>
            Represents a capture handler which can detect motion.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.IMotionCaptureHandler.MotionType">
            <summary>
            The motion type associated with this MotionCaptureHandler.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.IMotionCaptureHandler.DetectMotion(MMALSharp.Processors.Motion.MotionConfig,System.Action,MMALSharp.Common.IImageContext)">
            <summary>
            Call to enable motion detection.
            </summary>
            <param name="config">The motion configuration.</param>
            <param name="onDetect">A callback for when motion is detected.</param>
            <param name="imageContext">The image metadata.</param>
        </member>
        <member name="T:MMALSharp.Handlers.IMotionVectorCaptureHandler">
            <summary>
            Represents a capture handler which can process motion vectors.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.IMotionVectorCaptureHandler.InitialiseMotionStore(System.IO.Stream)">
            <summary>
            Call to initialise the stream to write motion vectors to.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:MMALSharp.Handlers.IMotionVectorCaptureHandler.ProcessMotionVectors(System.Byte[])">
            <summary>
            Responsible for storing the motion vector data to an output stream.
            </summary>
            <param name="data">The byte array containing the motion vector data.</param>
        </member>
        <member name="T:MMALSharp.Handlers.InMemoryCaptureHandler">
            <summary>
            A capture handler which stores its data to memory.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.InMemoryCaptureHandler.WorkingData">
            <summary>
            The working data store.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.InMemoryCaptureHandler.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Handlers.InMemoryCaptureHandler"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.InMemoryCaptureHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.InMemoryCaptureHandler.Process(System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.InMemoryCaptureHandler.PostProcess">
            <summary>
            Allows us to do any further processing once the capture method has completed. Note: It is the user's responsibility to 
            clear the WorkingData list after processing is complete.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.InMemoryCaptureHandler.TotalProcessed">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Handlers.InputCaptureHandler">
            <summary>
            Represents an InputCaptureHandler which is responsible for feeding data from a stream.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.InputCaptureHandler.CurrentStream">
            <summary>
            Gets or sets the stream to retrieve input data from.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.InputCaptureHandler.Processed">
            <summary>
            The total amount of data processed by this <see cref="T:MMALSharp.Handlers.InputCaptureHandler"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.InputCaptureHandler.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.InputCaptureHandler"/> class with the specified input stream, output directory and output filename extension.
            </summary>
            <param name="inputStream">The stream to retrieve input data from.</param>
        </member>
        <member name="M:MMALSharp.Handlers.InputCaptureHandler.Process(System.UInt32)">
            <summary>
            When overridden in a derived class, returns user provided image data.
            </summary>
            <param name="allocSize">The count of bytes to return at most in the <see cref="T:MMALSharp.Handlers.ProcessResult"/>.</param>
            <returns>A <see cref="T:MMALSharp.Handlers.ProcessResult"/> object containing the user provided image data.</returns>
        </member>
        <member name="M:MMALSharp.Handlers.InputCaptureHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.InputCaptureHandler.TotalProcessed">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Handlers.IOutputCaptureHandler">
            <summary>
            Represents a capture handler attached to an Output port.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.IOutputCaptureHandler.Process(System.Byte[],System.Boolean)">
            <summary>
            Used to process the byte array containing our image data from an output port.
            </summary>
            <param name="data">A byte array containing image data.</param>
            <param name="eos">Is end of stream.</param>
        </member>
        <member name="M:MMALSharp.Handlers.IOutputCaptureHandler.PostProcess">
            <summary>
            Used for any further processing once we have completed capture.
            </summary>
        </member>
        <member name="T:MMALSharp.Handlers.IVideoCaptureHandler">
            <summary>
            Represents a VideoCaptureHandler for use when recording video frames.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.IVideoCaptureHandler.Split">
            <summary>
            Signals that we should begin writing to a new video file.
            </summary>
        </member>
        <member name="T:MMALSharp.Handlers.MemoryStreamCaptureHandler">
            <summary>
            Processes frame data to a <see cref="T:System.IO.MemoryStream"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.MemoryStreamCaptureHandler.#ctor">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Handlers.MemoryStreamCaptureHandler"/>.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.MemoryStreamCaptureHandler.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Handlers.MemoryStreamCaptureHandler"/> with a specified capacity.
            </summary>
            <param name="size">The capacity of the <see cref="T:System.IO.MemoryStream"/>.</param>
        </member>
        <member name="T:MMALSharp.Handlers.OutputCaptureHandler">
            <summary>
            Represents an OutputCaptureHandler which is responsible for storing frames processed by a component.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.OutputCaptureHandler.OnManipulate">
            <summary>
            A callback for use with the Image Processing API.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.OutputCaptureHandler.OnAnalyse">
            <summary>
            A callback for use with the Image Analysis API.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.OutputCaptureHandler.ImageContext">
            <summary>
            An ImageContext providing metadata for image data.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.OutputCaptureHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.OutputCaptureHandler.TotalProcessed">
            <inheritdoc />
        </member>
        <member name="P:MMALSharp.Handlers.OutputCaptureHandler.Processed">
            <summary>
            The total amount of data that has been processed by this capture handler.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.OutputCaptureHandler.Process(System.Byte[],System.Boolean)">
            <summary>
            Processes the data passed into this method to this class' Stream instance.
            </summary>
            <param name="data">The image data.</param>
            <param name="eos">Is end of stream.</param>
        </member>
        <member name="M:MMALSharp.Handlers.OutputCaptureHandler.PostProcess">
            <summary>
            Allows us to do any further processing once the capture method has completed.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.OutputCaptureHandler.Manipulate(System.Action{MMALSharp.Processors.IFrameProcessingContext},MMALSharp.Common.IImageContext)">
            <summary>
            Allows manipulating of the image frame.
            </summary>
            <param name="context">A delegate to the manipulation you wish to carry out.</param>
            <param name="imageContext">Metadata for the image frame.</param>
        </member>
        <member name="T:MMALSharp.Handlers.ProcessedFileResult">
            <summary>
            Represents a file that contains the image data written by a capture handler.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.ProcessedFileResult.Directory">
            <summary>
            Gets or sets the directory path of the file.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.ProcessedFileResult.Filename">
            <summary>
            Gets or sets the filename without extension.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.ProcessedFileResult.Extension">
            <summary>
            Gets or sets the file extension without the leading dot.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.ProcessedFileResult.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.ProcessedFileResult"/> class with the specified directory, filename and extension.
            </summary>
            <param name="directory">The directory path of the file.</param>
            <param name="filename">The filename without extension.</param>
            <param name="extension">The file extension without the leading dot.</param>
        </member>
        <member name="T:MMALSharp.Handlers.ProcessResult">
            <summary>
            Contains the user provided image data with for a process operation.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.ProcessResult.Success">
            <summary>
            Gets or sets a value indicated whether the associated process operation succeeded.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.ProcessResult.Message">
            <summary>
            Gets or sets a message associated with this <see cref="T:MMALSharp.Handlers.ProcessResult"/>.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.ProcessResult.EOF">
            <summary>
            Gets or sets a value indicating whether the end of file has been reached.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.ProcessResult.BufferFeed">
            <summary>
            Gets or sets the buffer feed containing the image data.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.ProcessResult.DataLength">
            <summary>
            Gets or sets the count of bytes in the buffer used for image data.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.ProcessResult.AllocSize">
            <summary>
            Gets or sets the count of bytes allocated for the buffer.
            </summary>
        </member>
        <member name="T:MMALSharp.Handlers.StreamCaptureHandler`1">
            <summary>
            Processes the image data to a stream.
            </summary>
            <typeparam name="T">The <see cref="T:System.IO.Stream"/> type.</typeparam>
        </member>
        <member name="P:MMALSharp.Handlers.StreamCaptureHandler`1.CurrentStream">
            <summary>
            A Stream instance that we can process image data to.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.StreamCaptureHandler`1.Process(System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.StreamCaptureHandler`1.PostProcess">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.StreamCaptureHandler`1.TotalProcessed">
            <inheritdoc />
        </member>
        <member name="M:MMALSharp.Handlers.StreamCaptureHandler`1.Dispose">
            <summary>
            Releases the underlying stream.
            </summary>
        </member>
        <member name="T:MMALSharp.Handlers.VideoStreamCaptureHandler">
            <summary>
            Processes the video data to a FileStream.
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.VideoStreamCaptureHandler.MotionType">
            <summary>
            The motion type associated with this VideoCaptureHandler
            </summary>
        </member>
        <member name="P:MMALSharp.Handlers.VideoStreamCaptureHandler.MotionVectorStore">
            <summary>
            The data store for motion vectors.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.VideoStreamCaptureHandler.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.VideoStreamCaptureHandler"/> class with the specified directory and filename extension.
            </summary>
            <param name="directory">The directory to save captured videos.</param>
            <param name="extension">The filename extension for saving files.</param>
        </member>
        <member name="M:MMALSharp.Handlers.VideoStreamCaptureHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:MMALSharp.Handlers.VideoStreamCaptureHandler"/> class with the specified file path.
            </summary>
            <param name="fullPath">The absolute full path to save captured data to.</param>
        </member>
        <member name="M:MMALSharp.Handlers.VideoStreamCaptureHandler.Split">
            <summary>
            Splits the current file by closing the current stream and opening a new one.
            </summary>
        </member>
        <member name="M:MMALSharp.Handlers.VideoStreamCaptureHandler.InitialiseMotionStore(System.IO.Stream)">
            <summary>
            Used to set the current working motion vector store.
            </summary>
            <param name="stream">The <see cref="T:System.IO.FileStream"/> to write to.</param>
        </member>
        <member name="M:MMALSharp.Handlers.VideoStreamCaptureHandler.ProcessMotionVectors(System.Byte[])">
            <summary>
            Responsible for storing the motion vector data to an output stream.
            </summary>
            <param name="data">The byte array containing the motion vector data.</param>
        </member>
        <member name="T:MMALSharp.Processors.BayerMetaProcessor">
            <summary>
            The BayerMetaProcessor is used to strip Bayer metadata from a JPEG image frame via the Image Processing API.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.BayerMetaProcessor.CameraVersion">
            <summary>
            The camera version being used.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.BayerMetaProcessor.BayerMetaLengthV1">
            <summary>
            The length of the metadata for the OmniVision OV5647.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.BayerMetaProcessor.BayerMetaLengthV2">
            <summary>
            The length of the metadata for the Sony IMX219.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.BayerMetaProcessor.#ctor(MMALSharp.Common.CameraVersion)">
            <summary>
            Initialises a new instance of <see cref="T:MMALSharp.Processors.BayerMetaProcessor"/>.
            </summary>
            <param name="camVersion">The camera version you're using.</param>
        </member>
        <member name="M:MMALSharp.Processors.BayerMetaProcessor.Apply(MMALSharp.Common.IImageContext)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Processors.BayerOperationsExtensions">
            <summary>
            Extensions methods relating to Bayer metadata.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.BayerOperationsExtensions.StripBayerMetadata(MMALSharp.Processors.IFrameProcessingContext,MMALSharp.Common.CameraVersion)">
            <summary>
            Apply a processor to strip out Bayer metadata from a JPEG frame.
            </summary>
            <param name="context">The image context.</param>
            <param name="version">The camera version.</param>
            <returns>The active image context.</returns>
        </member>
        <member name="M:MMALSharp.Processors.BayerOperationsExtensions.Demosaic(MMALSharp.Processors.IFrameProcessingContext)">
            <summary>
            Apply a processor to apply a Demosaic to raw Bayer metadata.
            </summary>
            <param name="context">The image context.</param>
            <returns>The active image context.</returns>
        </member>
        <member name="T:MMALSharp.Processors.Bayer.DemosaicProcessor">
            <summary>
            The DemosaicProcessor is used to apply a demosaic algorithm to Bayer metadata.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Bayer.DemosaicProcessor.Apply(MMALSharp.Common.IImageContext)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Processors.Effects.ConvolutionBase">
            <summary>
            Base class for image processors using matrix convolution.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Effects.ConvolutionBase.ApplyConvolution(System.Double[0:,0:],System.Int32,System.Int32,MMALSharp.Common.IImageContext)">
            <summary>
            Apply a convolution based on the kernel passed in.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="kernelWidth">The kernel's width.</param>
            <param name="kernelHeight">The kernel's height.</param>
            <param name="context">An image context providing additional metadata on the data passed in.</param>
        </member>
        <member name="T:MMALSharp.Processors.Effects.CustomConvolutionProcessor">
            <summary>
            A image processor allowing for user-defined kernels.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Effects.CustomConvolutionProcessor.#ctor(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Processors.Effects.CustomConvolutionProcessor"/>.
            </summary>
            <param name="kernel">The user-defined kernel.</param>
            <param name="kernelWidth">The kernel's width.</param>
            <param name="kernelHeight">The kernel's height.</param>
        </member>
        <member name="M:MMALSharp.Processors.Effects.CustomConvolutionProcessor.Apply(MMALSharp.Common.IImageContext)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Processors.Effects.EDStrength">
            <summary>
            Represents the strength of the Edge Detection algorithm.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.EDStrength.Low">
            <summary>
            Low strength.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.EDStrength.Medium">
            <summary>
            Medium strength.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.EDStrength.High">
            <summary>
            High strength.
            </summary>
        </member>
        <member name="T:MMALSharp.Processors.Effects.EdgeDetection">
            <summary>
            A kernel based image processor used to apply Edge detection convolution.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.EdgeDetection.KernelWidth">
            <summary>
            The kernel's width.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.EdgeDetection.KernelHeight">
            <summary>
            The kernel's height.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.EdgeDetection.LowStrengthKernel">
            <summary>
            A kernel used to apply a low strength edge detection convolution to an image.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.EdgeDetection.MediumStrengthKernel">
            <summary>
            A kernel used to apply a medium strength edge detection convolution to an image.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.EdgeDetection.HighStrengthKernel">
            <summary>
            A kernel used to apply a high strength edge detection convolution to an image.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.Effects.EdgeDetection.Kernel">
            <summary>
            The working kernel.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Effects.EdgeDetection.#ctor(MMALSharp.Processors.Effects.EDStrength)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Processors.Effects.EdgeDetection"/> processor used to apply Edge detection convolution.
            </summary>
            <param name="strength">The Edge detection strength.</param>
        </member>
        <member name="M:MMALSharp.Processors.Effects.EdgeDetection.Apply(MMALSharp.Common.IImageContext)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Processors.Effects.GaussianMatrix">
            <summary>
            Represents the matrix to use when applying a Gaussian blur convolution to an image frame.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.GaussianMatrix.Matrix3x3">
            <summary>
            Use a 3x3 matrix.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Effects.GaussianMatrix.Matrix5x5">
            <summary>
            Use a 5x5 matrix.
            </summary>
        </member>
        <member name="T:MMALSharp.Processors.Effects.GaussianProcessor">
            <summary>
            A image processor used to apply a Gaussian blur effect.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Effects.GaussianProcessor.#ctor(MMALSharp.Processors.Effects.GaussianMatrix)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Processors.Effects.GaussianProcessor"/>.
            </summary>
            <param name="matrix">The Gaussian matrix to apply.</param>
        </member>
        <member name="M:MMALSharp.Processors.Effects.GaussianProcessor.Apply(MMALSharp.Common.IImageContext)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Processors.Effects.SharpenProcessor">
            <summary>
            A image processor used to apply a sharpen effect.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Effects.SharpenProcessor.Apply(MMALSharp.Common.IImageContext)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Processors.Fonts.FontOperationsExtensions">
            <summary>
            WIP.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Fonts.FontOperationsExtensions.DrawFont(MMALSharp.Processors.IFrameProcessingContext,System.String,System.Drawing.Color)">
            <summary>
            WIP.
            </summary>
            <param name="context">The image context.</param>
            <param name="text">The text to draw.</param>
            <param name="c">The color of the font.</param>
            <returns>The current <see cref="T:MMALSharp.Processors.IFrameProcessingContext"/>.</returns>
        </member>
        <member name="T:MMALSharp.Processors.FontProcessor">
            <summary>
            WIP. TODO Parse OpenType fonts.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.FontProcessor.Text">
            <summary>
            The text to write.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.FontProcessor.#ctor(System.String,System.Drawing.Color)">
            <summary>
            Initialises a new instance of <see cref="T:MMALSharp.Processors.FontProcessor"/>.
            </summary>
            <param name="text">The text to draw.</param>
            <param name="fontColour">The color of the font.</param>
        </member>
        <member name="M:MMALSharp.Processors.FontProcessor.Apply(MMALSharp.Common.IImageContext)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Processors.FrameAnalyser">
            <summary>
            The FrameAnalyser class is used with the Image Analysis API.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.FrameAnalyser.WorkingData">
            <summary>
            The frame we are working with.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.FrameAnalyser.FullFrame">
            <summary>
            True if the working data store contains a full frame.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.FrameAnalyser.ImageContext">
            <summary>
            The image metadata.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.FrameAnalyser.#ctor(MMALSharp.Common.IImageContext)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Processors.FrameAnalyser"/>.
            </summary>
            <param name="imageContext">The image metadata.</param>
        </member>
        <member name="M:MMALSharp.Processors.FrameAnalyser.Apply(System.Byte[],System.Boolean)">
            <summary>
            Applies an operation.
            </summary>
            <param name="data">The new image frame data.</param>
            <param name="eos">Marks end of stream.</param>
        </member>
        <member name="T:MMALSharp.Processors.FrameProcessingContext">
            <summary>
            A context providing a means to apply image processing. 
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.FrameProcessingContext.#ctor(MMALSharp.Common.IImageContext)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Processors.FrameProcessingContext"/>.
            </summary>
            <param name="context">Metadata for the image frame.</param>
        </member>
        <member name="M:MMALSharp.Processors.FrameProcessingContext.Apply(MMALSharp.Processors.IFrameProcessor)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Processors.IFrameAnalyser">
            <summary>
            Represents a frame analyser.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.IFrameAnalyser.Apply(System.Byte[],System.Boolean)">
            <summary>
            The operation to perform analysis.
            </summary>
            <param name="data">The working data.</param>
            <param name="eos">Signals end of stream.</param>
        </member>
        <member name="T:MMALSharp.Processors.IFrameProcessingContext">
            <summary>
            A context to apply image processing techniques on image frames.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.IFrameProcessingContext.Apply(MMALSharp.Processors.IFrameProcessor)">
            <summary>
            Applies a processing function on an image frame.
            </summary>
            <param name="processor">The image processor.</param>
            <returns>The active image context.</returns>
        </member>
        <member name="T:MMALSharp.Processors.IFrameProcessor">
            <summary>
            A processor to apply image processing techniques on image frame data.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.IFrameProcessor.Apply(MMALSharp.Common.IImageContext)">
            <summary>
            Apply the convolution.
            </summary>
            <param name="context">The image's metadata.</param>
        </member>
        <member name="T:MMALSharp.Processors.Motion.FrameDiffAnalyser">
            <summary>
            The <see cref="T:MMALSharp.Processors.Motion.FrameDiffAnalyser"/> is used to detect changes between two image frames.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.Motion.FrameDiffAnalyser.TestFrame">
            <summary>
            Working storage for the Test Frame. This is the original static image we are comparing to.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.Motion.FrameDiffAnalyser.FullTestFrame">
            <summary>
            Indicates whether we have a full test frame.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.Motion.FrameDiffAnalyser.MotionConfig">
            <summary>
            The motion configuration object.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Motion.FrameDiffAnalyser.#ctor(MMALSharp.Processors.Motion.MotionConfig,System.Action,MMALSharp.Common.IImageContext)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Processors.Motion.FrameDiffAnalyser"/>.
            </summary>
            <param name="config">The motion configuration object.</param>
            <param name="onDetect">A callback when changes are detected.</param>
            <param name="imageContext">The image metadata.</param>
        </member>
        <member name="M:MMALSharp.Processors.Motion.FrameDiffAnalyser.Apply(System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MMALSharp.Processors.Motion.MotionConfig">
            <summary>
            This class is used to store user preferences when detecting motion between two image frames.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.Motion.MotionConfig.Sensitivity">
            <summary>
            The edge detection sensitivity.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.Motion.MotionConfig.RecordDuration">
            <summary>
            How long should we record for when detected.
            </summary>
        </member>
        <member name="P:MMALSharp.Processors.Motion.MotionConfig.Threshold">
            <summary>
            The threshold to use.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Motion.MotionConfig.#ctor(MMALSharp.Processors.Effects.EDStrength,System.DateTime,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Processors.Motion.MotionConfig"/>.
            </summary>
            <param name="sensitivity">The edge detection sensitivity.</param>
            <param name="recordDuration">The record duration.</param>
            <param name="threshold">The threshold.</param>
        </member>
        <member name="T:MMALSharp.Processors.Motion.MotionType">
            <summary>
            Describes motion detection type to use.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Motion.MotionType.FrameDiff">
            <summary>
            Frame difference.
            </summary>
        </member>
        <member name="F:MMALSharp.Processors.Motion.MotionType.MotionVector">
            <summary>
            Motion vector comparison.
            </summary>
        </member>
        <member name="T:MMALSharp.Processors.Motion.MotionVectorAnalyser">
            <summary>
            A frame analyser for use with motion vector detection.
            </summary>
        </member>
        <member name="M:MMALSharp.Processors.Motion.MotionVectorAnalyser.#ctor(MMALSharp.Common.IImageContext)">
            <summary>
            Creates a new instance of <see cref="T:MMALSharp.Processors.Motion.MotionVectorAnalyser"/>.
            </summary>
            <param name="imageContext">The image metadata.</param>
        </member>
        <member name="M:MMALSharp.Processors.Motion.MotionVectorAnalyser.Apply(System.Byte[],System.Boolean)">
            <inheritdoc />
        </member>
    </members>
</doc>
